;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(start)" "(asd)" "asd" "()" "tt" "(def tt 1)" "(start)" "(try (let [ss (try (/ 8 0) (catch Throwable e \"FUCK\"))] 123) (catch Throwable e \"SHIT\"))" "(try (try (/ 8 0) (catch Throwable e \"FUCK\")) (catch Throwable e \"SHIT\"))" "(try (/ 8 0) (catch Throwable e \"FUCK\"))" "(start)" "(search r)" "(def r (request {:q \"*\" :start \"0\" :rows \"10\"} (merge (:config system) (-> \"/Users/peyo.tzolov/src/epiphany/dev/resources/customization.edn\" slurp read-string) )))" "(-> system.repl/system :config)" "(search r)" "(-> system.repl/system :solr :inventory-collection)" "(-> system.repl/system :solr keys)" "(-> system.repl/system keys)" "(search r)" "(def r (request {:q \"*\" :start \"0\" :rows \"10\"} (:config system)))" "(let [{:keys [q start rows]} (:params r)] [q start rows])" "r" "(let [{:keys [q start rows]} r] [q start rows])" "r" "t" "(def r (request {:q \"*\" :start \"0\" :end \"10\"} (:config system)))" "(Long/valueOf \"10\")" "(search r)" "(def r (request {:q \"*\" :start \"0\" :end \"10\"} (:config system)))" "(search r)" "(def r (request {:q \"*\" :start 0 :end 10} (:config system)))" "(def r (request {:q \"*\" :start 0 :end 10}))" "(defn request [params config]
       {:params params
        :solr {:inventory-collection (-> system :solr :inventory-collection)}
        :config config})" "(def system (-> system.repl/system))" "(start)" "(storage/query-client-config rdb \"ikent\")" "(def rdb (storage/conn (:rethinkdb system.repl/system)))" ":cljs/quit" "(q/->string (p/parse \"foo:\\\"bar\\\" id:123 boo:raz\"))" "(q/->string (p/parse \"food:\\\"bad\\\" id:shit foo:foo\"))" "(p/parse \"food:\\\"bad\\\" id:shit foo:foo\")" "(p/parse \"food:\\\"bad\\\" shit foo\")" "(p/parse \"food:\\\"bad\\\" OR shit OR foo\")" "(q/->string (p/parse \"food:\\\"bad\\\" OR shit OR foo\"))" "(q/->string (p/parse \"food:\\\"bad\\\"  shit  foo\"))" "(q/->string (p/parse \"food:\\\"bad\\\" OR shit AND foo\"))" "(q/->string (p/parse \"food:\\\"bad\\\" OR shit foo\"))" "(q/->string (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(a/->string (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(p/parse \"food:\\\"bad\\\" AND shit foo\")" "(q/->String (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(p/parse \"food:\\\"bad\\\" AND shit foo\")" "(keys (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(:term (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(p/parse \"food:\\\"bad\\\" AND shit foo\")" "(process-new-search \"field:\\\"a\\\"\")" "(process-new-search \"field:a\")" "(-> (parse \"field:a\"))" "(-> (p/parse \"field:a\") last-search-term)" "(p/parse \"field:a\")" "(process-new-search \"field:a\")" "(str (last-search-term (p/parse \"foo:a AND bar:b OR baz:c AND food:d OR asd:e\")))" "(last-search-term (p/parse \"foo:a AND bar:b OR baz:c AND food:d OR asd:e\"))" "(last-search-term (p/parse \"foo:a bar:b baz:c food:d asd:e\"))" "(last-search-term (p/parse \"a b c d e\"))" "(last-search-term (p/parse \"a\"))" "(p/parse \"food:\\\"bad\\\" AND shit foo\")" "u" "(p/parse \"food:\\\"bad\\\" AND shit foo\")" "(:clauses (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(:clauses (:clauses (p/parse \"food:\\\"bad\\\" AND shit foo\")))" "(:clauses) (:clauses (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(:clauses (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(:operator (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(p/parse \"food:\\\"bad\\\" AND shit foo\")" "(apply into {} (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(into {} (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(p/parse \"food:\\\"bad\\\" AND shit foo\")" "(clojure.pprint/pprint (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(pprint (p/parse \"food:\\\"bad\\\" AND shit foo\"))" "(p/parse \"food:\\\"bad\\\" AND shit foo\")" "(p/parse \".////\\\\food:\\\"bad\\\" AND shit\")" "(p/parse \"food:\\\"bad\\\" AND shit\")" "(str (p/parse \"food:\\\"bad\\\" AND shit\"))" "(p/parse \"food:\\\"bad\\\" AND shit\")" "(p/parse \"food:\\\"bad\\\"\")" "(p/parse \"food:bad\")" "(parse \"foo:\\\"a\")" "(+ 1 1)" " " "(parse \"foo:a\")" "(re-find #\"\\\"(.*?)\\\"\" \"field:\\\"a\\\"\")" "(re-find #\"\\\"(.*?)\\\"\" \"field:a\")" "(re-find #\"\\\"(.*?)\\\"\" \"hello \\\"asd\\\"\")" "(re-matches #\"\\\"(.*?)\\\"\" \"hello \\\"asd\\\"\")" "(re-find #\"\\\"(.*?)\\\"\" \"hello \\\"asd\\\"\")" "(re-find #\"\\\"(.*?)\\\"\" \"hello \")" "(process-new-search \"field:a\")" "(process-search-input \"field:a\")" "(process-search-input \"field:\\\"a\\\"\")" "(.parse js/luceneParser \"%20a%20\")" "(.parse js/luceneParser \\\"\"\\\"s\\\"\"\\\")" "(.parse js/luceneParser \"\\\"s\\\"\")" "(.parse js/luceneParser \"\\\"field:\\\"\\\"a\\\"\")" "(.parse js/luceneParser \"field:\\\"a\\\"\")" "(.parse js/luceneParser \"field:a\")" "(.parse js/luceneParser \"field:\")" "(.parse js/luceneParser \"field:\\\"\\\"\")" "(.parse js/luceneParser \"field:\\\\\\\"\\\"\")" "(+ 1 1)" "(.parse js/luceneParser \"field:\\\"ZIBELLO/2RS\\\"\")" "(.parse js/luceneParser \"field:ZIBELLO/2RS\")" "(.parse js/luceneParser \"field:'a'\")" "(.parse js/luceneParser \"field:\\\"a a\\\"\")" "(.parse js/luceneParser \"field:a a\")" "(.parse js/luceneParser \"field:a\")" "(.parse js/luceneParser \"field:\\\"a\\\"\")" "(.parse js/luceneParser \"\\\"a\\\"\")" "(.parse js/luceneParser \"a\")" "(->  \"field:a\" parse)" "(->  \"field:\\\"a\\\"\" parse)" "(->  \"field:\\\"\\\"a\\\"\\\"\" parse)" "(->  \"field:\\\"a\\\"\" parse)" "(-> \"field:\\\"a\\\"\" parse last-search-term)" "(->  \"field:\\\"a\\\"\" parse)" "(process-search-input \"field:\\\"a\\\"\")" "(process-new-search \"field:\\\"a\\\"\")" "(process-new-search \"field:a\")" "(process-new-search \"a\")" "(last-search-term (parse \"a\"))" "(parse \"a\")" "(process-new-search \"a\")" "(parse \"port:a AND c AND d AND e AND f OR g OR h OR i AND j OR k OR l OR m OR n\")" "(last-search-term (parse \"port:a AND c AND d AND e AND f OR g OR h OR i AND j OR k OR l OR m OR n\"))" "(last-search-term (parse \"port:a c d e f g h i j k l m n\"))" "(last-search-term (parse \"port:a c d e f g\"))" "(last-search-term (parse \"port:a c\"))" "(parse \"port:a c\")" "(last-search-term (parse \"port:a c\"))" "(if-let [s (:right (parse \"port:a c\"))] s)" "(parse \"port:a c\")" "(last-search-term (parse \"port:a c\"))" "(last-search-term) (parse \"port:a c\")" "(parse \"port:a c\")" "(parse \"port:a AND b AND c\")" "(parse \"port:a AND b\")" "(parse \"port:a AND post:b\")" "(parse \"port:a\")" "(parse \"port\")" "(parse \"port:\\\"port:e1b0fef3-46fa-4f7e-a1f7-5ea802228e2c\\\" AND id:*\")" "(str (parse \"port:\\\"port:e1b0fef3-46fa-4f7e-a1f7-5ea802228e2c\\\" AND id:*\"))" "(parse \"port:\\\"port:e1b0fef3-46fa-4f7e-a1f7-5ea802228e2c\\\" AND id:*\")" "(parse \"port:\"port:e1b0fef3-46fa-4f7e-a1f7-5ea802228e2c\" AND id:*\")" "(parse \"\")" "(parse \"site:()*\")" "(parse \"site:()\")" "(parse \"site:%$#@*\")" "(parse \"site:%$#@\")" "(parse \"site://\\\\*\")" "(parse \"site://*\")" "(parse \"site://\")" "(parse \"site:\\\\\\\\\")" "(parse \"site:\\\\\")" "(has-field? \"//asdas/das/foo:\\\"bar\")" "(has-field? \"foo:\\\"bar\")" "(parse \"foo:a\")" "(parse \"foo:\")" "(parse \"foo:\\\"bar\")" "(has-field? \"foo:\\\"bar\")" "(has-field? \"foo:\\\"bar\\\"\")" "(has-field? \"foo:bar\")" "(parse \"foo:bar\")" "(parse \"foo:\")" "(has-field? \"foo:\")" "(has-field? \":bar\")" "(has-field? \":\")" "(has-field? \"abcdefg\")" "(has-field? \"a\")" "(has-field? \"1\")" "(has-field? 1)" "(has-field? nil)" "(parse \"a:b\")" "(js->clj #js {:a 1} :keywordize-keys true)" "(js->clj #js {:a 1})" "(js->clj #js \"a:b\")" "(parse \"a:b\")" "(parse \"a:\")" "(parse \":\")" "(parse \":a\")" "(parse \"title:a\")" "(parse \"a\")" "(cljs-repl)" "(start)" "(log/error (s/check {s/Any s/Str} {:a :b}))" "(s/check {s/Any s/Str} {:a :b})" "(s/check {s/Any s/Any} {:a :b})" "(log/error (s/check {s/Any s/Any} {:a :b}))" "(log/error '((map inc [1 2 3])))" "(log/error (map inc [1 2 3]))" "(log/error {:a :b})" "(log/error \"ASDASD\")" "(cljs-repl)" "(start)" "(json/generate-string {:a :b})" "(json/write {:a :b})" "(pprint \"ASD\")" "(>pprint \"ASD\")" "(require '[clojure.pprint :refer [pprint] :rename {pprint >pprint}])" "(require '[clojure.pprint :refer [pprint :as >pprint]])" "(require '[clojure.pprint/pprint :refer [pprint :as >pprint]])" "(require '[clojure.pprint/pprint :as >pprint])" "(pp/pprint 23)" "(pp 123)" "(start)" "(parse \"test:\\\"foo\\\"asd\")" "(parse \"test:foo\")" "(parse \"test:\\\"foo\\\"\")" "(u/validate-search (parse \"test:\\\"foo\\\"\"))" "(u/validate-search (parse \"test:foo\"))" "(u/validate-search (parse \"\"))" "(u/validate-search (parse \"asd\"))" "(u/validate-search (parse \"\"))" "(u/validate-search (parse nil))" "(parse nil)" "(parse \"site:a\")" "(js->clj (parse \"field:\\\"ad\\\"asd\"))" "(js->clj (parse \"field:\\\"ad\\\"\"))" "(count (js->clj (parse \"field:\\\"ad\\\"\")))" "(count (js->clj (parse \"field:ad\")))" "(count (parse \"field:ad\"))" "(parse \"field:ad\")" "(parse \"field:ad fuck:you and:you\")" "(parse \"field:ad fuck:you\")" "(parse \"ad\")" "(cljs-repl)" ":cljs/quit" "(u/validate-search s)
" "(cljs-repl)" "(start)" "(suggestion request)" "(filter #(#{\"NetworkElement\"} (:group-value %)) (suggestion request))" "(filter #(#{\"NetworkElement\"})  (suggestion request))" "(filter #(#{\"NetworkElement\"}) vec (suggestion request))" "(suggestion request)" "(:config system)" "(def request {:params {:q \"site:*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)} :config {:search {:types #{\"LayerService\" \"Site\" \"NetworkElement\"}}}})" "(:config system)" "(:config syste)" "(suggestion request)" "(def request {:params {:q \"site:*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)} :config (:config system)})" "(suggestion request)" "(def request {:params {:q \"site:*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)}})" "(suggestion request)" "(def request {:params {:q \"*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)}})" "(def system system.repl/system)" "(def request {:params {:q \"*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)}})" "(suggestion request)" "(def request {:params {:q \"*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)}})" "(s/validate schema/SearchSuggestion (filter #(#{\"LayerService\" \"NetworkElement\" \"Site\"} (:group-value %)) tt))" "(require '[epiphany.schema :as schema])" "(s/validate schema/SearchSuggestion (filter #(#{\"LayerService\" \"NetworkElement\" \"Site\"} (:group-value %)) tt))" "(require '[schema.core :as s])" "(s/validate schema/SearchSuggestion (filter #(#{\"LayerService\" \"NetworkElement\" \"Site\"} (:group-value %)) tt))" "(filter #(#{\"LayerService\" \"NetworkElement\" \"Site\"} (:group-value %)) tt)" "(def tt '({:group-value \"Site\", :docs [{:id \"MULAZZO/92A\", :type \":hub-site\", :display-name \"MULAZZO/92A 56304\", :entity \"Site\"} {:id \"FIVIZZANO/9B6\", :type \":hub-site\", :display-name \"FIVIZZANO/9B6 59486\", :entity \"Site\"} {:id \"BRENDOLA/1U4\", :type \":hub-site\", :display-name \"BRENDOLA/1U4 33956\", :entity \"Site\"} {:id \"MILANO/B4H\", :type \":hub-site\", :display-name \"MILANO/B4H 21622\", :entity \"Site\"} {:id \"MILANO/F3F\", :type \":cell-site\", :display-name \"MILANO/F3F 21499\", :entity \"Site\"}], :num-found 11389} {:group-value \"LayerService\", :docs [{:display-name \"LECCE/I8S-BARI/H1A VPC 0002\", :id \"LECCE/I8S-BARI/H1A VPC 0002\", :entity \"LayerService\"} {:display-name \"BOLOGNA/702-BOLOGNA/H1A S1 0001 [1798]\", :id \"BOLOGNA/702-BOLOGNA/H1A S1 0001\", :entity \"LayerService\"} {:display-name \"VALBRONA/B00-MILANO/H1A VPC 0002\", :id \"VALBRONA/B00-MILANO/H1A VPC 0002\", :entity \"LayerService\"} {:display-name \"VERBANIA/3KJ-TORINO/H1A VPC 0002\", :id \"VERBANIA/3KJ-TORINO/H1A VPC 0002\", :entity \"LayerService\"} {:display-name \"BAGNASCO/V8B-TORINO/H1A VPC 0002\", :id \"BAGNASCO/V8B-TORINO/H1A VPC 0002\", :entity \"LayerService\"}], :num-found 15587} {:group-value \"NetworkElement\", :docs [{:id \"MULAZZO/92A:CELL-TOWER\", :display-name \"MULAZZO/92A:CELL-TOWER\", :entity \"NetworkElement\"} {:id \"MENTANA/6F7:CELL-TOWER\", :display-name \"MENTANA/6F7:CELL-TOWER\", :entity \"NetworkElement\"} {:id \"CANNARA/1L5:CELL-TOWER\", :display-name \"CANNARA/1L5:CELL-TOWER\", :entity \"NetworkElement\"} {:id \"BRENDOLA/1U4:CELL-TOWER\", :display-name \"BRENDOLA/1U4:CELL-TOWER\", :entity \"NetworkElement\"} {:id \"VERANOBRIANZ/H1A:CELL-TOWER\", :display-name \"VERANOBRIANZ/H1A:CELL-TOWER\", :entity \"NetworkElement\"}], :num-found 31836} {:group-value \"Port\", :docs [{:display-name \"LAME_OMS10_01\", :id \"LAME_OMS10_01-A/B/04/A1B/03/02\", :entity \"Port\"} {:display-name \"CA_ETN_107\", :id \"CA_ETN_107/A/A/005/001/07/03\", :entity \"Port\"} {:display-name \"CA5NODEB1166\", :id \"CA5NODEB1166A/A/A/001/007/01/TN_A\", :entity \"Port\"} {:display-name \"BA0063612L\", :id \"BA6NODEB3612A/A/A/001/008/01/TN_A\", :entity \"Port\"} {:display-name \"BA_ETN_031\", :id \"BA_ETN_031/A/A/007/001/07/02\", :entity \"Port\"}], :num-found 11341} {:group-value \"SiteRole\", :docs [{:display-name \"aggregation-site\", :id \"aggregation-site\", :entity \"SiteRole\"}], :num-found 1} {:group-value \"Street\", :docs [{:display-name \"Via Dello Stabilimento, 1  - Raccordo stradale TERNI-ORTE US\", :id \"Via Dello Stabilimento, 1  - Raccordo stradale TERNI-ORTE US\", :entity \"Street\"}], :num-found 1}))" "(start)" "(filter #(#{\"LayerService\" \"NetworkElement\" \"Site\"} (:group-value %)) tt)" "(filter #(entity-type (:group-value %)) tt)" "(def tt '({:group-value \"Site\", :docs [{:id \"MULAZZO/92A\", :type \":hub-site\", :display-name \"MULAZZO/92A 56304\", :entity \"Site\"} {:id \"FIVIZZANO/9B6\", :type \":hub-site\", :display-name \"FIVIZZANO/9B6 59486\", :entity \"Site\"} {:id \"BRENDOLA/1U4\", :type \":hub-site\", :display-name \"BRENDOLA/1U4 33956\", :entity \"Site\"} {:id \"MILANO/B4H\", :type \":hub-site\", :display-name \"MILANO/B4H 21622\", :entity \"Site\"} {:id \"MILANO/F3F\", :type \":cell-site\", :display-name \"MILANO/F3F 21499\", :entity \"Site\"}], :num-found 11389} {:group-value \"LayerService\", :docs [{:display-name \"LECCE/I8S-BARI/H1A VPC 0002\", :id \"LECCE/I8S-BARI/H1A VPC 0002\", :entity \"LayerService\"} {:display-name \"BOLOGNA/702-BOLOGNA/H1A S1 0001 [1798]\", :id \"BOLOGNA/702-BOLOGNA/H1A S1 0001\", :entity \"LayerService\"} {:display-name \"VALBRONA/B00-MILANO/H1A VPC 0002\", :id \"VALBRONA/B00-MILANO/H1A VPC 0002\", :entity \"LayerService\"} {:display-name \"VERBANIA/3KJ-TORINO/H1A VPC 0002\", :id \"VERBANIA/3KJ-TORINO/H1A VPC 0002\", :entity \"LayerService\"} {:display-name \"BAGNASCO/V8B-TORINO/H1A VPC 0002\", :id \"BAGNASCO/V8B-TORINO/H1A VPC 0002\", :entity \"LayerService\"}], :num-found 15587} {:group-value \"NetworkElement\", :docs [{:id \"MULAZZO/92A:CELL-TOWER\", :display-name \"MULAZZO/92A:CELL-TOWER\", :entity \"NetworkElement\"} {:id \"MENTANA/6F7:CELL-TOWER\", :display-name \"MENTANA/6F7:CELL-TOWER\", :entity \"NetworkElement\"} {:id \"CANNARA/1L5:CELL-TOWER\", :display-name \"CANNARA/1L5:CELL-TOWER\", :entity \"NetworkElement\"} {:id \"BRENDOLA/1U4:CELL-TOWER\", :display-name \"BRENDOLA/1U4:CELL-TOWER\", :entity \"NetworkElement\"} {:id \"VERANOBRIANZ/H1A:CELL-TOWER\", :display-name \"VERANOBRIANZ/H1A:CELL-TOWER\", :entity \"NetworkElement\"}], :num-found 31836} {:group-value \"Port\", :docs [{:display-name \"LAME_OMS10_01\", :id \"LAME_OMS10_01-A/B/04/A1B/03/02\", :entity \"Port\"} {:display-name \"CA_ETN_107\", :id \"CA_ETN_107/A/A/005/001/07/03\", :entity \"Port\"} {:display-name \"CA5NODEB1166\", :id \"CA5NODEB1166A/A/A/001/007/01/TN_A\", :entity \"Port\"} {:display-name \"BA0063612L\", :id \"BA6NODEB3612A/A/A/001/008/01/TN_A\", :entity \"Port\"} {:display-name \"BA_ETN_031\", :id \"BA_ETN_031/A/A/007/001/07/02\", :entity \"Port\"}], :num-found 11341} {:group-value \"SiteRole\", :docs [{:display-name \"aggregation-site\", :id \"aggregation-site\", :entity \"SiteRole\"}], :num-found 1} {:group-value \"Street\", :docs [{:display-name \"Via Dello Stabilimento, 1  - Raccordo stradale TERNI-ORTE US\", :id \"Via Dello Stabilimento, 1  - Raccordo stradale TERNI-ORTE US\", :entity \"Street\"}], :num-found 1}))" "'(filter #(entity-type (:group-value %)))" "(start)" "(log/info (pr-str (map inc [1 2 3])))" "(log/info (map inc [1 2 3]))" "(prn (map inc [1 2 3]))" "(start)" "(def tt '{\"tag\":\"list\",\"rep\":[{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"Site\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"id\",\"k\":-1},\"MULAZZO/92A\",{\"name\":\"type\",\"k\":-1},\":hub-site\",{\"name\":\"display-name\",\"k\":-1},\"MULAZZO/92A 56304\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"FIVIZZANO/9B6\",{\"name\":\"type\",\"k\":-1},\":hub-site\",{\"name\":\"display-name\",\"k\":-1},\"FIVIZZANO/9B6 59486\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"BRENDOLA/1U4\",{\"name\":\"type\",\"k\":-1},\":hub-site\",{\"name\":\"display-name\",\"k\":-1},\"BRENDOLA/1U4 33956\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"MILANO/B4H\",{\"name\":\"type\",\"k\":-1},\":hub-site\",{\"name\":\"display-name\",\"k\":-1},\"MILANO/B4H 21622\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"MILANO/F3F\",{\"name\":\"type\",\"k\":-1},\":cell-site\",{\"name\":\"display-name\",\"k\":-1},\"MILANO/F3F 21499\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},11389],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"LayerService\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"LECCE/I8S-BARI/H1A VPC 0002\",{\"name\":\"id\",\"k\":-1},\"LECCE/I8S-BARI/H1A VPC 0002\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"BOLOGNA/702-BOLOGNA/H1A S1 0001 [1798]\",{\"name\":\"id\",\"k\":-1},\"BOLOGNA/702-BOLOGNA/H1A S1 0001\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"VALBRONA/B00-MILANO/H1A VPC 0002\",{\"name\":\"id\",\"k\":-1},\"VALBRONA/B00-MILANO/H1A VPC 0002\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"VERBANIA/3KJ-TORINO/H1A VPC 0002\",{\"name\":\"id\",\"k\":-1},\"VERBANIA/3KJ-TORINO/H1A VPC 0002\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"BAGNASCO/V8B-TORINO/H1A VPC 0002\",{\"name\":\"id\",\"k\":-1},\"BAGNASCO/V8B-TORINO/H1A VPC 0002\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},15587],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"NetworkElement\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"id\",\"k\":-1},\"MULAZZO/92A:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"MULAZZO/92A:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"MENTANA/6F7:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"MENTANA/6F7:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"CANNARA/1L5:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"CANNARA/1L5:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"BRENDOLA/1U4:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"BRENDOLA/1U4:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"VERANOBRIANZ/H1A:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"VERANOBRIANZ/H1A:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},31836],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"Port\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"LAME_OMS10_01\",{\"name\":\"id\",\"k\":-1},\"LAME_OMS10_01-A/B/04/A1B/03/02\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"CA_ETN_107\",{\"name\":\"id\",\"k\":-1},\"CA_ETN_107/A/A/005/001/07/03\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"CA5NODEB1166\",{\"name\":\"id\",\"k\":-1},\"CA5NODEB1166A/A/A/001/007/01/TN_A\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"BA0063612L\",{\"name\":\"id\",\"k\":-1},\"BA6NODEB3612A/A/A/001/008/01/TN_A\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"BA_ETN_031\",{\"name\":\"id\",\"k\":-1},\"BA_ETN_031/A/A/007/001/07/02\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},11341],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"SiteRole\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"aggregation-site\",{\"name\":\"id\",\"k\":-1},\"aggregation-site\",{\"name\":\"entity\",\"k\":-1},\"SiteRole\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},1],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"Street\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"Via Dello Stabilimento, 1  - Raccordo stradale TERNI-ORTE US\",{\"name\":\"id\",\"k\":-1},\"Via Dello Stabilimento, 1  - Raccordo stradale TERNI-ORTE US\",{\"name\":\"entity\",\"k\":-1},\"Street\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},1],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],\"k\":-1})" "(def tt' {\"tag\":\"list\",\"rep\":[{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"Site\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"id\",\"k\":-1},\"MULAZZO/92A\",{\"name\":\"type\",\"k\":-1},\":hub-site\",{\"name\":\"display-name\",\"k\":-1},\"MULAZZO/92A 56304\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"FIVIZZANO/9B6\",{\"name\":\"type\",\"k\":-1},\":hub-site\",{\"name\":\"display-name\",\"k\":-1},\"FIVIZZANO/9B6 59486\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"BRENDOLA/1U4\",{\"name\":\"type\",\"k\":-1},\":hub-site\",{\"name\":\"display-name\",\"k\":-1},\"BRENDOLA/1U4 33956\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"MILANO/B4H\",{\"name\":\"type\",\"k\":-1},\":hub-site\",{\"name\":\"display-name\",\"k\":-1},\"MILANO/B4H 21622\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"MILANO/F3F\",{\"name\":\"type\",\"k\":-1},\":cell-site\",{\"name\":\"display-name\",\"k\":-1},\"MILANO/F3F 21499\",{\"name\":\"entity\",\"k\":-1},\"Site\"],\"a\":null,\"k\":-1,\"size\":4,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},11389],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"LayerService\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"LECCE/I8S-BARI/H1A VPC 0002\",{\"name\":\"id\",\"k\":-1},\"LECCE/I8S-BARI/H1A VPC 0002\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"BOLOGNA/702-BOLOGNA/H1A S1 0001 [1798]\",{\"name\":\"id\",\"k\":-1},\"BOLOGNA/702-BOLOGNA/H1A S1 0001\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"VALBRONA/B00-MILANO/H1A VPC 0002\",{\"name\":\"id\",\"k\":-1},\"VALBRONA/B00-MILANO/H1A VPC 0002\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"VERBANIA/3KJ-TORINO/H1A VPC 0002\",{\"name\":\"id\",\"k\":-1},\"VERBANIA/3KJ-TORINO/H1A VPC 0002\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"BAGNASCO/V8B-TORINO/H1A VPC 0002\",{\"name\":\"id\",\"k\":-1},\"BAGNASCO/V8B-TORINO/H1A VPC 0002\",{\"name\":\"entity\",\"k\":-1},\"LayerService\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},15587],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"NetworkElement\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"id\",\"k\":-1},\"MULAZZO/92A:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"MULAZZO/92A:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"MENTANA/6F7:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"MENTANA/6F7:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"CANNARA/1L5:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"CANNARA/1L5:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"BRENDOLA/1U4:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"BRENDOLA/1U4:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"id\",\"k\":-1},\"VERANOBRIANZ/H1A:CELL-TOWER\",{\"name\":\"display-name\",\"k\":-1},\"VERANOBRIANZ/H1A:CELL-TOWER\",{\"name\":\"entity\",\"k\":-1},\"NetworkElement\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},31836],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"Port\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"LAME_OMS10_01\",{\"name\":\"id\",\"k\":-1},\"LAME_OMS10_01-A/B/04/A1B/03/02\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"CA_ETN_107\",{\"name\":\"id\",\"k\":-1},\"CA_ETN_107/A/A/005/001/07/03\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"CA5NODEB1166\",{\"name\":\"id\",\"k\":-1},\"CA5NODEB1166A/A/A/001/007/01/TN_A\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"BA0063612L\",{\"name\":\"id\",\"k\":-1},\"BA6NODEB3612A/A/A/001/008/01/TN_A\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"BA_ETN_031\",{\"name\":\"id\",\"k\":-1},\"BA_ETN_031/A/A/007/001/07/02\",{\"name\":\"entity\",\"k\":-1},\"Port\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},11341],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"SiteRole\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"aggregation-site\",{\"name\":\"id\",\"k\":-1},\"aggregation-site\",{\"name\":\"entity\",\"k\":-1},\"SiteRole\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},1],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0},{\"g\":[{\"name\":\"group-value\",\"k\":-1},\"Street\",{\"name\":\"docs\",\"k\":-1},[{\"g\":[{\"name\":\"display-name\",\"k\":-1},\"Via Dello Stabilimento, 1  - Raccordo stradale TERNI-ORTE US\",{\"name\":\"id\",\"k\":-1},\"Via Dello Stabilimento, 1  - Raccordo stradale TERNI-ORTE US\",{\"name\":\"entity\",\"k\":-1},\"Street\"],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],{\"name\":\"num-found\",\"k\":-1},1],\"a\":null,\"k\":-1,\"size\":3,\"aa\":0}],\"k\":-1})" "(start)" "(get-in tt [:search :types])" "(def tt '{:solr-url \"http://med19.cenx.localnet:8983/solr/\", :alarms-collection-url \"http://med19.cenx.localnet:8983/solr/alarms/select\", :inventory-collection-url \"http://med19.cenx.localnet:8983/solr/parker/select\", :security {:run-mode :dev, :jwt-session-timeout 15, :ldap {:host \"med10.cenx.localnet:389\", :base-ctx-dn \"ou=users,dc=cenx,dc=com\", :base-filter \"(uid=%s)\", :role-ctx-dn \"ou=groups,dc=cenx,dc=com\", :role-filter \"(uniqueMember=%s)\", :role-name-attribute :cn, :default-role \"user\"}, :dev-credentials {:username \"ikent\", :password \"tester\"}, :skip-login? true, :jwt-token-secret \"cenx-secret\"}, :entities {:frame {:icon :frame}, :site {:icon :building}, :link-connection {:icon :cloud}, :organization {:icon :building}, :network-element {:icon :macro-cell}, :layer-service-termination {:icon :port}, :vm-port {:icon :vm-port}, :connection-end-point {:icon :connection-end-point}, :subnetwork-connection {:icon :switch, :base-sim-entity :subnetwork-connection}, :frame-boundary {:icon :frame}, :vnfc {:icon :vnfc}, :layer-service {:icon :container}}, :search {:type->id-field {\"LayerService\" :layer-service, \"Site\" :site, \"NetworkElement\" :network-element}, :query-fields [\"id\" \"layer-service\" \"site\" \"network-element\"], :types #{\"LayerService\" \"NetworkElement\" \"Site\"}}, :inventory-dashboard {:tables {\"Site\" {:base-q \"entity:Site\", :field-list [\"id\" \"display-name\"]}, \"LayerService\" {:base-q \"entity:LayerService\", :field-list [\"id\" \"display-name\"]}}, :rollups {:pivot-options [\"region\"]}, :kpis [\"Site\" \"LayerService\" \"Port\"]}, :inventory-collection \"parker\", :events-collection-url \"http://med19.cenx.localnet:8983/solr/events/select\", :last-modified-base 0, :user-profiles :enabled, :network-view {:map-tile-service :google, :esri-map-tile-server \"http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer\", :default-tile-server \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"}, :rethinkdb {:change-tables [\"user_data\" \"admin_messages\"], :users [{:user-id \"user1\", :firstname \"John\", :lastname \"Smith\", :password (creds/hash-bcrypt \"password\"), :saved-searches [], :search-history [], :explorer-history []} {:user-id \"user1\", :firstname \"Ann\", :lastname \"Jones\", :password (creds/hash-bcrypt \"password\"), :saved-searches [], :search-history [], :explorer-history []}]}, :analytics-api-url \"http://localhost:8080/delorean/graph/time-series/\"})" "(start)" "(-> system.repl/system :customization)" "(stop)" "(-> system.repl/system :customization)" "(-> system.repl/system keys)" "
" "(-> system.repl/system :config clojure.pprint/pprint)" "(-> system.repl/system :config)" "(-> system.repl/system keys)" "(-> system.repl/system :customization)" "(-> system.repl/system keys)" "(-> system.repl/system :config keys)" "(-> system.repl/system :config :search :types)" "(-> system.repl/system :config keys)" "(filter #{:a :v} [:a :v])" "(start)" ":cljs/quit" "(parse  \"11:11:11\")" "(is-valid?  \"11:11:11\")" "(is-valid?  \"11:11\")" "(is-valid?  \"11\")" "(is-valid?  \"\\\"asd:asd\\\" ads\")" "(parse \"\\\"asd:asd\\\" ads\")" "(parse \"\\\"asd:asd\\\"\")" "ad








p

" "(parse \"\\\"asd\\\"\")" "(parse \"asd\")" "(cljs-repl)" "(start)" "(in-ns 'user)" "(def cc {:config {}})" "epiphany.schema/Configuration" "(cljs-repl)" "epiphany.schema/Configuration" "(start)" "(in-ns 'user)" "(time (slurp (io/file \"/Users/peyo.tzolov/src/epiphany/dev/resources/customization.edn\")))" "(time (.lastModified (io/file \"/Users/peyo.tzolov/src/epiphany/dev/resources/customization.edn\")))" "(.lastModified (io/file \"/Users/peyo.tzolov/src/epiphany/dev/resources/customization.edn\"))" "(.getLastModified (io/file \"/Users/peyo.tzolov/src/epiphany/dev/resources/customization.edn\"))" "(io/file \"/Users/peyo.tzolov/src/epiphany/dev/resources/customization.edn\")" "((comp (fn [a] (* a 2)) (fn [a] (inc a))) 1)" "((comp (fn [a] (inc a)) (fn [a] (* a 2))) 1)" "(start)" "(update {:config {:a {:b 1}}} :config
                                       cu/deep-merge {:a {:b 2}})" "(update {:config {:a {:b 1}}} :config
                                       cu/deep-merge )" "(start)" "(update {:asd {:2 4}} :asd merge {:1 3})" "(update {} :asd merge {:1 3})" "(start)" "(select-keys (-> system.repl/system :config :security) [:dev-credentials
                                                           :skip-login?])" "(-> system.repl/system :config :security)" "(start)" "(-> system.repl/system :config :security)" "(start)" "(stop)" "(start)" "(starat)" "(start)" "(stop)" "(start)" "(stop)" "(start)" "(stop)" "(start)" "(stop)" "(start)" "(stop)" "(start)" "(-> system.repl/system :config :customization-docs)" "(start)" "(def tt (read-file \"config.edn\" {:app-name \"epiphany\" :base-path \"/opt/cenx/application/\"}))" "(-> system.repl/system :config :customization-docs)" "(start)" "(search-types (-> system.repl/system :config))" "(get-in (-> system.repl/system :config)
                          [:search :type->id-field]
                          {\"VirtualNetworkFunction\" :virtual-network-function
                           \"LayerService\" :layer-service
                           \"Host\" :host})" "(get-in (-> system.repl/system :config)
          [:search :query-fields]
          [\"id\" \"layer-service\" \"host\" \"site\"])" "(start)" "(-> system.repl/system :config)" "tt" "(def tt (read-file \"config.edn\" {:app-name \"epiphany\" :base-path \"/opt/cenx/application/\"}))" "(def tt (read-file {:app-name \"epiphany\" :base-path \"/opt/cenx/application/\"} \"config.edn\"))" "(start)" "(in-ns 'user)" "tt" "(def tt (read-config {:app-name \"epiphany\" :base-path \"/opt/cenx/application/\"} \"config.edn\"))" "(config-utils/load-and-compile component \"config.edn\")" "(load-and-compile component \"config.edn\")" "(start)" "(nth [1 2 3] 0)" "\"sdsa\"" "tt" "(json/parse-string tt)" "(pr-str tt)" "(json/parse-string (pr-str tt))" "(json/read-string (pr-str tt))" "(json/parse (pr-str tt))" "(def tt [{:id \"DerivedType.name:Anchor Entity\"
   :field \"DerivedType.name\"
   :value \"Anchor Entity\"
   :references {:DerivedType [1234]}}
  {:id \"DerivedType.field1:field1\"
   :field \"DerivedType.field1\"
   :value \"field1\"
   :references {:DerivedType [1234]}}
  {:id \"OtherDerivedType.name:Not Anchor Entity\"
   :field \"OtherDerivedType.name\"
   :value \"Not Anchor Entity\"
   :references {:DerivedType [1234]}}
  {:id \"OtherDerivedType.field1:different field1\"
   :field \"OtherDerivedType.field1\"
   :value \"different field1\"
   :references {:DerivedType [1234]}}
  {:id \"OtherDerivedType.name:Not Anchor Entity2\"
   :field \"OtherDerivedType.name\"
   :value \"Not Anchor Entity2\"
   :references {:DerivedType [1234]}}
   {:id 1234
   :type \"Derived Type\"
   :DerivedType {:name [\"Anchor Entity\"]
                 :field1 [\"field1\"]}
   :OtherDerivedType {:name [\"Not Anchor Entity\" \"Not Anchor Entity2\"]
                      :field1 [\"different field1\"]}}])" "(let tt '[{:id \"DerivedType.name:Anchor Entity\"
   :field \"DerivedType.name\"
   :value \"Anchor Entity\"
   :references {:DerivedType [1234]}}
  {:id \"DerivedType.field1:field1\"
   :field \"DerivedType.field1\"
   :value \"field1\"
   :references {:DerivedType [1234]}}
  {:id \"OtherDerivedType.name:Not Anchor Entity\"
   :field \"OtherDerivedType.name\"
   :value \"Not Anchor Entity\"
   :references {:DerivedType [1234]}}
  {:id \"OtherDerivedType.field1:different field1\"
   :field \"OtherDerivedType.field1\"
   :value \"different field1\"
   :references {:DerivedType [1234]}}
  {:id \"OtherDerivedType.name:Not Anchor Entity2\"
   :field \"OtherDerivedType.name\"
   :value \"Not Anchor Entity2\"
   :references {:DerivedType [1234]}}
   {:id 1234
   :type \"Derived Type\"
   :DerivedType {:name [\"Anchor Entity\"]
                 :field1 [\"field1\"]}
   :OtherDerivedType {:name [\"Not Anchor Entity\" \"Not Anchor Entity2\"]
                      :field1 [\"different field1\"]}}])" "(let tt [{:id \"DerivedType.name:Anchor Entity\"
   :field \"DerivedType.name\"
   :value \"Anchor Entity\"
   :references {:DerivedType [1234]}}
  {:id \"DerivedType.field1:field1\"
   :field \"DerivedType.field1\"
   :value \"field1\"
   :references {:DerivedType [1234]}}
  {:id \"OtherDerivedType.name:Not Anchor Entity\"
   :field \"OtherDerivedType.name\"
   :value \"Not Anchor Entity\"
   :references {:DerivedType [1234]}}
  {:id \"OtherDerivedType.field1:different field1\"
   :field \"OtherDerivedType.field1\"
   :value \"different field1\"
   :references {:DerivedType [1234]}}
  {:id \"OtherDerivedType.name:Not Anchor Entity2\"
   :field \"OtherDerivedType.name\"
   :value \"Not Anchor Entity2\"
   :references {:DerivedType [1234]}}
   {:id 1234
   :type \"Derived Type\"
   :DerivedType {:name [\"Anchor Entity\"]
                 :field1 [\"field1\"]}
   :OtherDerivedType {:name [\"Not Anchor Entity\" \"Not Anchor Entity2\"]
                      :field1 [\"different field1\"]}}])" "(require '[cheshire.core :as json])" "(assoc-in [1 2 3] [0] 2)" "(assoc-in '(1 2 3) [0] 2)" "(start)" "(stop)" "(start)" "(assoc-in {}  [ :a :b :c ] 2)" "(assoc-in {}  [ :a :b :c 1])" "(clojure.string/split \"ASD:ASD\" #\"\\:\")" "(clojure.string/split \"ASD:ASD\" #\"/:\")" "(clojure.string/split #\"/:\" \"ASD:ASD\")" "(clojure.string/split \"ASD:ASD\" #\"/:\")" "(-> \"ASD\" rest (clojure.string/join))" "(str (drop 1 \"asd\"))" "(drop 1 \"asd\")" "(drop [1 2 3])" "(drop \"asd\")" "(start)" "(re-find #\"site\\:\" \"asdasd\")" "(re-find #\"site\\:\" \"site:asdasd\")" "(let [tt 1] (condp = tt 1 :bar
              :foo))" "(let [tt 1] (condp = tt
              :foo))" "(rand-int 0)" "(rand-int)" ":cljs/quit" "(decode-params (parse-url \"/?query=\"))
" "(-> \"/?query=\" parse-url identity)" "(-> \"/?query=\" parse-url identity-fn)" "(parse-url \"/?query=\")" "(pushy/set-token! history \"/?query=\")" "(pushy/set-token! history \"/?query=asd\")" "(pushy/set-token! history \"/?query\")" "(bidi/match-route routes \"/network\")" "(bidi/match-route routes \"/?query\")" "(bidi/match-route routes \"/\")" "(bidi/match-route routes url-str)" "(pushy/start! history)" "(def history (pushy/pushy dispatch-route parse-url))" "(app-routes)
" "history" "(wildcard-search \"asd*\")" "(wildcard-search \"asd\")" "(wildcard-search \"*asd\")" "(wildcard-search \"*asd*\")" "(wildcard-search \"asd\")" "(cljs-repl)" "(in-ns 'user)" "(cljs-repl)" "tt" "t" "(def tt (conn \"epiphany\"))" "(-> system.repl/system :rethinkdb :config :rethinkdb)" "(-> system.repl/system :rethinkdb :config keys)" "(-> system.repl/system :rethinkdb keys)" "(:rethinkdb system.repl/system)" "(keys system.repl/system)" "(clojure.pprint/pprint '{:app-name \"epiphany\", :base-path \"/opt/cenx/application/\", :resource-only? false, :middleware-fn #function[lego.components.config.Config/c-mid--14585], :solr-url \"http://med23.cenx.localnet:8983/solr/\", :alarms-collection-url \"http://med23.cenx.localnet:8983/solr/alarms/select\", :inventory-collection-url \"http://med23.cenx.localnet:8983/solr/parker/select\", :security {:run-mode :dev, :jwt-session-timeout 15, :ldap {:host \"med22.cenx.localnet:389\", :base-ctx-dn \"ou=users,dc=cenx,dc=com\", :base-filter \"(uid=%s)\", :role-ctx-dn \"ou=groups,dc=cenx,dc=com\", :role-filter \"(uniqueMember=%s)\", :role-name-attribute :cn, :default-role \"user\"}, :jwt-token-secret \"cenx-secret\"}, :search {:type->id-field {\"VirtualNetworkFunction\" :virtual-network-function, \"LayerService\" :layer-service, \"Host\" :host}}, :inventory-collection \"parker\", :events-collection-url \"http://med23.cenx.localnet:8983/solr/events/select\", :user-profiles :enabled, :rethinkdb {:host \"172.32.1.229\", :port 32769, :users [{:user-id \"user1\", :firstname \"John\", :lastname \"Smith\", :password (creds/hash-bcrypt \"password\"), :saved-searches [], :search-history [], :explorer-history []} {:user-id \"user1\", :firstname \"Ann\", :lastname \"Jones\", :password (creds/hash-bcrypt \"password\"), :saved-searches [], :search-history [], :explorer-history []}]}, :analytics-api-url \"http://localhost:8080/delorean/graph/time-series/\", :customization-docs {:inventory-dashboard {:tables {\"host\" {:base-q \"entity:Host\", :field-list [\"id\" \"display-name\" \"vendor\" \"host-ip\" \"site\" \"model\"]}, \"site\" {:base-q \"entity:Site\", :field-list [\"id\" \"display-name\" \"host\" \"tenant\" \"virtual-machine\" \"\"]}, \"layer-service\" {:base-q \"entity:LayerService\", :field-list [\"id\" \"display-name\"]}, \"virtual-machine\" {:base-q \"entity:VirtualMachine\", :field-list [\"id\" \"display-name\" \"tenant\" \"host\" \"network\"]}, \"virtual-network-function\" {:base-q \"entity:VirtualNetworkFunction\", :field-list [\"id\" \"display-name\" \"site\" \"vnf-type\" \"tenant\" \"vendor\" \"virtual-network-function-component\" \"host\"]}, \"virtual-network-function-component\" {:base-q \"entity:VirtualNetworkFunctionComponent\", :field-list [\"id\" \"display-name\"]}}, :rollups {:pivot-options [\"region\" \"virtual-network-function\" \"host\" \"site\"]}}}})
" "(clojure.pprint/pprint {:app-name \"epiphany\", :base-path \"/opt/cenx/application/\", :resource-only? false, :middleware-fn #function[lego.components.config.Config/c-mid--14585], :solr-url \"http://med23.cenx.localnet:8983/solr/\", :alarms-collection-url \"http://med23.cenx.localnet:8983/solr/alarms/select\", :inventory-collection-url \"http://med23.cenx.localnet:8983/solr/parker/select\", :security {:run-mode :dev, :jwt-session-timeout 15, :ldap {:host \"med22.cenx.localnet:389\", :base-ctx-dn \"ou=users,dc=cenx,dc=com\", :base-filter \"(uid=%s)\", :role-ctx-dn \"ou=groups,dc=cenx,dc=com\", :role-filter \"(uniqueMember=%s)\", :role-name-attribute :cn, :default-role \"user\"}, :jwt-token-secret \"cenx-secret\"}, :search {:type->id-field {\"VirtualNetworkFunction\" :virtual-network-function, \"LayerService\" :layer-service, \"Host\" :host}}, :inventory-collection \"parker\", :events-collection-url \"http://med23.cenx.localnet:8983/solr/events/select\", :user-profiles :enabled, :rethinkdb {:host \"172.32.1.229\", :port 32769, :users [{:user-id \"user1\", :firstname \"John\", :lastname \"Smith\", :password (creds/hash-bcrypt \"password\"), :saved-searches [], :search-history [], :explorer-history []} {:user-id \"user1\", :firstname \"Ann\", :lastname \"Jones\", :password (creds/hash-bcrypt \"password\"), :saved-searches [], :search-history [], :explorer-history []}]}, :analytics-api-url \"http://localhost:8080/delorean/graph/time-series/\", :customization-docs {:inventory-dashboard {:tables {\"host\" {:base-q \"entity:Host\", :field-list [\"id\" \"display-name\" \"vendor\" \"host-ip\" \"site\" \"model\"]}, \"site\" {:base-q \"entity:Site\", :field-list [\"id\" \"display-name\" \"host\" \"tenant\" \"virtual-machine\" \"\"]}, \"layer-service\" {:base-q \"entity:LayerService\", :field-list [\"id\" \"display-name\"]}, \"virtual-machine\" {:base-q \"entity:VirtualMachine\", :field-list [\"id\" \"display-name\" \"tenant\" \"host\" \"network\"]}, \"virtual-network-function\" {:base-q \"entity:VirtualNetworkFunction\", :field-list [\"id\" \"display-name\" \"site\" \"vnf-type\" \"tenant\" \"vendor\" \"virtual-network-function-component\" \"host\"]}, \"virtual-network-function-component\" {:base-q \"entity:VirtualNetworkFunctionComponent\", :field-list [\"id\" \"display-name\"]}}, :rollups {:pivot-options [\"region\" \"virtual-network-function\" \"host\" \"site\"]}}}})
" "(-> system.repl/system :config clojure.pprint/pprint)" "(-> system.repl/system :config >pprint)" "(get-in system.repl/system [:config :rethinkdb])" "(:config system.repl/system)" "(start)" "cc" "(def cc (connect {:rethinkdb {:host \"172.32.1.229\" :port 32769}}))" "(def cc (connect {:rethinkdb {:host \"http://med22.cenx.localnet\" :port 32769}}))" "(def cc (connect {:rethinkdb {:host \"http://med22.cenx.localnet\"}}))" "(def cc (connect {:host \"http://med22.cenx.localnet\"}))" "cc" "(def cc (connect {:host \"http://med22.cenx.localnet\"}))" "(def cc (connect {}))" "(def cc (connect ))" "(def cc (connect {:host \"http://med22.cenx.localnet\"}))" "cc" "(def cc (connect {:host \"http://med22.cenx.localnet\" :port 32769}))" "(connect {:host \"http://med22.cenx.localnet\" :port 32769})" "(connect (assoc-in (:config system.repl/system) [:rethinkdb :port] 12345))" "(assoc-in (:config system.repl/system) [:rethinkdb :port] 12345)" "(update-in (:config system.repl/system) [:rethinkdb :port] 12345)" "(:config system.repl/system)" "(load-and-compile (:config system.repl/system) \"config.edn\")" "(start)" "(clojure.string/blank? \"  \")" "(clojure.string/blank? \" \")" "(clojure.string/blank? \"\")" "(start)" "(load-and-compile (:config system.repl/system) \"config.edn\")" "(start)" "(load-and-compile (:config system.repl/system) \"config.edn\")" "(:config system.repl/system)" "(:config system)" "(:config system.repl/system)" "(load-and-compile (:config system.repl/system) \"config.edn\")" "(:config system.repl/system)" "(load-and-compile (:config system.repl/system) \"config.edn\")" "(load-and-compile system.repl/system \"config.edn\")" "(:config system.repl/system)" "(load-and-compile system.repl/system \"config.edn\")" "(:config system.repl/system)" "(load-and-compile system.repl/system \"config.edn\")" "{:solr-url \"http://localhost:8983/solr/\", :alarms-collection-url \"http://localhost:8983/solr/alarms/select\", :inventory-collection-url \"http://localhost:8983/solr/parker/select\", :security {:run-mode :dev, :jwt-session-timeout 15, :ldap {:host \"med10.cenx.localnet:389\", :base-ctx-dn \"ou=users,dc=cenx,dc=com\", :base-filter \"(uid=%s)\", :role-ctx-dn \"ou=groups,dc=cenx,dc=com\", :role-filter \"(uniqueMember=%s)\", :role-name-attribute :cn, :default-role \"user\"}}, :search {:type->id-field {\"VirtualNetworkFunction\" :virtual-network-function, \"LayerService\" :layer-service, \"Host\" :host}}, :inventory-collection \"parker\", :events-collection-url \"http://localhost:8983/solr/events/select\", :user-profiles :enabled, :rethinkdb {:users [{:user-id \"user1\", :firstname \"John\", :lastname \"Smith\", :password (creds/hash-bcrypt \"password\"), :saved-searches [], :search-history [], :explorer-history []} {:user-id \"user1\", :firstname \"Ann\", :lastname \"Jones\", :password (creds/hash-bcrypt \"password\"), :saved-searches [], :search-history [], :explorer-history []}]}, :analytics-api-url \"http://localhost:8080/delorean/graph/time-series/\", :customization-docs {:inventory-dashboard {:tables {\"host\" {:base-q \"entity:Host\", :field-list [\"id\" \"display-name\" \"vendor\" \"host-ip\" \"site\" \"model\"]}, \"site\" {:base-q \"entity:Site\", :field-list [\"id\" \"display-name\" \"host\" \"tenant\" \"virtual-machine\" \"\"]}, \"layer-service\" {:base-q \"entity:LayerService\", :field-list [\"id\" \"display-name\"]}, \"virtual-machine\" {:base-q \"entity:VirtualMachine\", :field-list [\"id\" \"display-name\" \"tenant\" \"host\" \"network\"]}, \"virtual-network-function\" {:base-q \"entity:VirtualNetworkFunction\", :field-list [\"id\" \"display-name\" \"site\" \"vnf-type\" \"tenant\" \"vendor\" \"virtual-network-function-component\" \"host\"]}, \"virtual-network-function-component\" {:base-q \"entity:VirtualNetworkFunctionComponent\", :field-list [\"id\" \"display-name\"]}}, :rollups {:pivot-options [\"region\" \"virtual-network-function\" \"host\" \"site\"]}}}}
lego.config-utils> " "(load-and-compile system.repl/system \"config.edn\")" "(:config system.repl/system)" "(:config system)" "(set! *print-level* 100)" "(set! *print-length* 100)" "(:config system)" "(keys system)" "(def system system.repl/system)" "(config-utils/load-and-compile component \"config.edn\")" ":cljs/quit" ":cljls/quit" "(is-valid? \"2/a\")" "(js/encodeURIComponent \"asd/asd\")" "(.encodeURIComponent \"asd/asd\")" "(.replace \"a/a\" \"/\" \"\\\\/\")" "(is-valid? \"2/a\")" "(is-valid? \"2\")" "(is-valid? \"ZIBELLO%5C%2F2RS\")" "(.escape js/luceneParser \"ad\")" "(is-valid? \"id:ZIBELLO/2RS\")" "(is-valid? \"id:a\")" "(is-valid? \"a\")" "(parse \"a\")" "(cljs-repl)" "(repl)" "(in-ns 'user)" "(first tt)" "(def tt (suggestion request))" "tt" "(def tt (suggestion request))" "tt" "(def tt (suggestion request))" "(-> tt first :doclist :docs)" "(def tt (suggestion request))" "(-> tt first :doclist :docs)" "(def tt (suggestion request))" "(-> tt first :doclist :docs)" "(-> tt first :docs)" "(first tt)" "(def tt (suggestion request))" "(second tt)" "*print-length*" "(first tt)" "(count tt)" "(def tt (suggestion request))" "(def request {:params {:q \"*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)}})" "(def system system.repl/system)" "(start)" "(read-string tt)" "(set! *print-length* 1)" "(read-string tt)" "(read-string)" "tt" "[1 2 3 4]" "(set! *print-length* 1)" "(set! *print-length* 100)" "*print-length*" "tt" "(set! *print-length* 11)" "*print-length*" "(binding [*print-length* 100] tt)" "tt" "(binding [*print-length* 100])" "tt" "(def tt \"[:transit \\\"[\\\\\\\"^ \\\\\\\",\\\\\\\"virtual-network-function:b520862e-f811-4687-b9c1-d3ee846b5414\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"~:tenant\\\\\\\",null,\\\\\\\"~:vendor\\\\\\\",\\\\\\\"Vendor providing the VNF\\\\\\\",\\\\\\\"~:entity-type\\\\\\\",\\\\\\\"~:virtual-network-function\\\\\\\",\\\\\\\"~:vnf-type\\\\\\\",\\\\\\\"VNF type\\\\\\\",\\\\\\\"~:analytics-graph\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"~:label\\\\\\\",\\\\\\\"HPe: b520862e-f811-4687-b9c1-d3ee846b5414 Statistics TBD\\\\\\\",\\\\\\\"~:value\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"~:data-url\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"~:path\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"HPe: b520862e-f811-4687-b9c1-d3ee846b5414\\\\\\\"]],\\\\\\\"~:data-set\\\\\\\",\\\\\\\"~:vnf-kpi\\\\\\\",\\\\\\\"~:metric-field\\\\\\\",[\\\\\\\"~:metric\\\\\\\"]]]]]]],\\\\\\\"~:fault-data\\\\\\\",null,\\\\\\\"~:type\\\\\\\",\\\\\\\"HPe: VNF\\\\\\\",\\\\\\\"~:entity-id\\\\\\\",\\\\\\\"virtual-network-function:b520862e-f811-4687-b9c1-d3ee846b5414\\\\\\\",\\\\\\\"~:alias\\\\\\\",[\\\\\\\"~#set\\\\\\\",[\\\\\\\"jimtest\\\\\\\",\\\\\\\"virtual-network-function:b520862e-f811-4687-b9c1-d3ee846b5414\\\\\\\"]],\\\\\\\"~:display-name\\\\\\\",\\\\\\\"jimtest\\\\\\\",\\\\\\\"~:display-data\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"jimtest\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Vendor\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Vendor providing the VNF\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Tenant\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Type\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"VNF type\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"jimtest\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Description\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"jimtest\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"id\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"identifier\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Physical\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"labelenabled\\\\\\\"]]]]],\\\\\\\"site:TBD\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"site:TBD\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"TBD\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"~:site\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"HPe: DATACENTER\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"site:TBD\\\\\\\",\\\\\\\"TBD\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"ID\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"TBD\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",null,\\\\\\\"^?\\\\\\\",null],\\\\\\\"virtual-network-function-component:ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"virtual-network-function-component:ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"SproutVNFc\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"~:virtual-network-function-component\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: image | HPe: VNF_COMPONENT\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"virtual-network-function-component:ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb\\\\\\\",\\\\\\\"SproutVNFc\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"SproutVNFc\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"SproutVNFc\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Description\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Descripton\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Operational Status\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Log File\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Log Path\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Image Name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"FW_Snapshot_License_gg\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk Format\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"vmdk\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Image status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"active\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Openstack: 408150a4-176c-47e2-9f96-496917c09e99 | HPe: ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb Statistics TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"Openstack: 408150a4-176c-47e2-9f96-496917c09e99 | HPe: ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^<\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^>\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",null],\\\\\\\"virtual-machine:69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^1\\\\\\\",\\\\\\\"LONDON-C34\\\\\\\",\\\\\\\"~:vcpus\\\\\\\",1,\\\\\\\"~:disk\\\\\\\",2,\\\\\\\"^3\\\\\\\",\\\\\\\"~:virtual-machine\\\\\\\",\\\\\\\"~:analytics-test\\\\\\\",\\\\\\\"{:entity-type :analytics-test, :name \\\\\\\\\\\\\\\"Fortigate-VM150\\\\\\\\\\\\\\\", :test-id \\\\\\\\\\\\\\\"69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\\\\\\\\\", :type :openstack-server-test, :entity-id \\\\\\\\\\\\\\\"AT:69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\\\\\\\\\", :host \\\\\\\\\\\\\\\"compute01\\\\\\\\\\\\\\\", :status \\\\\\\\\\\\\\\"ACTIVE\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Device Reachability\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150 Availabilty\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"~:vim-availability\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:ICMP-availability\\\\\\\",\\\\\\\"~:SNMP-availability\\\\\\\"]]]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150 CPU Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"~:cpu-kpi\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:ssCpuRawIdle\\\\\\\",\\\\\\\"~:ssCpuRawKernel\\\\\\\",\\\\\\\"~:ssCpuRawNice\\\\\\\",\\\\\\\"~:ssCpuRawSystem\\\\\\\",\\\\\\\"~:ssCpuRawUser\\\\\\\",\\\\\\\"~:ssCpuRawWait\\\\\\\"]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150 Memory Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"~:memory-kpi\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:auto_memTotalSwap\\\\\\\",\\\\\\\"~:memAvailSwap\\\\\\\",\\\\\\\"~:auto_memTotalReal\\\\\\\",\\\\\\\"~:memAvailReal\\\\\\\",\\\\\\\"~:memTotalFree\\\\\\\"]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150 Disk Usage\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"~:disk-kpi\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:dskAvail\\\\\\\",\\\\\\\"~:dskUsed\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"server-ip\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: server | HPe: VIRTUAL_MACHINE\\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"virtual-machine:69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\",\\\\\\\"~:ram\\\\\\\",1024,\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"Fortigate-VM150\\\\\\\",\\\\\\\"virtual-machine:69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\"]],\\\\\\\"~:flavor-name\\\\\\\",\\\\\\\"Fortigate-FW\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"Fortigate-VM150\\\\\\\",\\\\\\\"~:server-name\\\\\\\",\\\\\\\"Fortigate-VM150\\\\\\\",\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"VM state\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"active\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Power state\\\\\\\",\\\\\\\"^8\\\\\\\",1],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"VM Name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Fortigate-VM150\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Floating IP Address\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Class name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Fortigate-FW\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"OS flavor access is public\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"true\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"vCPUs\\\\\\\",\\\\\\\"^8\\\\\\\",1],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"RAM\\\\\\\",\\\\\\\"^8\\\\\\\",1024],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk\\\\\\\",\\\\\\\"^8\\\\\\\",2],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Tenant\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"LONDON-C34\\\\\\\"]]]]],\\\\\\\"port:ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"port:ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"port:ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"~:port\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: port\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"port:ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"fa:16:3e:fc:7d:4c\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port admin state up\\\\\\\",\\\\\\\"^8\\\\\\\",true],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"IP address\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider network type\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"flat\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider segmentation ID\\\\\\\",\\\\\\\"^8\\\\\\\",0],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"MTU\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"VM-Network\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Openstack: ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78 Statistics TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"Openstack: ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^<\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^>\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",null,\\\\\\\"~:network\\\\\\\",\\\\\\\"VM-Network\\\\\\\"],\\\\\\\"port:8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"port:8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"port:8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"^1:\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: port\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"port:8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"fa:16:3e:a7:39:bf\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port admin state up\\\\\\\",\\\\\\\"^8\\\\\\\",true],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"IP address\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"192.168.1.1\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider network type\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"flat\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider segmentation ID\\\\\\\",\\\\\\\"^8\\\\\\\",0],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"MTU\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"vRouter-vFW\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Openstack: 8742d6b9-0837-4e7f-a3ae-19e9f6286fa7 Statistics TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"Openstack: 8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^<\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^>\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",null,\\\\\\\"^1;\\\\\\\",\\\\\\\"vRouter-vFW\\\\\\\"],\\\\\\\"port:10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"port:10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"port:10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"^1:\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: port\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"port:10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"fa:16:3e:f8:fd:94\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port admin state up\\\\\\\",\\\\\\\"^8\\\\\\\",true],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"IP address\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.1.2.172\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider network type\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"flat\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider segmentation ID\\\\\\\",\\\\\\\"^8\\\\\\\",0],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"MTU\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Wembley-Network\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Openstack: 10801ee5-8bda-42a1-9074-b858eb86ffae Statistics TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"Openstack: 10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^<\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^>\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",null,\\\\\\\"^1;\\\\\\\",\\\\\\\"Wembley-Network\\\\\\\"],\\\\\\\"host:compute01\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^2\\\\\\\",null,\\\\\\\"~:host-ip\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"~:host\\\\\\\",\\\\\\\"^N\\\\\\\",\\\\\\\"{:entity-type :analytics-test, :name \\\\\\\\\\\\\\\"compute01\\\\\\\\\\\\\\\", :test-id \\\\\\\\\\\\\\\"compute01\\\\\\\\\\\\\\\", :type :openstack-host-test, :entity-id \\\\\\\\\\\\\\\"AT:compute01\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"~:local-gb\\\\\\\",2226,\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Device Reachability\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01 Availabilty\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^O\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^P\\\\\\\",\\\\\\\"^Q\\\\\\\"]]]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01 CPU Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^R\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^S\\\\\\\",\\\\\\\"^T\\\\\\\",\\\\\\\"^U\\\\\\\",\\\\\\\"^V\\\\\\\",\\\\\\\"^W\\\\\\\",\\\\\\\"^X\\\\\\\"]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01 Memory Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^Y\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^Z\\\\\\\",\\\\\\\"^[\\\\\\\",\\\\\\\"^10\\\\\\\",\\\\\\\"^11\\\\\\\",\\\\\\\"^12\\\\\\\"]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01 Disk Usage\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.1.9.78/\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^13\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:auto_hrStorageAllocationUnits\\\\\\\",\\\\\\\"~:auto_hrStorageUsed\\\\\\\",\\\\\\\"~:auto_hrStorageSize\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"host-ip\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"]],\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: host\\\\\\\",\\\\\\\"~:hypervisor-hostname\\\\\\\",\\\\\\\"domain-c335(VIO)\\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"host:compute01\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"compute01\\\\\\\",\\\\\\\"host:compute01\\\\\\\"]],\\\\\\\"^D\\\\\\\",\\\\\\\"compute01\\\\\\\",\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"compute01\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Hypervisor hostname\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"domain-c335(VIO)\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host IP Address\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host vendor\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host model\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host architecture\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host cores\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host threads\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host sockets\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host state\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"up\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"enabled\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"vCPUs used\\\\\\\",\\\\\\\"^8\\\\\\\",104],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"vCPUs\\\\\\\",\\\\\\\"^8\\\\\\\",104],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Running VMs\\\\\\\",\\\\\\\"^8\\\\\\\",36],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Memory (MB)\\\\\\\",\\\\\\\"^8\\\\\\\",589527],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Memory Used (MB)\\\\\\\",\\\\\\\"^8\\\\\\\",26081],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Memory Free (MB)\\\\\\\",\\\\\\\"^8\\\\\\\",563446],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk (GB)\\\\\\\",\\\\\\\"^8\\\\\\\",2226],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk Used (GB)\\\\\\\",\\\\\\\"^8\\\\\\\",1032],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk Free (GB)\\\\\\\",\\\\\\\"^8\\\\\\\",1194],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk Low Water Mark (GB)\\\\\\\",\\\\\\\"^8\\\\\\\",null]]]],\\\\\\\"~:model\\\\\\\",null,\\\\\\\"~:memory-mb\\\\\\\",589527]]\\\"]\")" "tt" "(take 100 tt)" "tt" "(def tt \"[:transit \\\"[\\\\\\\"^ \\\\\\\",\\\\\\\"virtual-network-function:b520862e-f811-4687-b9c1-d3ee846b5414\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"~:tenant\\\\\\\",null,\\\\\\\"~:vendor\\\\\\\",\\\\\\\"Vendor providing the VNF\\\\\\\",\\\\\\\"~:entity-type\\\\\\\",\\\\\\\"~:virtual-network-function\\\\\\\",\\\\\\\"~:vnf-type\\\\\\\",\\\\\\\"VNF type\\\\\\\",\\\\\\\"~:analytics-graph\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"~:label\\\\\\\",\\\\\\\"HPe: b520862e-f811-4687-b9c1-d3ee846b5414 Statistics TBD\\\\\\\",\\\\\\\"~:value\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"~:data-url\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"~:path\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"HPe: b520862e-f811-4687-b9c1-d3ee846b5414\\\\\\\"]],\\\\\\\"~:data-set\\\\\\\",\\\\\\\"~:vnf-kpi\\\\\\\",\\\\\\\"~:metric-field\\\\\\\",[\\\\\\\"~:metric\\\\\\\"]]]]]]],\\\\\\\"~:fault-data\\\\\\\",null,\\\\\\\"~:type\\\\\\\",\\\\\\\"HPe: VNF\\\\\\\",\\\\\\\"~:entity-id\\\\\\\",\\\\\\\"virtual-network-function:b520862e-f811-4687-b9c1-d3ee846b5414\\\\\\\",\\\\\\\"~:alias\\\\\\\",[\\\\\\\"~#set\\\\\\\",[\\\\\\\"jimtest\\\\\\\",\\\\\\\"virtual-network-function:b520862e-f811-4687-b9c1-d3ee846b5414\\\\\\\"]],\\\\\\\"~:display-name\\\\\\\",\\\\\\\"jimtest\\\\\\\",\\\\\\\"~:display-data\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"jimtest\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Vendor\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Vendor providing the VNF\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Tenant\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Type\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"VNF type\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"jimtest\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Description\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"jimtest\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"id\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"identifier\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Physical\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"labelenabled\\\\\\\"]]]]],\\\\\\\"site:TBD\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"site:TBD\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"TBD\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"~:site\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"HPe: DATACENTER\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"site:TBD\\\\\\\",\\\\\\\"TBD\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"ID\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"TBD\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",null,\\\\\\\"^?\\\\\\\",null],\\\\\\\"virtual-network-function-component:ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"virtual-network-function-component:ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"SproutVNFc\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"~:virtual-network-function-component\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: image | HPe: VNF_COMPONENT\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"virtual-network-function-component:ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb\\\\\\\",\\\\\\\"SproutVNFc\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"SproutVNFc\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"SproutVNFc\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Description\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Descripton\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Operational Status\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Log File\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Log Path\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Image Name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"FW_Snapshot_License_gg\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk Format\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"vmdk\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Image status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"active\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Openstack: 408150a4-176c-47e2-9f96-496917c09e99 | HPe: ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb Statistics TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"Openstack: 408150a4-176c-47e2-9f96-496917c09e99 | HPe: ae3f1aa4-2c04-4baf-96e4-17bd49cd7fcb\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^<\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^>\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",null],\\\\\\\"virtual-machine:69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^1\\\\\\\",\\\\\\\"LONDON-C34\\\\\\\",\\\\\\\"~:vcpus\\\\\\\",1,\\\\\\\"~:disk\\\\\\\",2,\\\\\\\"^3\\\\\\\",\\\\\\\"~:virtual-machine\\\\\\\",\\\\\\\"~:analytics-test\\\\\\\",\\\\\\\"{:entity-type :analytics-test, :name \\\\\\\\\\\\\\\"Fortigate-VM150\\\\\\\\\\\\\\\", :test-id \\\\\\\\\\\\\\\"69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\\\\\\\\\", :type :openstack-server-test, :entity-id \\\\\\\\\\\\\\\"AT:69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\\\\\\\\\", :host \\\\\\\\\\\\\\\"compute01\\\\\\\\\\\\\\\", :status \\\\\\\\\\\\\\\"ACTIVE\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Device Reachability\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150 Availabilty\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"~:vim-availability\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:ICMP-availability\\\\\\\",\\\\\\\"~:SNMP-availability\\\\\\\"]]]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150 CPU Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"~:cpu-kpi\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:ssCpuRawIdle\\\\\\\",\\\\\\\"~:ssCpuRawKernel\\\\\\\",\\\\\\\"~:ssCpuRawNice\\\\\\\",\\\\\\\"~:ssCpuRawSystem\\\\\\\",\\\\\\\"~:ssCpuRawUser\\\\\\\",\\\\\\\"~:ssCpuRawWait\\\\\\\"]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150 Memory Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"~:memory-kpi\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:auto_memTotalSwap\\\\\\\",\\\\\\\"~:memAvailSwap\\\\\\\",\\\\\\\"~:auto_memTotalReal\\\\\\\",\\\\\\\"~:memAvailReal\\\\\\\",\\\\\\\"~:memTotalFree\\\\\\\"]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150 Disk Usage\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"~:disk-kpi\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:dskAvail\\\\\\\",\\\\\\\"~:dskUsed\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"server-ip\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"]],\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: server | HPe: VIRTUAL_MACHINE\\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"virtual-machine:69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\",\\\\\\\"~:ram\\\\\\\",1024,\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"Fortigate-VM150\\\\\\\",\\\\\\\"virtual-machine:69ced2d1-92b5-48e0-a065-9b46850d01a4\\\\\\\"]],\\\\\\\"~:flavor-name\\\\\\\",\\\\\\\"Fortigate-FW\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"Fortigate-VM150\\\\\\\",\\\\\\\"~:server-name\\\\\\\",\\\\\\\"Fortigate-VM150\\\\\\\",\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Fortigate-VM150\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"VM state\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"active\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Power state\\\\\\\",\\\\\\\"^8\\\\\\\",1],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"VM Name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Fortigate-VM150\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Floating IP Address\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Class name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Fortigate-FW\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"OS flavor access is public\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"true\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"vCPUs\\\\\\\",\\\\\\\"^8\\\\\\\",1],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"RAM\\\\\\\",\\\\\\\"^8\\\\\\\",1024],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk\\\\\\\",\\\\\\\"^8\\\\\\\",2],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Tenant\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"LONDON-C34\\\\\\\"]]]]],\\\\\\\"port:ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"port:ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"port:ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"~:port\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: port\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"port:ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"fa:16:3e:fc:7d:4c\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port admin state up\\\\\\\",\\\\\\\"^8\\\\\\\",true],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"IP address\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.30.0.208\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider network type\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"flat\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider segmentation ID\\\\\\\",\\\\\\\"^8\\\\\\\",0],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"MTU\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"VM-Network\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Openstack: ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78 Statistics TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"Openstack: ae0da357-c4fa-4e8d-b0eb-a3e0f35e5c78\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^<\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^>\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",null,\\\\\\\"~:network\\\\\\\",\\\\\\\"VM-Network\\\\\\\"],\\\\\\\"port:8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"port:8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"port:8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"^1:\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: port\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"port:8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"fa:16:3e:a7:39:bf\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port admin state up\\\\\\\",\\\\\\\"^8\\\\\\\",true],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"IP address\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"192.168.1.1\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider network type\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"flat\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider segmentation ID\\\\\\\",\\\\\\\"^8\\\\\\\",0],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"MTU\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"vRouter-vFW\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Openstack: 8742d6b9-0837-4e7f-a3ae-19e9f6286fa7 Statistics TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"Openstack: 8742d6b9-0837-4e7f-a3ae-19e9f6286fa7\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^<\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^>\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",null,\\\\\\\"^1;\\\\\\\",\\\\\\\"vRouter-vFW\\\\\\\"],\\\\\\\"port:10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"port:10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\",\\\\\\\"^D\\\\\\\",\\\\\\\"port:10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"^1:\\\\\\\",\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: port\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"port:10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\"]],\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"fa:16:3e:f8:fd:94\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port admin state up\\\\\\\",\\\\\\\"^8\\\\\\\",true],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Port status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"IP address\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.1.2.172\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider network type\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"flat\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Provider segmentation ID\\\\\\\",\\\\\\\"^8\\\\\\\",0],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"MTU\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"Wembley-Network\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Network status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"ACTIVE\\\\\\\"]]]],\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Openstack: 10801ee5-8bda-42a1-9074-b858eb86ffae Statistics TBD\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Data Series Name | Display Name | Interval\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"Openstack: 10801ee5-8bda-42a1-9074-b858eb86ffae\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^<\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^>\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",null,\\\\\\\"^1;\\\\\\\",\\\\\\\"Wembley-Network\\\\\\\"],\\\\\\\"host:compute01\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^2\\\\\\\",null,\\\\\\\"~:host-ip\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\",\\\\\\\"^3\\\\\\\",\\\\\\\"~:host\\\\\\\",\\\\\\\"^N\\\\\\\",\\\\\\\"{:entity-type :analytics-test, :name \\\\\\\\\\\\\\\"compute01\\\\\\\\\\\\\\\", :test-id \\\\\\\\\\\\\\\"compute01\\\\\\\\\\\\\\\", :type :openstack-host-test, :entity-id \\\\\\\\\\\\\\\"AT:compute01\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"~:local-gb\\\\\\\",2226,\\\\\\\"^6\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Device Reachability\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01 Availabilty\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^O\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^P\\\\\\\",\\\\\\\"^Q\\\\\\\"]]]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01 CPU Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^R\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^S\\\\\\\",\\\\\\\"^T\\\\\\\",\\\\\\\"^U\\\\\\\",\\\\\\\"^V\\\\\\\",\\\\\\\"^W\\\\\\\",\\\\\\\"^X\\\\\\\"]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01 Memory Utilization\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^Y\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"^Z\\\\\\\",\\\\\\\"^[\\\\\\\",\\\\\\\"^10\\\\\\\",\\\\\\\"^11\\\\\\\",\\\\\\\"^12\\\\\\\"]]]],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01 Disk Usage\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^9\\\\\\\",[\\\\\\\"^ \\\\\\\",\\\\\\\"^:\\\\\\\",[\\\\\\\"time-series\\\\\\\",\\\\\\\"10.1.9.78/\\\\\\\"]],\\\\\\\"^;\\\\\\\",\\\\\\\"^13\\\\\\\",\\\\\\\"^=\\\\\\\",[\\\\\\\"~:auto_hrStorageAllocationUnits\\\\\\\",\\\\\\\"~:auto_hrStorageUsed\\\\\\\",\\\\\\\"~:auto_hrStorageSize\\\\\\\"]]]]]]],\\\\\\\"^?\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"host-ip\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"]],\\\\\\\"^@\\\\\\\",\\\\\\\"Openstack: host\\\\\\\",\\\\\\\"~:hypervisor-hostname\\\\\\\",\\\\\\\"domain-c335(VIO)\\\\\\\",\\\\\\\"^A\\\\\\\",\\\\\\\"host:compute01\\\\\\\",\\\\\\\"^B\\\\\\\",[\\\\\\\"^C\\\\\\\",[\\\\\\\"compute01\\\\\\\",\\\\\\\"host:compute01\\\\\\\"]],\\\\\\\"^D\\\\\\\",\\\\\\\"compute01\\\\\\\",\\\\\\\"^E\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"compute01\\\\\\\",\\\\\\\"^8\\\\\\\",[[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host name\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"compute01\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Hypervisor hostname\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"domain-c335(VIO)\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host IP Address\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"10.1.9.78\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host vendor\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host model\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host architecture\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host cores\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host threads\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host sockets\\\\\\\",\\\\\\\"^8\\\\\\\",null],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host state\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"up\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Host status\\\\\\\",\\\\\\\"^8\\\\\\\",\\\\\\\"enabled\\\\\\\"],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"vCPUs used\\\\\\\",\\\\\\\"^8\\\\\\\",104],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"vCPUs\\\\\\\",\\\\\\\"^8\\\\\\\",104],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Running VMs\\\\\\\",\\\\\\\"^8\\\\\\\",36],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Memory (MB)\\\\\\\",\\\\\\\"^8\\\\\\\",589527],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Memory Used (MB)\\\\\\\",\\\\\\\"^8\\\\\\\",26081],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Memory Free (MB)\\\\\\\",\\\\\\\"^8\\\\\\\",563446],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk (GB)\\\\\\\",\\\\\\\"^8\\\\\\\",2226],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk Used (GB)\\\\\\\",\\\\\\\"^8\\\\\\\",1032],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk Free (GB)\\\\\\\",\\\\\\\"^8\\\\\\\",1194],[\\\\\\\"^ \\\\\\\",\\\\\\\"^7\\\\\\\",\\\\\\\"Disk Low Water Mark (GB)\\\\\\\",\\\\\\\"^8\\\\\\\",null]]]],\\\\\\\"~:model\\\\\\\",null,\\\\\\\"~:memory-mb\\\\\\\",589527]]\\\"]\")" "(def tt (suggestion request))" "(count (s/validate schema/SearchSuggestion (-> tt :entity :groups)))" "(count (s/validate schema/SearchSuggestion (-> tt :entity :groups first )))" "(s/validate schema/SearchSuggestion (-> tt :entity :groups first ))" "(-> tt :entity :groups first keys)" "(s/validate schema/SearchSuggestion (-> tt :entity :groups first type))" "(s/validate schema/SearchSuggestion (-> tt :entity :groups first keys))" "(s/validate schema/SearchSuggestion (-> tt :entity :groups first))" "(-> tt :entity :groups count)" "(s/validate schema/SearchSuggestion (-> tt :entity :groups count))" "(s/validate schema/SearchSuggestion (-> tt :entity :groups))" "(-> tt :entity :groups first :groupValue)" "(-> tt :entity :groups count)" "(-> tt keys)" "(-> tt :grouped count)" "(-> tt :grouped :entity :groups first)" "(-> tt :grouped :entity :groups count)" "(keys tt)" "(def tt (suggestion request))" "(def request {:params {:q \"*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)}})" "(def system system.repl/system)" "(def system 'epiphany.system)" "(def system epiphany.system)" "(start)" "system" "epiphany.system" "(def system epiphany.system)" "system" "(def system 'epiphany.system)" "(def system epiphany.system)" "system" "(def system system.repl/system)" "(keys system)" "(def tt (suggestion request))" "(def request {:params {:q \"*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)}})" "(def system system.repl/system)" "*print-length*" "(-> tt :entity :groups )" "(-> tt :entity :groups keys)" "(-> tt :entity keys)" "(-> tt :entity count)" "(keys tt)" "(def tt (suggestion request))" "(keys tt)" "(def tt (suggestion request))" "(suggestion request)" "(def request {:params {:q \"*a*\"} :solr {:inventory-collection (-> system :solr :inventory-collection)}})" "(-> system :solr :inventory-collection)" "(-> system :solr keys)" "(-> system :solr)" "(-> system keys)" "(def request {:params {:q \"*a*\"} :solr {:inventory-collection 1}})" "(let [{:keys [params config] :as request} {:params {:a 1} :config \"ads\"}] config)" "(let [{:keys [params config] :as request} {:params {:a 1} :config1 \"ads\"}] config1)" "(let [{:keys [params config] :as request} {:params {:a 1} :config1 \"ads\"}] config)" "(let [{:keys [params]
                                config :config1 :as request} {:params {:a 1} :config1 \"ads\"}] config)" "(let [{:keys [params]
                                config :config1 :as request} {:params {:a 1} :config1 \"ads\"}] request)" "(let [{:keys [params]
                                config :config :as request} {:params {:a 1} :config \"ads\"}] request)" "(let [{:keys [params]
                                config :config :as request} {:params {:a 1} :config \"ads\"}] config)" "(let [{:keys [params]
                                config :config :as request} {:params {:a 1}}] config)" "(let [{:keys [params]
                   config :config :as request} {:params {:a 1}}] params)" "(let [{:keys [params]
                   config :config :as request} {:params {:a 1}}])" "(-> system keys)" "(def system system.repl/system)" "(keys system.repl/system)" "(keys #'system.repl/system)" "(resolve 'system)" "(keys system)" "(keys system.repl)" "(keys sytem.repl)" "system" "(use '[epiphany.system :as system])" "system" "(require '[epiphany.system :as system])" "system" "(-> system keys)" "(require '[epiphany.system :as system])" "(keys system)" "(type system)" "(type 'epiphany.system)" "(type epiphany.system)" "(type system.repl/system)" "(type system)" "(keys system)" "(type epiphany.system/dev-system)" "(keys epiphany.system/dev-system)" "(-> epiphany.system/system keys)" "(use 'epiphany.system)" "(-> 'epiphany.system/system keys)" "(-> epiphany.system/system keys)" "(in-ns 'user)" "(-> user/system keys)" "(start)" "(repl)" "(start)" "(repl)" "(start)
" "(start)" "(stop)" "(start)" "(+ 1 1)" "(start)" "(+ 1 1)" "(stop)" "(sotp)" "(+ 1 1)" "(clojure.string/split \"entity,region\" #\"\\,\")" "(+ 1 1)" "(start)" "(repl)" "(+ 1 1)" " " "(clojure.string/split \"entity,region\" #\"\\,\")" "(start)" "(reset)" "(restart)" "(start)" "(stop)" "--" "-" "----" "-" "--" "-" "----" "-" "----" "--" "---" "-" "----" "-" "--" "-" "--" "-" "------" "-" "--" "-" "----" "-" "--" "-" "-----------" "--" "---" "----" "-----" "------" "-------" "---------" "--------" "-------" "------" "---" "-----" "---" "----" "--" "----" "--" "-" "--" "-----------------" "----" "--" "-" "--" "-" "--" "-" "--" "-" "--" "-" "---" "-----" "-------" "---------" "----------" "(start)" "(apply conj [] (map (fn [[entity-type _]]
                      [::fetch-entities entity-type])
                    tt))" "(map (fn [[entity-type _]]
                                       [::fetch-entities entity-type])
     tt)" "(def tt {\"host\" {:base-q \"entity:Host\"
                                        :field-list [\"id\" \"display-name\" \"vendor\"
                                                     \"host-ip\" \"site\" \"model\"]}
                                \"site\" {:base-q \"entity:Site\"
                                        :field-list [\"id\" \"display-name\"]}
                                \"layer-service\" {:base-q \"entity:LayerService\"
                                                 :field-list [\"id\" \"display-name\"]}
                                \"virtual-machine\" {:base-q \"entity:VirtualMachine\"
                                                   :field-list [\"id\" \"display-name\"]}
                                \"virtual-network-function\" {:base-q \"entity:VirtualNetworkFunction\"
                                                            :field-list [\"id\" \"display-name\"]}
                                \"virtual-network-function-component\" {:base-q \"entity:VirtualNetworkFunctionComponent\"
                                                                      :field-list [\"id\" \"display-name\"]}})" "(conj [1] (map (fn [a] a) [1 2 3]))" "(apply conj [1] (map (fn [a] a) [1 2 3]))" "(conj [1] 2 3 4 5)" "(apply concat [1] 2 3 4 5)" "(concat [1] 2 3 4 5)" "(start)" "(stop)" "(fig/reset-autobuild)" "(ra/reset-autobuild)" ":cljs/quit" "(-> @re-frame.db/app-db :epiphany.config/config js/console.debug)" "(-> @re-frame.db/app-db :epiphany.config/config js/console.log)" "(-> @re-frame.db/app-db :epiphany.config/config prn)" "(-> @re-frame.db/app-db :epiphany.config/config keys)" "(-> @re-frame.db/app-db keys)" "(fig/cljs-repl (:figwheel-system system))" "(require '[figwheel-sidecar.system :as fig])" "(ra/cljs-repl)" "(repl)" "(start-repl)" "(cljs-repl)" "(repl)" "(start)" "(stop)" "(get-in {:a {:v 1}} [:a :v])" "(get-in [:a :v] {:a {:v 1}})" "(start)" "(conj [1 2] 3 )" "(cons 3 [1 2] )" "(get-in (-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard ) [:entities \"host\" :data :response :docs])" "js/d3" "js" "(get-in (-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard ) [:entities \"host\" :data :response :docs])" "(get-in-db (-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard ) [:entities \"host\" :data :response :docs])" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :entities)" "(-> @re-frame.db/app-db :current-url-params)" "(-> @re-frame.db/app-db keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :entities)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :entities )" "(-> @re-frame.db/app-db keys)" "(repl)" ":cljs/quit" "(-> @re-frame.db/app-db keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :entities )" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard )" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :entities )" "(repl)" "
:cljs/quit" "
" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :entities )" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard keys)" "(-> @re-frame.db/app-db keys)" "(-> reframe-core/app-db keys)" "(reframe-core/app-db keys)" "(repl)" "(in-ns 'user)" "(repl)" "(dumb-query-prep \"*\")" "(dumb-query-prep \"id:foo\")" "(dumb-query-prep \"*\")" "(fetch-sites {:params {:q \"*\" :start 0 :rows 0 :sort \"desc\"}})" "(fetch-sites {:params {:q \"*\" 0 0 \"desc\"}})" "(fetch-sites )" "(fetch-sites)" "(fetch-sites {:params {:q \"*\" 0 0 \"desc\"}})" "(conj [1 2 3] 4)" "(drop 5 [1 2 3 4 5 6])" "(drop-last 5 [1 2 3 4 5 6])" "(drop-last 5 [1 2 3 4 5])" "map-vals" "(start)" ":cljs/quit" "(in-ns 'user)" ":cljs/quit" ":cjls/quit" "(max 1 2 3)" "(js/Math.ceil  (/ 5 2))" "(js/MATH.ceil  (/ 5 2))" "(int  (/ 5 2))" "(/ 5 2)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard keys)" "reframe-core/app-db" "(reframe-core/app-db)" "reframe-core/app-db" "(reframe-core/app-db)" "(repl)" "'{:entity,region_ss [{:field \"entity\", :value \"Site\", :count 434, :pivot [{:field \"region_ss\", :value \"EMILIA ROMAGNA\", :count 136} {:field \"region_ss\", :value \"TOSCANA\", :count 81} {:field \"region_ss\", :value \"VENETO\", :count 54} {:field \"region_ss\", :value \"LAZIO\", :count 45} {:field \"region_ss\", :value \"MARCHE\", :count 42} {:field \"region_ss\", :value \"PIEMONTE\", :count 23} {:field \"region_ss\", :value \"LIGURIA\", :count 19} {:field \"region_ss\", :value \"UMBRIA\", :count 14} {:field \"region_ss\", :value \"LOMBARDIA\", :count 11} {:field \"region_ss\", :value \"CAMPANIA\", :count 3} {:field \"region_ss\", :value \"PUGLIA\", :count 3} {:field \"region_ss\", :value \"ABRUZZO\", :count 1} {:field \"region_ss\", :value \"MOLISE\", :count 1}]} {:field \"entity\", :value \"LayerService\", :count 100, :pivot [{:field \"region_ss\", :value \"EMILIA ROMAGNA\", :count 33} {:field \"region_ss\", :value \"TOSCANA\", :count 25} {:field \"region_ss\", :value \"VENETO\", :count 12} {:field \"region_ss\", :value \"MARCHE\", :count 11} {:field \"region_ss\", :value \"LAZIO\", :count 8} {:field \"region_ss\", :value \"UMBRIA\", :count 4} {:field \"region_ss\", :value \"LIGURIA\", :count 3} {:field \"region_ss\", :value \"PIEMONTE\", :count 3} {:field \"region_ss\", :value \"LOMBARDIA\", :count 1}]} {:field \"entity\", :value \"Port\", :count 66} {:field \"entity\", :value \"VirtualMachine\", :count 47} {:field \"entity\", :value \"VirtualNetworkFunctionComponent\", :count 46} {:field \"entity\", :value \"Network\", :count 11} {:field \"entity\", :value \"Tenant\", :count 8} {:field \"entity\", :value \"VirtualNetworkFunction\", :count 6} {:field \"entity\", :value \"Host\", :count 3} {:field \"entity\", :value \"VnfType\", :count 1}]}" "(def tt '{:entity,region_ss [{:field \"entity\", :value \"Site\", :count 434, :pivot [{:field \"region_ss\", :value \"EMILIA ROMAGNA\", :count 136} {:field \"region_ss\", :value \"TOSCANA\", :count 81} {:field \"region_ss\", :value \"VENETO\", :count 54} {:field \"region_ss\", :value \"LAZIO\", :count 45} {:field \"region_ss\", :value \"MARCHE\", :count 42} {:field \"region_ss\", :value \"PIEMONTE\", :count 23} {:field \"region_ss\", :value \"LIGURIA\", :count 19} {:field \"region_ss\", :value \"UMBRIA\", :count 14} {:field \"region_ss\", :value \"LOMBARDIA\", :count 11} {:field \"region_ss\", :value \"CAMPANIA\", :count 3} {:field \"region_ss\", :value \"PUGLIA\", :count 3} {:field \"region_ss\", :value \"ABRUZZO\", :count 1} {:field \"region_ss\", :value \"MOLISE\", :count 1}]} {:field \"entity\", :value \"LayerService\", :count 100, :pivot [{:field \"region_ss\", :value \"EMILIA ROMAGNA\", :count 33} {:field \"region_ss\", :value \"TOSCANA\", :count 25} {:field \"region_ss\", :value \"VENETO\", :count 12} {:field \"region_ss\", :value \"MARCHE\", :count 11} {:field \"region_ss\", :value \"LAZIO\", :count 8} {:field \"region_ss\", :value \"UMBRIA\", :count 4} {:field \"region_ss\", :value \"LIGURIA\", :count 3} {:field \"region_ss\", :value \"PIEMONTE\", :count 3} {:field \"region_ss\", :value \"LOMBARDIA\", :count 1}]} {:field \"entity\", :value \"Port\", :count 66} {:field \"entity\", :value \"VirtualMachine\", :count 47} {:field \"entity\", :value \"VirtualNetworkFunctionComponent\", :count 46} {:field \"entity\", :value \"Network\", :count 11} {:field \"entity\", :value \"Tenant\", :count 8} {:field \"entity\", :value \"VirtualNetworkFunction\", :count 6} {:field \"entity\", :value \"Host\", :count 3} {:field \"entity\", :value \"VnfType\", :count 1}]})" "(-> \"enity,region\" (clojure.string/split #\"\\,\") )" "(-> \"enity,region\" (clojure.string/split #\"\\,\") (into vector))" "(clojure.string/split \"aasd adasd\" #\"as\")" "(into {} tt)" "(def tt [[\"Site\" 434] [\"LayerService\" 100] [\"Port\" 66] [\"VirtualMachine\" 47] [\"VirtualNetworkFunctionComponent\" 46] [\"Network\" 11] [\"Tenant\" 8] [\"VirtualNetworkFunction\" 6] [\"Host\" 3] [\"VnfType\" 1]])" ":cljs/quit" "(take 5 (repeatedly (partial rand-int 10)))" "(rand-int 10)" "(rand-int 0)" "(rand-int)" "rand-int" "(take 8 (repeatedly rand-int))" "(def r 10)" "(calculate-path start 80 false r stroke-width)" "(def start (/ (- js/Math.PI) (* 180 90))) " "(def r 10)" "(def stroke-width 10)" " " "(clojure.string/join \" \" [1 2 3])" "(apply clojure.string/join \" \" 1 2 3)" "(calculate-path start 80 false r stroke-width)" " " " (cal)" "(def stroke-width 10)" "(def stroke-width 10) (def r 10)" " (def r 10)" "(def start (/ (- js/Math.PI) (* 180 90))) " "(arc start 0 false r stroke-width)" "(def start (/ (- js/Math.PI) (* 180 90))) " " (def r 10)" "(def stroke-width 10) " "(arc start 0 false r stroke-width)" "(def stroke-width 10) " " (def r 10)" "(def stroke-width 10) (def r 10)" "(def start (/ (- js/Math.PI) (* 180 90))) " "(arc start 0 false r stroke-width)" "(def start (/ (- js/Math.PI) (* 180 90))) (def stroke-width 10) (def r 10)" "(arc start 0 false r stroke-width)" "(calculate-path start 80 false r stroke-width)" "(caul)" "(def r 10)" "(def stroke-width 10)" "(def start (/ (- js/Math.PI) (* 180 90)))" "(precise 0.000012928364829587651)" "(+ start (* (/ 80 100) 0.00025856729659175253))" "(- (/ js/Math.PI (* 180 270)) start)" "arc" "(calculate-path start 80 false r stroke-width)" "(def start (/ (- js/Math.PI) (* 180 90)))" "(def r 10)" "stroke-width" "(def stroke-width 10)" "stroke-width" "(calculate-path start 80 false r stroke-width)" "(def r 10)" "(def stroke-width 10)" "(def start (/ (- js/Math.PI) (* 180 90)))" "(calculate-path start 80 false r stroke-width)" "(def stroke-width 10)" "(def r 10)" "(def start (/ (- js/Math.PI) (* 180 90)))" "(/ (- js/Math.PI) (* 180 90))" "(/ -js/Math.PI (* 180 90))" "(/ -Math.PI (* 180 90))" "js/Math.cos" "js/Math.PI" "(repl)" "(seq {:a 1 :b 2})" "(start)" "(seq {:a 1 :b 2})" "(dumb-query-prep \"*\")" "(cenx.corona.query/make-clause \"*:*\")" "(cenx.corona.query/make-clause \"*\")" "(into {} [[1 2] [3 4]])" "(start)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :current-search-term)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard )" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard keys)" "(repl)" "(.contains nil \":\")" ":cljs/quit" "(identity [2 3 4])" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :pager :num-rows)" "(into {} [[1 2] [3 4]])" "(repl)" "(in-ns 'user)" "(into {} [[1 2] [3 4]])" "(flatten (seq {:start 0 :count 0
                                    :facet-field \"entity\"
                                        :facet true}))" ">" "(fetch-total-entities (request :get \"http://localhost:3449/search/total-entities-by-type\"))" "(fetch-total-entities (request :get \"http://localhost:3449/search/total-entities\"))" "(request :get \"http://localhost:3449/search/total-entities\")" "(request :get \"/search/total-entities\")" "(fetch-total-entities (request :get \"/search/total-entities\"))" "(fetch-total-entities (request :get \"/\"))" "(fetch-total-entities-by-type (request :get \"/\"))" "(use '[ring.mock.request :only [request header]])" "(start)" "(use '[ring.mock.request :only [request header]])" "(fetch-total-entities-by-type (ring.mock.request/request :get \"/\"))" "(fetch-total-entities-by-type (request :get \"/\"))" "(query  {:solr {:inventory-collection \"parker\"}} :inventory-collection
                                (base-filter nil)
                                   {:start 0 :count 0})" "(query (delay {:solr {:inventory-collection \"parker\"}}) :inventory-collection
                                (base-filter nil)
                                   {:start 0 :count 0})" "(query {:solr {:inventory-collection \"parker\"}} :inventory-collection
                                (base-filter nil)
                                   {:start 0 :count 0})" "(query {:solr {:inventory-collection \"parker\"}}
                                (base-filter nil)
                                   {:start 0 :count 0})" "(prn \"RESPO-->\" )" "(log/info \"ASD\")" "(start)" "(log/info \"ASD\")" "(prn \"ADs\")" "(taoensso.timbre/set-level! :fatal)" "(start)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :pager :num-rows)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :pager :page)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :pager keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :data keys )" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :data keys :response )" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :data keys :response type)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :data keys :response typ)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :data keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms :data count)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms type)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms count)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :active-alarms)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard :stats)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard first)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard count)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard)" "(-> @re-frame.db/app-db :search)" "(-> @re-frame.db/app-db keys )" "(-> @re-frame.db/app-db keys clojure.pprint/pprint)" "(repl)" "(start)" "(taoensso.timbre/set-level! :fatal)" ":cljs/quit" "(repl)" "(start)" "(-> @re-frame.db/app-db keys clojure.pprint/pprint)" "(start)" "(config)" ":cljs/quit" "(-> @re-frame.db/app-db keys clojure.pprint/pprint)" "(-> @re-frame.db/app-db keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard)" "(-> @re-frame.db/app-db keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard)" "(-> @re-frame.db/app-db keys)" "(-> @re-frame.db/app-db :active-panel)" "(-> @re-frame.db/app-db keys)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard)" "(-> @re-frame.db/app-db :epiphany.dashboard.db/dashboard)" "(-> @re-frame.db/app-db :epiphany.inventory-dashboard.db/inventory-dashboard)" "(-> @re-frame.db/app-db keys)" "(-> @re-frame.db/app-db ::state)" "@re-frame.db/app-db" "(@re-frame.db/app-db)" "(@re-frame.db/app-d)" "(config)" "macs" "(repl)" "http-interceptor" "(start)" "(go)" "(stop)" "(go)" "(stop)" "(start)" "(go)" "(start)" "(in-ns 'user)" "(do-backup-merge-restore)" "(go)" "(go)" "(->> system :server pprint)" "(use 'clojure.pprint)" "(use 'clojure.pprint/pprint)" "(keys  system)" "system" "tt" "(map #(get tt %) (keys tt))" "(map #(keys (remove keyword? (filter identity (seq (get tt %))))) (keys tt))" "(seq :asd)" "(map #(keys (filter identity (seq (get tt %)))) (keys tt))" "(map #(keys (filter identity (get tt %))) (keys tt))" "(map #(keys (filter indentity (get tt %))) (keys tt))" "(map #(keys (get tt %)) (keys tt))" "(map #(type (get tt %)) (keys tt))" "(map #(count (get tt %)) (keys tt))" "(map #(count(get % tt)) (keys tt))" "(def tt (->> system :server ))" "(-> system :server keys)" "(-> system :server :server keys)" "(-> system :server :server )" "(-> system :server :server :cache )" "(-> system :server :server :cache count)" "(-> system :server :server keys)" "(-> system :server :server )" "(-> system :server :server :server)" "(-> system :server :server :websocket)" "(-> system :server :server :websocket count)" "(-> system :server :server keys)" "(-> system :server keys)" "(-> system :server )" "(-> system :server clojure.pprint/pprint)" "(-> system :server)" "(-> system :server :websocket-subs )" "(-> system :server :websocket-subs count)" "(-> system :server :websocket-subs coutn)" "(-> system :server keys)" "(-> syste :server )" "(-> syste :server :websocket-subs)" "(keys system)" "system" "#'system" "*1" "(keys *1)" "(go)" "(in-ns 'cenx.heimdallr.debug)" "(send-native (get-random-alarm-name) :Failed)" "(get-random-alarm-name)" "(is-heimdallr-sane?)" "(send-native \"dskAvail:virtual-machine:82893e79-5396-4fcf-a5cc-7960bc340815\" :Failed)" "(get-entity-alarms \"virtual-machine:82893e79-5396-4fcf-a5cc-7960bc340815\")" "(in-ns 'cenx.heimdallr.debug)" "(doseq [a (distinct (take 15 (repeatedly get-random-alarm-name)))] (send-native a :Failed))" "(dosync [a (distinct (take 15 (repeatedly get-random-alarm-name)))] (send-native a :Failed))" "(distinct (take 5 (repeatedly get-random-alarm-name)))" "(take 5 (repeatedly get-random-alarm-name))" "(repeat 10 (get-random-alarm-name))" "(get-random-alarm-name)" "(send-native \"SOME_VNF_ALARM_:virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\" :Failed)" "(get-entity-alarms \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\")" "(in-ns 'cenx.heimdallr.debug)" "(pos? 1)" "(get-active-alarms \"host:compute01\")" "(get-entity-alarms \"host:compute01\")" "(map :fault/state (web-services/get-all-faults-by-entity-id (:db/id (get-object \"host:compute01\"))))" "(send-native \"SNMP Poller SNMP Availability:virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\" :ok)" "(send-native \"SNMP Poller SNMP Availability:virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\" :Ok)" "\"SNMP Poller SNMP Availability:virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\"" "(map :fault/state (web-services/get-all-faults-by-entity-id (:db/id (get-object \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\"))))" "(web-services/get-all-faults-by-entity-id (:db/id (get-object \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\")))" "(get-object \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\")" "(get-active-alarms \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\")" "(get-entity-alarms \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\")" "(get-entity-alarms \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e
\")" "(web-services/get-all-faults-by-entity-id \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\")" "(get-active-alarms \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\")" "(clojure.pprint/pprint (get-active-alarms \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\"))" "(clojure.pprint/pprint (get-object \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\"))" "(clojure.pprint/pprint (get-active-alarms \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\"))" "(clojure.pprint/pprint (get-entity-alarms \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\"))" "(get-entity-alarms \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e\")" "(get-entity-alarms \"virtual-machine:d1bf9085-3b25-47cb-8767-c140a917f31e
\")" "(in-ns 'cenx.heimdallr.debug)" "(go)" "(stop)" ":cljs-quit" ":cljs/quit" "(cljs-repl)" "(go)" "(stop)" "(go)" "(stop)" "(go)" "(refresh-all)" "(go)" "
" "(go)" "(get-random-alarm-name)" "(get-entity-alarms \"virtual-network-function:641b8ee2-a244-44ab-915c-a00e10bcf870\")" "(get-entity-alarms \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\")" "(get-entity-alarms \"virtual-network-function:641b8ee2-a244-44ab-915c-a00e10bcf870\")" "(in-ns 'cenx.heimdallr.debug)" "(go)" "(stop)" "(go)" "(send-native \"SOME_VNF_ALARM_virtual-network-function:641b8ee2-a244-44ab-915c-a00e10bcf870\" :Failed)" "(send-native \"SOME_VNF_ALARM_virtual-network-function:641b8ee2-a244-44ab-915c-a00e10bcf870\" :Ok)" "(send-native \"SOME_VNF_ALARM_virtual-network-function:641b8ee2-a244-44ab-915c-a00e10bcf870\" :Failed)" "(get-entity-alarms \"virtual-network-function:641b8ee2-a244-44ab-915c-a00e10bcf870\")" "(send-native \"dskAvail:virtual-machine:82893e79-5396-4fcf-a5cc-7960bc340815\" :Failed)" "(get-entity-alarms \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\")" "(in-ns 'cenx.heimdallr.debug)" "(go)" "(go)" "(pos? 0)" "(go)" "x" "(get-alarm-names)" "(get-entity-alarms \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\")" "(in-ns 'cenx.heimdallr.debug)" "(get-all-active-alarms)" "(in-ns 'cenx.heimdallr.debug)" "(go)" "(stop)" "(go)" "(mode)" "(get-all-active-alarms)" "(get-entity-alarms \"virtual-network-function:vnf-16a6dd24-700e-4028-8d55-87d93d6450c2\")" "(get-entity-alarms \"vnf-16a6dd24-700e-4028-8d55-87d93d6450c2\")" "(get-entity-alarms \"host-overcloud-compute-0.localdomain\")" "(get-entity-alarms \"host:host-overcloud-compute-0.localdomain\")" "(get-entity-alarms \"host-overcloud-compute-0.localdomain\")" "(in-ns 'cenx.heimdallr.debug)" "(get-entity-alarmss \"host-overcloud-compute-0.localdomain\")" "(get-entity-alarms \"host-overcloud-compute-0.localdomain\")" "(send-native \"memAvailReal:virtual-machine:0455e79b-2b1c-4fa2-b877-e2abd934256f\" :Failed)" "(send-native \"memAvailReal:virtual-machine:0455e79b-2b1c-4fa2-b877-e2abd934256f\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(get-entity-alarms \"virtual-machine:0455e79b-2b1c-4fa2-b877-e2abd934256f\")" "(get-entity-alarms \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\")" "(get-entity-alarm \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\")" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(in-ns 'cenx.heimdallr.debug)" "(run)" "(stop)" "(refresh-all)" "(stop)" "(run)" "(refresh-all)" "(run)" "(refresh-all)" "(run)" "(refresh-all)" "(run)" "(run {:port 8123})" "(run {:port 8081})" "(run)" "(refresh-all)" "(run)" "(rune)" "(go)" "(run)" "(run {:port 8081 :path \"/dev\"})" "(go)" "(run {:port 8081 :path \"/dev\"})" "p" "(run {:port 8081 :path \"/dev\"})" "(run {:port 8081})" "(run)" "(def tt (run))" "(go)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(in-ns 'cenx.heimdallr.debug)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Failed)" "(send-native \"SOME_PORT_ALARM_port:4059cc44-69b3-43b7-bb68-05fbdced19d8\" :Ok)" "(pprint (get-entity-alarms \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\"))" "(pp (get-entity-alarms \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\"))" "(get-entity-alarms \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\")" "(get-entity-alarm \"virtual-network-function:185647a2-d45c-4787-b2a3-53513b75dbd3\")" "(in-ns 'cenx.heimdallr.debug)" "(make-clause \"id\" (->phrase \"asdasd\"))" "(make-clause \"id\" (->phrase %))" "(apply str [1 2 3 4 5])" "(assoc nil :1 :2)" "(->phrase \"ASd\")" "(str nil)" "(str false)" "(str nil)" "(str 'asd)" "(str true)" "(->> 1478710413015 tc/from-long tc/to-date-time  (tf/unparse (tf/formatters :date-time-no-ms)))" "(->> 1478710413015 tc/from-long tc/to-date-time  (tf/unparse (tf/formatters :date-time)))" "(->> 1478710413015 tc/from-long tc/to-date-time  (tf/unparse (tf/formatters :date-time-no-ms)))" "(->> 1478710413015 tc/from-long tc/to-date-time  (tf/unparse {:format-str :date-time-no-ms}))" "(-> 1478710413015 tc/from-long tc/to-date-time  (tf/unparse {:format-str :date-time-no-ms}))" "(-> 1478710413015 tc/from-long tc/to-date-time)" "(get @cenx.polar.app-state/store-state \"virtual-network-function:b520862e-f811-4687-b9c1-d3ee846b5414-alarms-badge-store\")" "(keys @cenx.polar.app-state/store-state)" "(count @cenx.polar.app-state/store-state)" "(type @cenx.polar.app-state/store-state)" "(type cenx.polar.app-state/store-state)" "(count cenx.polar.app-state/store-state)" "cenx.polar.app-state/app-state" "cenx.polar.app-state/store-state" "cenx.polar.app-state/dispatcher" "cenx.polar.app-state/app-state" "(cenx.polar.app-state/app-state)" "(cljs-repl)" "(def tt (go))" "(stop)" ":cljs/quit" "(stop)" "(cljs-repl)" "(group-by :a [{:a 1} {:a 2}])" "(go)" "(stop)" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :test} {:all true})" "(go \"vcp\")" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :test} {:all true})" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :qa} {:all true})" "(go \"vcp\")" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :qa} {:all true})" "(go \"vcp\")" "(stop)" "(go \"vcp\")" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :dev} {:all true})" "(:solr (load-config \"config.edn\"))" "(load-config \"config.edn\")" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :dev} {:all true})" "(def tt (go \"vcp\"))" "(stop)" "{:context \"vcp\"
 :stats-folder \"/opt/wildfly/domain/log/parker\"
 ;; These settings specify the kafka build connection parameters
 :kafka {:test {\"metadata.broker.list\" \"med22.cenx.localnet:9092\"}}
 ;; These settings specify the solr connection parameters
 :solr {:test {:url \"http://system02-dev10.cenx.localnet:8983/solr\"
               :zookeeper-url \"system01-dev10.cenx.localnet:2181/solr\"
               :connection-type :cloud
               :alias \"parker\"
               :collections #{\"parker3\"}
               :unordered true
               :debug-collection \"parker_dev\"}

        :dev {:url \"http://system02-dev10.cenx.localnet:8983/solr\"
              :zookeeper-url \"system01-dev10.cenx.localnet:2181/solr\"
              :connection-type :cloud
              :alias \"parker\"
              :collections #{\"parker3\"}
              :unordered true
              :debug-collection \"parker_dev\"}

        :qa {:url \"http://graph01-dev10.cenx.localnet:8983/solr\"
             :zookeeper-url \"ui01-dev10.cenx.localnet:2181/solr\"
             :connection-type :cloud
             :alias \"parker\"
             :collections #{\"parker3\" \"parker2\" \"parker1\"}
             :unordered true
             :debug-collection \"parker_dev\"}

        :local {:url \"http://192.168.99.100:8983/solr\"
                :zookeeper-url \"192.168.99.100:2181/solr\"
                :connection-type :cloud
                :alias \"parker\"
                :collections #{\"parker1\" \"parker3\" #_\"parker2\"}
                :unordered true
                :debug-collection \"parker_dev\"}}

 :analytics-index {:test {:url \"http://192.168.99.100:8983/solr\"
                          :zookeeper-url \"192.168.99.100:2181/solr\"
                          :connection-type :cloud
                          :alias \"analytics_index\"
                          :collections #{\"analytics_index1\" \"analytics_index2\" \"analytics_index3\"}}}

 ;; Timezone is used by Analytics to interpret time-stamps on data samples.
 :timezone-config
 {;; Select the method to calculate timezone
  ;; :askgeo/:approximation/:default
  :timezone-method :askgeo
  ;; US based customers should have \"US/Central\" as their default timezone.
  ;; If this field is missing or invalid UTC will be used.
  :timezone-default \"US/Central\"
  ;; Each customer need a individual license.
  ;; DO NOT USE THIS KEY IN PRODUCTION
  :timezone-license \"email=cenxit@cenx.com\\noracles=TimeZone\\ncreatedAt=Fri Dec 04 16:01:27 UTC 2015\\n\\ncycwdgf6kwktex7ekfxu9bmjr1nyfxxro0lg485o9n533noirg8lcu61rk1qw7b9wmfvij1\"}

 ;; These settings specify the parker web services host and port
 ;; :web-services {:host \"med22.cenx.localnet\"
 ;;                :port 8080}

 ;; These settings specify the event service connection.
 ;; Required for DataIntegrityexceptions.
 :event-service-config {:solr-url \"http://system02-dev10.cenx.localnet:8983/solr\"
                        :zookeeper-url \"system01-dev10.cenx.localnet:2181\"
                        :solr-zookeeper-url \"system01-dev10.cenx.localnet:2181/solr\"
                        :group-id \"parker\"
                        :solr-cloud? true
                        :ttl 2592000} ;; 30 days, expressed in seconds.
 ;; Moirai integration config
 ;; :container-config {:protocol   \"command\"
 ;;                    :port       \"8817\"
 ;;                    :host       \"med23.cenx.localnet\"
 ;;                    :node-types [:parker-build-node :parker-db-swap-node]}
       }" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :dev} {:all true})" "tt" "(def tt (go \"vcp\"))" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :local} {:all true})" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :test} {:all true})" "(go \"vcp\")" "(stop)" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :test} {:all true})" "(go \"vcp\")" "(def tt (go \"vcp\"))" " " "    (def tt (go \"vcp\"))
    16-11-09 19:58:31 Peyo-TzolovMBP.local INFO [cenx.parker.data-sources.customer-config:69] - Timezone License validated
    16-11-09 19:58:31 Peyo-TzolovMBP.local INFO [cenx.parker.data-sources.customer-config:25] - Initializing customer configurations.
    16-11-09 19:58:31 Peyo-TzolovMBP.local INFO [cenx.parker.core:38] - Started :customer-config component of Parker
    16-11-09 19:58:31 Peyo-TzolovMBP.local INFO [cenx.parker.events:21] - Initializing EventClient with Solr URL http://graph01-dev10.cenx.localnet:8983/solr, ZooKeeper URL ui01-dev10.cenx.localnet:2181, solr-zookeeper-url of ui01-dev10.cenx.localnet:2181/solr, group ID of parker, solr-cloud? of true, and TTL of 2592000
    16-11-09 19:58:31 Peyo-TzolovMBP.local INFO [cenx.anamnesis.client:370] - Building anamnesis client for group parker and topic cenx.event-service.conclusion
    16-11-09 19:58:31 Peyo-TzolovMBP.local INFO [cenx.anamnesis.client:47] - Starting event-service client for http://graph01-dev10.cenx.localnet:8983/solr
    16-11-09 19:58:32 Peyo-TzolovMBP.local INFO [cenx.anamnesis.client:74] - Kafka processing loop started16-11-09 19:58:32 Peyo-TzolovMBP.local INFO [cenx.parker.core:38] - Started :event-client component of Parker

    16-11-09 19:58:32 Peyo-TzolovMBP.local INFO [cenx.anamnesis.client:137] - Creating Anamnesis Event Consumer for topic cenx.event-service.conclusion
    16-11-09 19:58:32 Peyo-TzolovMBP.local INFO [cenx.parker.data-sources.vcp.simmer:23] - Initializing Simmer Data
    16-11-09 19:58:32 Peyo-TzolovMBP.local INFO [cenx.parker.core:40] - :simmer component of Parker was already started
    #'user/tt
    user> tt
    #cenx.parker.core.Parker{:doc-repo nil, :granite nil, :nnsis nil, :soem nil, :ossrc nil, :mcdb nil, :hippalectryon nil, :customer-config #cenx.parker.data_sources.customer_config.CustomerConfig{:timezone-config {:timezone-method :askgeo, :timezone-default \"US/Central\", :timezone-license \"email=cenxit@cenx.com\\noracles=TimeZone\\ncreatedAt=Fri Dec 04 16:01:27 UTC 2015\\n\\ncycwdgf6kwktex7ekfxu9bmjr1nyfxxro0lg485o9n533noirg8lcu61rk1qw7b9wmfvij1\"}, :vcp-management-network \"VM-Network\", :openstack-external-ip-type \"fixed\", :started? true}, :scheduled-ingest nil, :scheduled-build nil, :event-client #cenx.parker.events.EventClient{:solr-url \"http://graph01-dev10.cenx.localnet:8983/solr\" :zookeeper-url \"ui01-dev10.cenx.localnet:2181\" :group-id \"parker\" :solr-cloud? \"true\" :status :started}, :web-server nil, :moirai nil, :container {:moirai nil}, :simmer #cenx.parker.data_sources.vcp.simmer.SimmerConnection{:url \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/datastore.edn\"}, :customer-config-started true, :event-client-started true, :simmer-started true}
    user> (stop)
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :container component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :web-server component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.events:39] - Releasing EventClient connection
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.anamnesis.client:186] - Shutting down event service client
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.anamnesis.client:93] - Kafka channel force closed. Processing loop exited
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.anamnesis.client:121] - Event service percolator terminated
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.anamnesis.client:61] - Stopping event-service client for http://graph01-dev10.cenx.localnet:8983/solr
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:48] - Stopped :event-client component of Parker
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :scheduled-build component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :scheduled-ingest component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.data-sources.customer-config:37] - Clearing customer configurations.
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:48] - Stopped :customer-config component of Parker
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :hippalectryon component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :mcdb component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :ossrc component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :soem component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :nnsis component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :granite component of Parker was already stopped
    16-11-09 19:59:08 Peyo-TzolovMBP.local INFO [cenx.parker.core:50] - :doc-repo component of Parker was already stopped
    #cenx.parker.core.Parker{:doc-repo nil, :granite nil, :nnsis nil, :soem nil, :ossrc nil, :mcdb nil, :hippalectryon nil, :customer-config #cenx.parker.data_sources.customer_config.CustomerConfig{:timezone-config {:timezone-method :askgeo, :timezone-default \"US/Central\", :timezone-license \"email=cenxit@cenx.com\\noracles=TimeZone\\ncreatedAt=Fri Dec 04 16:01:27 UTC 2015\\n\\ncycwdgf6kwktex7ekfxu9bmjr1nyfxxro0lg485o9n533noirg8lcu61rk1qw7b9wmfvij1\"}, :vcp-management-network \"VM-Network\", :openstack-external-ip-type \"fixed\"}, :scheduled-ingest nil, :scheduled-build nil, :event-client #cenx.parker.events.EventClient{:solr-url \"http://graph01-dev10.cenx.localnet:8983/solr\" :zookeeper-url \"ui01-dev10.cenx.localnet:2181\" :group-id \"parker\" :solr-cloud? \"true\" :status :stopped}, :web-server nil, :moirai nil, :container {:moirai nil}, :simmer #cenx.parker.data_sources.vcp.simmer.SimmerConnection{:url \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/datastore.edn\"}, :customer-config-started nil, :event-client-started nil, :simmer-started true}
    user> tt
    #cenx.parker.core.Parker{:doc-repo nil, :granite nil, :nnsis nil, :soem nil, :ossrc nil, :mcdb nil, :hippalectryon nil, :customer-config #cenx.parker.data_sources.customer_config.CustomerConfig{:timezone-config {:timezone-method :askgeo, :timezone-default \"US/Central\", :timezone-license \"email=cenxit@cenx.com\\noracles=TimeZone\\ncreatedAt=Fri Dec 04 16:01:27 UTC 2015\\n\\ncycwdgf6kwktex7ekfxu9bmjr1nyfxxro0lg485o9n533noirg8lcu61rk1qw7b9wmfvij1\"}, :vcp-management-network \"VM-Network\", :openstack-external-ip-type \"fixed\", :started? true}, :scheduled-ingest nil, :scheduled-build nil, :event-client #cenx.parker.events.EventClient{:solr-url \"http://graph01-dev10.cenx.localnet:8983/solr\" :zookeeper-url \"ui01-dev10.cenx.localnet:2181\" :group-id \"parker\" :solr-cloud? \"true\" :status :started}, :web-server nil, :moirai nil, :container {:moirai nil}, :simmer #cenx.parker.data_sources.vcp.simmer.SimmerConnection{:url \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/datastore.edn\"}, :customer-config-started true, :event-client-started true, :simmer-started true}
    user> " "tt" "(stop)" "tt" "(def tt (go \"vcp\"))" "(stop)" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :test} {:all true})" "q" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :test} {:all true})" "(go \"vcp\")" "(testing \"valid graph\"
        (with-mock [#'collection/update! [:ignore]]
          (with-mock [#'collection/add! [:ignore]]
            (nova/push! 'dummy-coll services search-config-with-only-sets :foo :bar)
            (is (every? (partial = [:foo :bar])
                        (map (comp (partial drop 2) second) ; drop dummy-coll and current-entity input from the add! mock-trace
                             (mock-trace)))
                \"calls add! with all the options\")))

        (with-mock [#'collection/update! [:ignore]]
          (with-mock [#'collection/add! [:ignore]]
            (with-mock [#'ct/->NotIndexedPolySerializable [\"Display Data\" \"Entities\"]]
              (nova/push! 'dummy-coll [minimal-graph-with-one-site]
                          {:layer-service #{:city :state}
                           :site #{:city :state}}))
            (is (= #{{:audit_rating 3,
                      :build_rating 3,
                      :city #{\"Ottawa\"},
                      :state #{\"Ontario\"},
                      :region #{},
                      :alias #{\"LS:CENX\" \"CENX wi-fi\"},
                      :structure \"normally there is a graph here, in JSON\",
                      :id \"LS:CENX\",
                      :display-name \"CENX wi-fi\",
                      :display-data \"Display Data\",
                      :entities \"Entities\"
                      :layout \"normally there is an Artemis rendering here, in JSON\"
                      :inventory-status nil,
                      :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                      :entity \"LayerService\",
                      :topology #{\"fake\"}}
                     {:city #{\"Ottawa\"},
                      :site #{\"Site:CENX\"},
                      :layer-service #{\"LS:CENX\"},
                      :display-name \"Ottawa\",
                      :alias #{\"Ottawa\"},
                      :entity \"City\",
                      :id \"Ottawa\"}
                     {:state #{\"Ontario\"},
                      :site #{\"Site:CENX\"},
                      :layer-service #{\"LS:CENX\"},
                      :display-name \"Ontario\",
                      :alias #{\"Ontario\"},
                      :entity \"State\",
                      :id \"Ontario\"}}
                   (reformat-trace (mock-trace)))
                \"Nested fields are searchable on documents sent through add!, like layer services\"))
          (is (= (set (dynamic/->updates search-config-with-only-sets
                                         {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                                          :city #{\"Ottawa\"},
                                          :layer-service-count 1,
                                          :type :aggregation-site,
                                          :region #{},
                                          :alias #{\"CENX\" \"Site:CENX\"},
                                          :id \"Site:CENX\",
                                          :clli nil,
                                          :display-name \"CENX\",
                                          :inventory-status :its-aliiiiiive,
                                          :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                          :location nil,
                                          :entity \"Site\",
                                          :state #{\"Ontario\"},
                                          :contact nil}))
                 (reformat-trace (mock-trace)))
              \"Nested fields are searchable on documents sent through update!, like sites\")))" "(clojure.pprint/pprint (dynamic/->updates search-config-with-only-sets
                                                               {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                                                                :city #{\"Ottawa\"},
                                                                :layer-service-count 1,
                                                                :type :aggregation-site,
                                                                :region #{},
                                                                :alias #{\"CENX\" \"Site:CENX\"},
                                                                :id \"Site:CENX\",
                                                                :clli nil,
                                                                :display-name \"CENX\",
                                                                :inventory-status :its-aliiiiiive,
                                                                :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                                                :location nil,
                                                                :entity \"Site\",
                                                                :state #{\"Ontario\"},
                                                                :contact nil}))" "(with-mock [#'collection/update! [:ignore]]
                       (with-mock [#'collection/add! [:ignore]]
                         (with-mock [#'ct/->NotIndexedPolySerializable [\"Display Data\" \"Entities\"]]
                           (nova/push! 'dummy-coll [minimal-graph-with-one-site]
                                       {:layer-service #{:city :state}
                                        :site #{:city :state}}))
                         (is (= #{{:audit_rating 3,
                                   :build_rating 3,
                                   :city #{\"Ottawa\"},
                                   :state #{\"Ontario\"},
                                   :region #{},
                                   :alias #{\"LS:CENX\" \"CENX wi-fi\"},
                                   :structure \"normally there is a graph here, in JSON\",
                                   :id \"LS:CENX\",
                                   :display-name \"CENX wi-fi\",
                                   :display-data \"Display Data\",
                                   :entities \"Entities\"
                                   :layout \"normally there is an Artemis rendering here, in JSON\"
                                   :inventory-status nil,
                                   :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                   :entity \"LayerService\",
                                   :topology #{\"fake\"}}
                                  {:city #{\"Ottawa\"},
                                   :site #{\"Site:CENX\"},
                                   :layer-service #{\"LS:CENX\"},
                                   :display-name \"Ottawa\",
                                   :alias #{\"Ottawa\"},
                                   :entity \"City\",
                                   :id \"Ottawa\"}
                                  {:state #{\"Ontario\"},
                                   :site #{\"Site:CENX\"},
                                   :layer-service #{\"LS:CENX\"},
                                   :display-name \"Ontario\",
                                   :alias #{\"Ontario\"},
                                   :entity \"State\",
                                   :id \"Ontario\"}}
                                (reformat-trace (mock-trace)))
                             \"Nested fields are searchable on documents sent through add!, like layer services\"))
                       (is (= (set (dynamic/->updates search-config-with-only-sets
                                                      {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                                                       :city #{\"Ottawa\"},
                                                       :layer-service-count 1,
                                                       :type :aggregation-site,
                                                       :region #{},
                                                       :alias #{\"CENX\" \"Site:CENX\"},
                                                       :id \"Site:CENX\",
                                                       :clli nil,
                                                       :display-name \"CENX\",
                                                       :inventory-status :its-aliiiiiive,
                                                       :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                                       :location nil,
                                                       :entity \"Site\",
                                                       :state #{\"Ontario\"},
                                                       :contact nil}))
                              (reformat-trace (mock-trace)))
                           \"Nested fields are searchable on documents sent through update!, like sites\"))" "(testing \"valid graph\"
                       (with-mock [#'collection/update! [:ignore]]
                         (with-mock [#'collection/add! [:ignore]]
                           (nova/push! 'dummy-coll services search-config-with-only-sets :foo :bar)
                           (is (every? (partial = [:foo :bar])
                                       (map (comp (partial drop 2) second) ; drop dummy-coll and current-entity input from the add! mock-trace
                                            (mock-trace)))
                               \"calls add! with all the options\")))

                       (with-mock [#'collection/update! [:ignore]]
                         (with-mock [#'collection/add! [:ignore]]
                           (with-mock [#'ct/->NotIndexedPolySerializable [\"Display Data\" \"Entities\"]]
                             (nova/push! 'dummy-coll [minimal-graph-with-one-site]
                                         {:layer-service #{:city :state}
                                          :site #{:city :state}}))
                           (is (= #{{:audit_rating 3,
                                     :build_rating 3,
                                     :city #{\"Ottawa\"},
                                     :state #{\"Ontario\"},
                                     :region #{},
                                     :alias #{\"LS:CENX\" \"CENX wi-fi\"},
                                     :structure \"normally there is a graph here, in JSON\",
                                     :id \"LS:CENX\",
                                     :display-name \"CENX wi-fi\",
                                     :display-data \"Display Data\",
                                     :entities \"Entities\"
                                     :layout \"normally there is an Artemis rendering here, in JSON\"
                                     :inventory-status nil,
                                     :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                     :entity \"LayerService\",
                                     :topology #{\"fake\"}}
                                    {:city #{\"Ottawa\"},
                                     :site #{\"Site:CENX\"},
                                     :layer-service #{\"LS:CENX\"},
                                     :display-name \"Ottawa\",
                                     :alias #{\"Ottawa\"},
                                     :entity \"City\",
                                     :id \"Ottawa\"}
                                    {:state #{\"Ontario\"},
                                     :site #{\"Site:CENX\"},
                                     :layer-service #{\"LS:CENX\"},
                                     :display-name \"Ontario\",
                                     :alias #{\"Ontario\"},
                                     :entity \"State\",
                                     :id \"Ontario\"}}
                                  (reformat-trace (mock-trace)))
                               \"Nested fields are searchable on documents sent through add!, like layer services\"))
                         (is (= (set (dynamic/->updates search-config-with-only-sets
                                                        {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                                                         :city #{\"Ottawa\"},
                                                         :layer-service-count 1,
                                                         :type :aggregation-site,
                                                         :region #{},
                                                         :alias #{\"CENX\" \"Site:CENX\"},
                                                         :id \"Site:CENX\",
                                                         :clli nil,
                                                         :display-name \"CENX\",
                                                         :inventory-status :its-aliiiiiive,
                                                         :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                                         :location nil,
                                                         :entity \"Site\",
                                                         :state #{\"Ontario\"},
                                                         :contact nil}))
                                (reformat-trace (mock-trace)))
                             \"Nested fields are searchable on documents sent through update!, like sites\")))" "(dynamic/->updates search-config-with-only-sets
                         {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                          :city #{\"Ottawa\"},
                          :layer-service-count 1,
                          :type :aggregation-site,
                          :region #{},
                          :alias #{\"CENX\" \"Site:CENX\"},
                          :id \"Site:CENX\",
                          :clli nil,
                          :display-name \"CENX\",
                          :inventory-status :its-aliiiiiive,
                          :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                          :location nil,
                          :entity \"Site\",
                          :state #{\"Ontario\"},
                          :contact nil})" "(dynamic/->updates search-config-with-only-sets
                                        {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                                         :city [\"Ottawa\"],
                                         :layer-service-count 1,
                                         :type :aggregation-site,
                                         :region #{},
                                         :alias #{\"CENX\" \"Site:CENX\"},
                                         :id \"Site:CENX\",
                                         :clli nil,
                                         :display-name \"CENX\",
                                         :inventory-status :its-aliiiiiive,
                                         :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                         :location nil,
                                         :entity \"Site\",
                                         :state [\"Ontario\"],
                                         :contact nil})" "(testing \"valid graph\"
                       (with-mock [#'collection/update! [:ignore]]
                         (with-mock [#'collection/add! [:ignore]]
                           (nova/push! 'dummy-coll services search-config-with-only-sets :foo :bar)
                           (is (every? (partial = [:foo :bar])
                                       (map (comp (partial drop 2) second) ; drop dummy-coll and current-entity input from the add! mock-trace
                                            (mock-trace)))
                               \"calls add! with all the options\")))

                       (with-mock [#'collection/update! [:ignore]]
                         (with-mock [#'collection/add! [:ignore]]
                           (with-mock [#'ct/->NotIndexedPolySerializable [\"Display Data\" \"Entities\"]]
                             (nova/push! 'dummy-coll [minimal-graph-with-one-site]
                                         {:layer-service #{:city :state}
                                          :site #{:city :state}}))
                           (is (= #{{:audit_rating 3,
                                     :build_rating 3,
                                     :city #{\"Ottawa\"},
                                     :state #{\"Ontario\"},
                                     :region #{},
                                     :alias #{\"LS:CENX\" \"CENX wi-fi\"},
                                     :structure \"normally there is a graph here, in JSON\",
                                     :id \"LS:CENX\",
                                     :display-name \"CENX wi-fi\",
                                     :display-data \"Display Data\",
                                     :entities \"Entities\"
                                     :layout \"normally there is an Artemis rendering here, in JSON\"
                                     :inventory-status nil,
                                     :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                     :entity \"LayerService\",
                                     :topology #{\"fake\"}}
                                    {:city #{\"Ottawa\"},
                                     :site #{\"Site:CENX\"},
                                     :layer-service #{\"LS:CENX\"},
                                     :display-name \"Ottawa\",
                                     :alias #{\"Ottawa\"},
                                     :entity \"City\",
                                     :id \"Ottawa\"}
                                    {:state #{\"Ontario\"},
                                     :site #{\"Site:CENX\"},
                                     :layer-service #{\"LS:CENX\"},
                                     :display-name \"Ontario\",
                                     :alias #{\"Ontario\"},
                                     :entity \"State\",
                                     :id \"Ontario\"}}
                                  (reformat-trace (mock-trace)))
                               \"Nested fields are searchable on documents sent through add!, like layer services\"))
                         (is (= (set (dynamic/->updates search-config-with-only-sets
                                                        {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                                                         :city #{\"Ottawa\"},
                                                         :layer-service-count 1,
                                                         :type :aggregation-site,
                                                         :region #{},
                                                         :alias #{\"CENX\" \"Site:CENX\"},
                                                         :id \"Site:CENX\",
                                                         :clli nil,
                                                         :display-name \"CENX\",
                                                         :inventory-status :its-aliiiiiive,
                                                         :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                                         :location nil,
                                                         :entity \"Site\",
                                                         :state #{\"Ontario\"},
                                                         :contact nil}))
                                (reformat-trace (mock-trace)))
                             \"Nested fields are searchable on documents sent through update!, like sites\")))" "(dynamic/->updates search-config-with-only-sets
                         {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                          :city #{\"Ottawa\"},
                          :layer-service-count 1,
                          :type :aggregation-site,
                          :region #{},
                          :alias #{\"CENX\" \"Site:CENX\"},
                          :id \"Site:CENX\",
                          :clli nil,
                          :display-name \"CENX\",
                          :inventory-status :its-aliiiiiive,
                          :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                          :location nil,
                          :entity \"Site\",
                          :state #{\"Ontario\"},
                          :contact nil})" "(dynamic/->updates search-config-with-only-sets
                                     {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                                      :city #{\"Ottawa\"},
                                      :layer-service-count 1,
                                      :type :aggregation-site,
                                      :region #{},
                                      :alias #{\"CENX\" \"Site:CENX\"},
                                      :id \"Site:CENX\",
                                      :clli nil,
                                      :display-name \"CENX\",
                                      :inventory-status :its-aliiiiiive,
                                      :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                      :location nil,
                                      :entity \"Site\",
                                      :state #{\"Ontario\"},
                                      :contact nil})" "(dynamic/->updates search-config-with-only-sets
                                        {:address {:entity-type :address :city \"Ottawa\" :state \"Ontario\"}
                                         :city #{\"Ottawa\"},
                                         :layer-service-count 1,
                                         :type :aggregation-site,
                                         :region #{},
                                         :alias #{\"CENX\" \"Site:CENX\"},
                                         :id \"Site:CENX\",
                                         :clli nil,
                                         :display-name \"CENX\",
                                         :inventory-status :its-aliiiiiive,
                                         :vintage (str #inst \"1970-01-01T00:00:00.000-00:00\"),
                                         :location nil,
                                         :entity \"Site\",
                                         :state #{\"Ontario\"},
                                         :contact nil})" " (clojure.pprint/pprint (clojure.data/diff #{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"state\", :operation \"set\", :value [\"Ontario\"], :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}} #{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"state\", :value [\"Ontario\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}}))" "(map (fn [a b] (when-not (= a b) (println a) (println b))) 
                          (vec tt)  (vec ttt))" "(= (vec tt) (vec tt))" "(= [1 2] [2 1])" "(vec ttt)" "(sort (vec ttt))" "(map (fn [a b] (when-not (= a b) (println a) (println b))) 
                          (vec tt)  (vec ttt))" "(map (fn [a b] (when-not (= a b) (println a) (println b))) 
                          (sort (vec tt)) (sort (vec ttt)))" "(map (fn [a b] (when-not (= a b) (println a) (println b))) 
 (vec tt) (vec ttt))" "(map (fn [a b] (when-not (= a b) (println a) (println b))) (sort (vec tt)) (sort (vec ttt)))" "(map (fn [a b] (when-not (= a b) (println a) (println b))) tt ttt)" "(map (fn [a b] (when-not (= a b) (prn a /newline b))) tt ttt)" "(map (fn [a b] (when-not (= a b) (prn a \\newline b))) tt ttt)" "(map (fn [a b] (when-not (= a b) (prn a))) tt ttt)" "(map (fn [a b] (when (= a b) (prn a))) tt ttt)" "(map (fn [a b] (= a b)) tt ttt)" "(map (fn [a b] (when (= a b) a)) tt ttt)" "(map (fn [a b] (= a b)) tt ttt)" "(map (fn [a b] b) tt ttt)" "(map (fn [a b] a) tt ttt)" "(count (map (fn [a b] (when (= a b) a)) tt ttt))" "(map (fn [a b] (when (= a b) a)) tt ttt)" "(map (fn [a b] (when (= a b)) a) tt ttt)" "(remove nil? (map (fn [a b] (when = a b) a) tt ttt))" "(map (fn [a b] (when = a b) a) tt ttt)" "tt" "ttt" "(last ttt)" "(last tt )" "(count ttt)" "(count tt)" "(second tt)" "(second ttt)" "(first ttt)" "(first tt )" "(= tt ttt)" "(def ttt  #{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"state\", :value [\"Ontario\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}})" "(def tt #{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"state\", :operation \"set\", :value #{\"Ontario\"}, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}})" "(= #{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"state\", :operation \"set\", :value #{\"Ontario\"}, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}} #{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"state\", :value [\"Ontario\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}})" "(clojure.pprint/pprint '#{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"state\", :value [\"Ontario\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}})" "(clojure.pprint/pprint  '#{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"state\", :operation \"set\", :value #{\"Ontario\"}, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}}


                                             )" "(reformat-trace (mock-trace))" "(mock-trace)" "(clojure.pprint/pprint (clojure.data/diff '#{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"state\", :operation \"set\", :value #{\"Ontario\"}, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}}


                                                '#{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"state\", :value [\"Ontario\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}}))" "(clojure.data/diff '#{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"state\", :operation \"set\", :value #{\"Ontario\"}, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}}


'#{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"state\", :value [\"Ontario\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}})" "  '#{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"state\", :operation \"set\", :value #{\"Ontario\"}, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}}


'#{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"state\", :value [\"Ontario\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}}" "(clojure.pprint/pprint (clojure.data/diff {{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"state\", :operation \"set\", :value #{\"Ontario\"}, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}}


                                                #{{:field \"type\", :operation \"set\", :value :aggregation-site, :id \"Site:CENX\"} {:field \"address.state\", :operation \"set\", :value \"Ontario\", :id \"Site:CENX\"} {:field \"inventory-status\", :operation \"set\", :value :its-aliiiiiive, :id \"Site:CENX\"} {:field \"entity\", :operation \"set\", :value \"Site\", :id \"Site:CENX\"} {:field \"address.city\", :operation \"set\", :value \"Ottawa\", :id \"Site:CENX\"} {:field \"layer-service-count\", :operation \"set\", :value 1, :id \"Site:CENX\"} {:field \"address.entity-type\", :operation \"set\", :value :address, :id \"Site:CENX\"} {:field \"display-name\", :operation \"set\", :value \"CENX\", :id \"Site:CENX\"} {:field \"city\", :value [\"Ottawa\"], :operation \"add\", :id \"Site:CENX\"} {:field \"state\", :value [\"Ontario\"], :operation \"add\", :id \"Site:CENX\"} {:field \"vintage\", :operation \"set\", :value \"Wed Dec 31 19:00:00 EST 1969\", :id \"Site:CENX\"} {:field \"alias\", :operation \"set\", :value #{\"CENX\" \"Site:CENX\"}, :id \"Site:CENX\"} {:field \"root-entity-count\", :value 1, :operation \"inc\", :id \"Site:CENX\"}}))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                            (map (fn [[k e]]
                                                   (if (= :site (:entity-type e))
                                                     {k (assoc e :location {:entity-type :location
                                                                            :longitude -82.369903
                                                                            :latitude 28.062249}
                                                               :type \"vcp-site\"
                                                               :address {:street \"7701 E Telecom Pkwy\"
                                                                         :city \"Temple Terrace\"
                                                                         :county \"Not Available\"
                                                                         :state \"FL\"})}
                                                     {k e})))
                                            (apply merge)))
      struct))

  (def entities (mapv test-vnf-eml filenames))" "(:main-collection started-solr-conn)" "
" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                            (map (fn [[k e]]
                                                   (if (= :site (:entity-type e))
                                                     {k (assoc e :location {:entity-type :location
                                                                            :longitude -82.369903
                                                                            :latitude 28.062249}
                                                               :type \"vcp-site\"
                                                               :address {:street \"7701 E Telecom Pkwy\"
                                                                         :city \"Temple Terrace\"
                                                                         :county \"Not Available\"
                                                                         :state \"FL\"})}
                                                     {k e})))
                                            (apply merge)))
      struct))

  (def entities (mapv test-vnf-eml filenames))" "(:main-collection started-solr-conn)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :qa)))" "(:main-collection started-solr-conn)" "(count tt)" "(map :affected-object-id tt)" "(find-in :affected-object-id \"virtual-machine:3197933b-ccef-477e-abc3-a74ccf07aef3\" tt)" "(:state (find-in :affected-object-id \"virtual-machine:3197933b-ccef-477e-abc3-a74ccf07aef3\" tt))" "(:state (find-in :affected-object-id \"virtual-machine:5465bf2f-d21b-4868-9ebc-93c7837e612e\" tt))" "(find-in :affected-object-id \"virtual-machine:5465bf2f-d21b-4868-9ebc-93c7837e612e\" tt)" "(find-in :affected-object-id (find-in :affected-object-id id (:rows fault-states-store))\"virtual-machine:5465bf2f-d21b-4868-9ebc-93c7837e612e\" tt)" "(defn find-in
  \"Utility fn to find a hashmap, in a given col, that matches 'key'
  with 'value'\"
  [key value col]
  (first (filter #(= (get % key) value) col)))" "(def tt  [{:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-machine:57818a6e-5aad-407e-a297-c13e6e78d989\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil} {:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-machine:adba6c60-3bc8-48ef-962d-6234e4433aa8\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil} {:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-machine:5e5f4d70-10b5-47a9-8245-38dcd571a37d\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil} {:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-network-function-component:b9de99fa-4c00-4f60-a981-eb71a0987171:9ee4a875-8468-4cef-b569-fabc72306b75\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil} {:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-machine:5465bf2f-d21b-4868-9ebc-93c7837e612e\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil} {:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-network-function-component:71b44215-4065-4926-82e7-bfff14b5e639:c1fc9409-77ad-45ee-9763-8bacbddb554e\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil} {:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-network-function-component:1b5f1dcf-88fa-4194-8b7a-bcc842289a9d:6015f83f-e2c1-443b-861c-b58304293c8e\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil} {:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-machine:cedbb3e7-f285-4f21-b463-d15d23983c7f\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil} {:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-machine:bb9765de-a75a-41f8-afc8-e33de98e5d1d\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil} {:dependent-layer-services nil, :vendor_agg_circuit_id nil, :vendor_cell_circuit_id nil, :state :Failed, :region nil, :details nil, :service-provider nil, :affected-object-id \"virtual-network-function-component:69ced2d1-92b5-48e0-a065-9b46850d01a4:408150a4-176c-47e2-9f96-496917c09e99\", :area nil, :timestamp \"2016-11-07T19:29:15Z\", :dependent-sites nil}])" "(clojure.string/lower-case \":Fales\")" "(st/join \",\" [\"id\"
\"vnfType_s\"
\"tenant_ss\"
\"virtual-network-function-component_ss\"
\"virtual-network-function-component_tiss\"
\"display-data_tiss\"
\"network_tiss\"
\"audit_rating_l\"
\"alias\"
\"build_rating_l\"
\"vnf-type_ss\"
\"display-name_s\"
\"vnfVendor_tis\"
\"vnfVendor_s\"
\"display-name_tis\"
\"host_ss\"
\"vnfType_tis\"
\"vnf-type_tiss\"
\"virtual-machine_tiss\"
\"tenant_tiss\"
\"network_ss\"
\"port_tiss\"
\"display-data_nist\" \"site_ss\"
\"virtual-network-function_tiss\"
\"virtual-network-function_ss\"
\"virtual-machine_ss\"
\"analytics-graph_tiss\"
\"site_tiss\"
\"port_ss\"
\"entity\"
\"_version_\"
                    ])" "(st/join \",\" [\"id\"
\"vendor_tis\"
\"tenant_ss\"
\"host_ip_tis\"
\"virtual-network-function-component_ss\"
\"virtual-network-function-component_tiss\"
\"display-data_tiss\"
\"memory_mb_s\"
\"local_gb_s\"
\"hypervisor_hostname_s\"
\"network_tiss\"
\"audit_rating_l\"
\"alias\"
\"build_rating_l\"
\"display-name_s\"
\"model_tis\"
\"host_ip_s\"
\"display-name_tis\"
\"host_ss\"
\"virtual-machine_tiss\"
\"tenant_tiss\"
\"network_ss\"
\"port_tiss\"
\"memory_mb_tis\"
\"host_tiss\"
\"site_ss\"
\"vendor_s\"
\"virtual-machine_ss\"
\"analytics-graph_tiss\"
\"local_gb_tis\"
\"site_tiss\"
\"hypervisor_hostname_tis\"
\"model_s\"
\"port_ss\"
\"entity\"
\"_version_\"
])" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                            (map (fn [[k e]]
                                                   (if (= :site (:entity-type e))
                                                     {k (assoc e :location {:entity-type :location
                                                                            :longitude -82.369903
                                                                            :latitude 28.062249}
                                                               :type \"vcp-site\"
                                                               :address {:street \"7701 E Telecom Pkwy\"
                                                                         :city \"Temple Terrace\"
                                                                         :county \"Not Available\"
                                                                         :state \"FL\"})}
                                                     {k e})))
                                            (apply merge)))
      struct))

  (def entities (mapv test-vnf-eml filenames))" "(require '[clojure.string :as st])" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "p" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :local} {:all true})" "(go \"vcp\")" "(stop)" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :local} {:all true})" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "p" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "p" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(re-find #\"asd\" \"Hello\")" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :local} {:all true})" "(re-find #\"asd\" \"Hello\")" "(re-find #\"ello\" \"Hello\")" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :local} {:all true})" "(go \"vcp\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                            (map (fn [[k e]]
                                                   (if (= :site (:entity-type e))
                                                     {k (assoc e :location {:entity-type :location
                                                                            :longitude -82.369903
                                                                            :latitude 28.062249}
                                                               :type \"vcp-site\"
                                                               :address {:street \"7701 E Telecom Pkwy\"
                                                                         :city \"Temple Terrace\"
                                                                         :county \"Not Available\"
                                                                         :state \"FL\"})}
                                                     {k e})))
                                            (apply merge)))
      struct))

  (def entities (mapv test-vnf-eml filenames))" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(require '[clojure.string :as st])" "started-solr-conn" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(go \"vcp\")" "(go)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :qa)))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                            (map (fn [[k e]]
                                                   (if (= :site (:entity-type e))
                                                     {k (assoc e :location {:entity-type :location
                                                                            :longitude -82.369903
                                                                            :latitude 28.062249}
                                                               :type \"vcp-site\"
                                                               :address {:street \"7701 E Telecom Pkwy\"
                                                                         :city \"Temple Terrace\"
                                                                         :county \"Not Available\"
                                                                         :state \"FL\"})}
                                                     {k e})))
                                            (apply merge)))
      struct))

  (def entities (mapv test-vnf-eml filenames))" "(require '[clojure.string :as st])" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(go \"vcp\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

(defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      struct))

(def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

(defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      struct))

(def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

(defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                            (map (fn [[k e]]
                                                   (if (= :site (:entity-type e))
                                                     {k (assoc e :location {:entity-type :location
                                                                            :longitude -82.369903
                                                                            :latitude 28.062249}
                                                               :type \"vcp-site\"
                                                               :address {:street \"7701 E Telecom Pkwy\"
                                                                         :city \"Temple Terrace\"
                                                                         :county \"Not Available\"
                                                                         :state \"FL\"})}
                                                     {k e})))
                                            (apply merge)))))

(def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

(defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                            (map (fn [[k e]]
                                                   (if (= :site (:entity-type e))
                                                     {k (assoc e :location {:entity-type :location
                                                                            :longitude -82.369903
                                                                            :latitude 28.062249}
                                                               :type \"vcp-site\"
                                                               :address {:street \"7701 E Telecom Pkwy\"
                                                                         :city \"Temple Terrace\"
                                                                         :county \"Not Available\"
                                                                         :state \"FL\"})}
                                                     {k e})))
                                            (apply merge)))))

(def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                            (map (fn [[k e]]
                                                   (if (= :site (:entity-type e))
                                                     {k (assoc e :location {:entity-type :location
                                                                            :longitude -82.369903
                                                                            :latitude 28.062249}
                                                               :type \"vcp-site\"
                                                               :address {:street \"7701 E Telecom Pkwy\"
                                                                         :city \"Temple Terrace\"
                                                                         :county \"Not Available\"
                                                                         :state \"FL\"})}
                                                     {k e})))
                                            (apply merge)))
      struct))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161027/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      #_(update-in struct [:entities] #(->> %
                                            (map (fn [[k e]]
                                                   (if (= :site (:entity-type e))
                                                     {k (assoc e :location {:entity-type :location
                                                                            :longitude -82.369903
                                                                            :latitude 28.062249}
                                                               :type \"vcp-site\"
                                                               :address {:street \"7701 E Telecom Pkwy\"
                                                                         :city \"Temple Terrace\"
                                                                         :county \"Not Available\"
                                                                         :state \"FL\"})}
                                                     {k e})))
                                            (apply merge)))
      struct))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :location {:entity-type :location
                                                                          :longitude -82.369903
                                                                          :latitude 28.062249}
                                                             :type \"vcp-site\"
                                                             :address {:street \"7701 E Telecom Pkwy\"
                                                                       :city \"Temple Terrace\"
                                                                       :county \"Not Available\"
                                                                       :state \"FL\"})}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "  (def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :location {:entity-type :location
                                                                          :longitude -82.369903
                                                                          :latitude 28.062249}
                                                             :type \"Site\"
                                                             :address {:street \"7701 E Telecom Pkwy\"
                                                                       :city \"Temple Terrace\"
                                                                       :county \"Not Available\"
                                                                       :state \"FL\"})}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "  (def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :location {:entity-type :location
                                                                          :longitude -82.369903
                                                                          :latitude 28.062249}
                                                             :type \"Site\"
                                                             :address {:entity-type :address
                                                                       :street \"7701 E Telecom Pkwy\"
                                                                       :city \"Temple Terrace\"
                                                                       :county \"Not Available\"
                                                                       :state \"FL\"})}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :location {:entity-type :location
                                                                          :longitude -82.369903
                                                                          :latitude 28.062249})}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(let [{:keys [a b] :or {a \"FUCK\"}} {:a nil :b 2}] [a b])" "(let [{:keys [a b] :or {a \"FUCK\"}} {:b 2}] [a b])" "(let [{:keys [a b] :or [a \"FUCK\"]} {:b 2}] [a b])" "(let [{:keys [a b] :or [a \"FUCK\"]} {:a 1 :b 2}] [b])" "(let [{:keys [a b] :or [a \"FUCK\"]} {:a 1 :b 2}] [a b])" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :location {:entity-type :location
                                                                          :longitude -82.369903
                                                                          :latitude 28.062249})}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :foobar \"28.062249 -82.369903\")}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :location \"28.062249 -82.369903\")}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :location \"28.062249 -82.369903\" :display-name \"FOOBAR\")}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(->> entities first :entities clojure.pprint/pprint)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :qa)))" "(->> entities first :entities clojure.pprint/pprint)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :location \"28.062249 -82.369903\")}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(->> entities first :entities clojure.pprint/pprint)" "(:main-collection started-solr-conn)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(-> entities first keys)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (update-in struct [:entities] #(->> %
                                          (map (fn [[k e]]
                                                 (if (= :site (:entity-type e))
                                                   {k (assoc e :location \"28.062249 -82.369903\")}
                                                   {k e})))
                                          (apply merge)))))

  (def entities (mapv test-vnf-eml filenames))" "(-> entities first keys)" "(-> entities first)" "(-> entities type)" "(entities type)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (->> struct
           :entities
           (map (fn [[k e]]
                  (if (= :site (:entity-type e))
                    {k (assoc e :location \"28.062249 -82.369903\")}
                    {k e})))
           (apply merge))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))
          struct (-> filename
                     slurp
                     read-string
                     (assoc-in [:graph :root] id)
                     (assoc-in [:graph :version] \"2-P0C\"))]
      (->> struct
           :entities
           (map (fn [e]
                  (if (= :site (:entity-type e))
                    (assoc e :location \"28.062249 -82.369903\")
                    e))))))

  (def entities (mapv test-vnf-eml filenames))" "(-> entities first keys) " "(-> entities first type)
  " "(-> entities type)
  " "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :qa)))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :qa)))" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(require '[clojure.string :as st])" "(go)" "(go \"vcp\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(:main-collection started-solr-conn)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016102501/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(require '[clojure.string :as st])" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161026/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(:main-collection started-solr-conn)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(go \"vcp\")" "(->> entities (#(nth % 5)) :entities vals (filter #(= :virtual-machine (:entity-type %))) first)" "(tt 7)" "(tt 6)" "(defn tt [n] (->> entities (#(nth % n)) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct clojure.pprint/pprint))" "(->> entities (#(nth % 5)) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct clojure.pprint/pprint)" "(->> entities (#(nth % 4)) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct clojure.pprint/pprint)" "(->> entities (#(nth % 3)) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct clojure.pprint/pprint)" "(->> entities (#(nth % 3)) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct)" "(->> entities (#(nth % 2)) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct)" "(->> entities (#(nth % 1)) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct)" "(->> entities (#(nth % 1)) :entities vals (filter #(= :virtual-machine (:entity-type %))) )" "(->> entities (#(nth % 1)) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct)" "(->> entities (#(nth % 1)) :entities vals (filter #(= :virtual-machine (:entity-type %))) first :server-name)" "(->> entities (#(nth % 1)) :entities vals (filter #(= :virtual-machine (:entity-type %))) :server-name)" "(->> entities (#(nth % 1)) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct)" "(->> entities (nth 1) :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct)" "(->> entities first :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys) distinct)" "(->> entities first :entities vals (filter #(= :virtual-machine (:entity-type %))) (map keys))" "(->> entities first :entities vals (filter #(= :virtual-machine (:entity-type %))))" "(-> entities first :entities vals first)" "(-> entities first :entities vals )" "(-> entities first :entities vals :type)" "(-> entities first :entities vals :entity-type)" "(-> entities first :entities vals first)" "(-> entities first :entities keys)" "(-> entities first :entities first)" "(-> entities first keys)" "(-> entities first)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016102501/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(:main-collection started-solr-conn)" "(cenx.parker.build.build-target/push-paths! started-solr-conn (drop-last entities))" "(-> entities last)" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(last entities)])" "(cenx.parker.build.build-target/push-paths! started-solr-conn (take 21 entities))" "(cenx.parker.build.build-target/push-paths! started-solr-conn (take 20 entities))" "(cenx.parker.build.build-target/push-paths! started-solr-conn (take 15 entities))" "(cenx.parker.build.build-target/push-paths! started-solr-conn (take 10 entities))" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(take entities 10)])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(take 10 entities)])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(nth entities 4)])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(nth entities 3)])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(nth entities 2)])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(second entities)])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(first entities)])" "(-> entities first)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161025/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(:main-collection started-solr-conn)" "(->> entities (map #(-> % :graph :edges empty?)))" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161025/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(->> entities1 (map #(-> % :graph :nodes empty?)))" "(->> entities1 (map #(-> % :graph :edges empty?)))" "(->> entities (map #(-> % :graph :edges empty?)))" "(->> entities (map #(-> % :graph :nodes empty?)))" "(-> entities (map #(-> % :graph :nodes )))" "(-> entities (map #(-> % :graph :nodes empty?)))" "(-> entities first :graph)" "(->> entities1 (map :graph))" "(-> entities last  :graph)" "(-> entities2 last  :graph)" "(-> entities1 last  :graph)" "(-> entities1  :graph)" "(-> entities1 first :graph)" "(-> entities first :graph)" "(-> entities first keys)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161025/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(def filenames1
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161014/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities1 (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161014/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "
  " "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(first entities)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :qa)))" "(:main-collection started-solr-conn)" "(count filenames)" "(count entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161025/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(sort-by #(.indexOf [1 2 3 4 5 6] %) [5 4 6 3 2 1])" "(sort-by #(.indexOf [1 2 3 4 5 6] %) [5 4 3 2 1])" "(sort-by #(get (.indexOf [1 2 3 4 5 6] %)) [5 4 3 2 1])" "(sort-by #(get (.indexOf % [1 2 3 4 5 6])) [5 4 3 2 1])" "(clojure.set/map-invert [5 4 3 2 1])" "(swap [5 4 3 2 1])" "(sort-by #(get  [1 2 3 4 5 6] %) [5 4 3 2 1])" "(sort-by #(get  [1 2 3 4 5] %) [5 4 3 2 1])" "(doseq [[k v] {:a :b :c :d}] (prn [k v]))" "(clojure.string/split \"entity:Host\" #\":\" )" "(clojure.string/split #\":\" \"entity:Host\" )" "(clojure.string/capitalize \"Tenant\")" "(clojure.string/capitalize \"tenant\")" "(take 4 (repeatedly #(rand-int 10)))" "(take 4 (repeatedly (rand-int 10)))" "(take 4 (repeatedly (random 10)))" "(get-in {:a {:b {:c 1}}} [:a :b])" "(get-in [0 [0 2]] [0 1])" "(get-in [0 1] [0 [0 2]])" "(apply hash-map (interleave (repeatedly (partial rand-int 100)) [4 5 6]))" "(interleave (repeatedly (partial rand-int 100)) [4 5 6])" "(interleave (repeat (rand-int 100)) [4 5 6])" "(interleave (repeat (rand-int 1)) [4 5 6])" "(interleave (repeat (rand-int)) [4 5 6])" "(interleave (repeat (random)) [4 5 6])" "(interleave [1 2 3] [4 5 6])" "(partition-all 2 {:a {:a :a} :b {:b :b} :c {:c :c} :d {:d :d}})" "(.indexOf [[1] [2] [3]] [3])" "(.indexOf [1 2 3] 3)" "(.indexOf [1 2 3] 1)" "(.indexOf 1 [1 2 3])" "(assoc-in {:eart {\"duck\" [{:you :fuck}]}} [:eart \"duck\"] [{:FUAD :FUAK}])" "(assoc-in {:eart {\"duck\" [{:you :fuck}]}} [:eart \"duck\"] {:FUAD :FUAK})" "(assoc-in {:eart {\"duck\" {:you :fuck}}} [:eart \"duck\"] {:FUAD :FUAK})" "(assoc-in {:eart {\"duck\" {:you :fuck}}} [:eart \"duck\"] {:FUAD FUAK})" "(group-by :id [{:title \"Host\"
                      :filter-query \"entity:Host\"
                      :facet-field \"virtual-network-function\"
                      :facet-field-display \"VNF\"
                      :id 1}
                     {:title \"VNF\"
                      :filter-query \"entity:VirtualNetworkFunction\"
                      :facet-field \"host\"
                      :facet-field-display \"Host\"
                      :id 2}
                     {:title \"VM\"
                      :filter-query  \"entity:VirtualMachine\"
                      :facet-field \"tenant\"
                      :facet-field-display \"Tenant\"
                      :id 3}
                     {:title \"Port\"
                      :filter-query  \"entity:Port\"
                      :facet-field \"tenant\"
                      :facet-field-display \"Tenant\"
                      :id 4}])" "[{:title \"Host\"
                                          :filter-query \"entity:Host\"
                                          :facet-field \"virtual-network-function\"
                                          :facet-field-display \"VNF\"
        :id 1}
                                         {:title \"VNF\"
                                          :filter-query \"entity:VirtualNetworkFunction\"
                                          :facet-field \"host\"
                                          :facet-field-display \"Host\"
                                          :id 2}
                                         {:title \"VM\"
                                          :filter-query  \"entity:VirtualMachine\"
                                          :facet-field \"tenant\"
                                          :facet-field-display \"Tenant\"
                                          :id 3}
                                         {:title \"Port\"
                                          :filter-query  \"entity:Port\"
                                          :facet-field \"tenant\"
                                          :facet-field-display \"Tenant\"
                                          :id 4}]" "(merge {:a 1} {:a 2})" "(cenx.parker.build.build-target/push-paths! qa-solr-conn entities)" "(cenx.corona.collection/delete-by-query! (.start (:main-collection qa-solr-conn)) \"*:*\")" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161014/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(set \"VNF\")" "(remove (set \"VNF\") [\"VNF\" \"Host\" \"Tenant\" \"Port\" \"Site\" \"VM\" \"VNFc\"])" "(cenx.parker.build.build-target/push-paths! qa-solr-conn entities)" "(cenx.corona.collection/delete-by-query! (.start (:main-collection qa-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! qa-solr-conn entities)" "(cenx.corona.collection/delete-by-query! (.start (:main-collection qa-solr-conn)) \"*:*\")" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(cenx.parker.build.build-target/push-paths! qa-solr-conn entities)" "(def qa-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :qa)))" "(def qa-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :qa)))a" "(def wa-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :qa)))" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(count entities)" "(def filenames
    (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
         clojure.java.io/file
         file-seq
         (map str)
         (remove #(re-find #\"\\.zip\" %))
         rest))

  (defn test-vnf-eml
    [filename]
    (let [id (-> filename
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))]
      (-> filename
          slurp
          read-string
          (assoc-in [:graph :root] id)
          (assoc-in [:graph :version] \"2-P0C\"))))

  (def entities (mapv test-vnf-eml filenames))" "(def entities (mapv test-vnf-eml filenames))" "(count filenames)" "(clojure.pprint/pprint filenames)" "(def filenames
        (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
             clojure.java.io/file
             file-seq
             (map str)
             (remove #(re-find #\"\\.zip\" %))
             rest))" "(def filenames
        (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
             clojure.java.io/file
             file-seq
             (map str)
             (remove #(re-find #\"\\.zip\" %))
             drop-first))" "(def filenames
        (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
             clojure.java.io/file
             file-seq
             (map str)
             (remove #(re-find #\"\\.zip\" %))))" "(clojure.pprint/pprint filenames)" "(count filenames)" "(def filenames
        (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
             clojure.java.io/file
             file-seq
             (map str)
             (remove #(re-find #\"\\.zip\" %))))" "(second filenames)" "(first filenames)" "(def filenames
        (->> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"
             clojure.java.io/file
             file-seq
             (map str)
             (remove #(re-find #\"\\.zip\" %))))" "(re-find #\"\\.zip\" \"ASDASD.zip\")" "(clojure.string/re-find #\"\\.zip\" \"ASDASD.zip\")" "(count (map str (file-seq (clojure.java.io/file \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\"))))" "(map str (file-seq (clojure.java.io/file \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/\")))" "(map str (file-seq (clojure.java.io/file \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301\")))" "(file-seq (clojure.java.io/file \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301\"))" "(file-seq \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301\")" "(slurp \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301\")" "host11" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-1.edn\" \"host-overcloud-compute-8.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-4.edn\" \"host-overcloud-compute-9.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-5.edn\" \"host-overcloud-compute-1.localdomain\"))
(def host6 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-6.edn\" \"host-tpacpuccomp2.localdomain\"))
(def host7 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-7.edn\" \"host-tpacpuccomp7.localdomain\"))
(def host8 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-8.edn\" \"host-overcloud-compute-2.localdomain\"))
(def host9 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-9.edn\" \"host-overcloud-compute-3.localdomain\"))
(def host10 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-10.edn\" \"host-overcloud-compute-4.localdomain\"))
(def host11 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-11.edn\" \"host-overcloud-compute-0.localdomain\"))
(def host12 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-12.edn\" \"host-overcloud-compute-10.localdomain\"))
(def host13 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-13.edn\" \"host-overcloud-compute-12.localdomain\"))
(def host14 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-14.edn\" \"host-overcloud-compute-6.localdomain\"))
(def host15 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-15.edn\" \"host-overcloud-compute-7.localdomain\"))
(def host16 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-16.edn\" \"host-overcloud-compute-11.localdomain\"))
(def host17 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-17.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host18 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-18.edn\" \"host-overcloud-compute-5.localdomain\"))

" "(first filenames)" "(first entities)" "host1" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-1.edn\" \"host-overcloud-compute-8.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-4.edn\" \"host-overcloud-compute-9.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-5.edn\" \"host-overcloud-compute-1.localdomain\"))
(def host6 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-6.edn\" \"host-tpacpuccomp2.localdomain\"))
(def host7 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-7.edn\" \"host-tpacpuccomp7.localdomain\"))
(def host8 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-8.edn\" \"host-overcloud-compute-2.localdomain\"))
(def host9 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-9.edn\" \"host-overcloud-compute-3.localdomain\"))
(def host10 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-10.edn\" \"host-overcloud-compute-4.localdomain\"))
(def host11 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-11.edn\" \"host-overcloud-compute-0.localdomain\"))
(def host12 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-12.edn\" \"host-overcloud-compute-10.localdomain\"))
(def host13 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-13.edn\" \"host-overcloud-compute-12.localdomain\"))
(def host14 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-14.edn\" \"host-overcloud-compute-6.localdomain\"))
(def host15 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-15.edn\" \"host-overcloud-compute-7.localdomain\"))
(def host16 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-16.edn\" \"host-overcloud-compute-11.localdomain\"))
(def host17 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-17.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host18 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-18.edn\" \"host-overcloud-compute-5.localdomain\"))

" "host1" "(first entities)" "

" "(:main-collection started-solr-conn)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(first entities)" "(type entities)" "(first entities)" "(cenx.parker.build.build-target/push-paths! started-solr-conn entities)" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def entities (mapv vcp/test-vnf-eml filenames))" "(def filenames [\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-0.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-1.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-10.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-11.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-12.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-2.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-3.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-4.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-5.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-6.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-7.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-8.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-9.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp0.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp17.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp2.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp22.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp7.localdomain.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/vnf-72de9c8f-94c3-4a36-874d-baf04aa4eb87.edn\"
                      \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/vnf-ac232a12-19e0-4043-ad71-c5bca73dd1fa.edn\"])" "(def filenames \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-0.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-1.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-10.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-11.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-12.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-2.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-3.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-4.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-5.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-6.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-7.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-8.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-9.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp0.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp17.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp2.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp22.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-tpacpuccomp7.localdomain.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/vnf-72de9c8f-94c3-4a36-874d-baf04aa4eb87.edn\"
\"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/vnf-ac232a12-19e0-4043-ad71-c5bca73dd1fa.edn\")" "(-> \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-0.localdomain.edn\"
                 (st/split #\"\\/\")
                 last
                 (st/replace #\"\\.edn\" \"\"))" "(st/replace  (last (st/split \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-0.localdomain.edn\" #\"\\/\"))  #\"\\.edn\" \"\")" "(last (st/split \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-0.localdomain.edn\" #\"\\/\"))" "(st/split \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/2016101301/host-overcloud-compute-0.localdomain.edn\" #\"\\/\")" "(require '[clojure.string :as st])" "

" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn (concat vnfs hosts))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn (concat vnfs hosts))" "(def vnfs [(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-vnf-eml-1.edn\" \"vnf-72de9c8f-94c3-4a36-874d-baf04aa4eb87\") (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-vnf-eml-2.edn\" \"vnf-ac232a12-19e0-4043-ad71-c5bca73dd1fa\")])" "(def hosts
        [(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-1.edn\" \"host-overcloud-compute-8.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-4.edn\" \"host-overcloud-compute-9.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-5.edn\" \"host-overcloud-compute-1.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-6.edn\" \"host-tpacpuccomp2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-7.edn\" \"host-tpacpuccomp7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-8.edn\" \"host-overcloud-compute-2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-9.edn\" \"host-overcloud-compute-3.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-10.edn\" \"host-overcloud-compute-4.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-11.edn\" \"host-overcloud-compute-0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-12.edn\" \"host-overcloud-compute-10.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-13.edn\" \"host-overcloud-compute-12.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-14.edn\" \"host-overcloud-compute-6.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-15.edn\" \"host-overcloud-compute-7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-16.edn\" \"host-overcloud-compute-11.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-17.edn\" \"host-tpacpuccomp22.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-18.edn\" \"host-overcloud-compute-5.localdomain\")])

" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(def hosts
        [(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-1.edn\" \"host-overcloud-compute-8.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-4.edn\" \"host-overcloud-compute-9.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-5.edn\" \"host-overcloud-compute-1.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-6.edn\" \"host-tpacpuccomp2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-7.edn\" \"host-tpacpuccomp7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-8.edn\" \"host-overcloud-compute-2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-9.edn\" \"host-overcloud-compute-3.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-10.edn\" \"host-overcloud-compute-4.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-11.edn\" \"host-overcloud-compute-0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-12.edn\" \"host-overcloud-compute-10.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-13.edn\" \"host-overcloud-compute-12.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-14.edn\" \"host-overcloud-compute-6.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-15.edn\" \"host-overcloud-compute-7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-16.edn\" \"host-overcloud-compute-11.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-17.edn\" \"host-tpacpuccomp22.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-18.edn\" \"host-overcloud-compute-5.localdomain\")])

" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(go \"vcp\")" "(tr [:inventory :site-table :headers] \"Name\")" "(tr [:inventory :site-table :headers \"Name\"] \"Name\")" "
" "(config-store-value)" "(tr [:inventory :site-table :headers ] \"Name\")" "(tr [:inventory :site-table :headers ] \"\")" "(tr [:inventory :site-table :headers ] \"Name\")" "(tr [:inventory :site-table :headers ] \"ADS\")" "(tr [:inventory :site-table :headers ] )" "(tr [:inventory :site-table :headers \"Name\"] )" "(tr [:inventory :site-table :headers \"Name\"] \"Name\")" "(tr [:inventory :site-table :headers] \"Name\")" "(tr [:inventory :site-table :headers] \"Nameasdasd\")" "(tr [:inventory :site-table :headers] \"Name\")" "(cljs-repl)" "(go)" "(stop)" "(go)" "(stop)" "(go)" "(stop)" "(vals {\"asd\" {:b :c}})" "(merge {\"asd\" {:b :c}} {\"asd\" {:b :d}})" "(merge {:a {:b :c}} {:a {:b :d}})" "merge-in" "(partition-all 2 [1 2 3 4 5])" "(partition 2 [1 2 3 4 5])" "(partition 2 [1 2 3 4])" "(go)" "(in-ns 'user)" "(go)" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn (concat vnfs hosts))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def hosts
        [(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-1.edn\" \"host-overcloud-compute-8.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-4.edn\" \"host-overcloud-compute-9.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-5.edn\" \"host-overcloud-compute-1.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-6.edn\" \"host-tpacpuccomp2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-7.edn\" \"host-tpacpuccomp7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-8.edn\" \"host-overcloud-compute-2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-9.edn\" \"host-overcloud-compute-3.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-10.edn\" \"host-overcloud-compute-4.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-11.edn\" \"host-overcloud-compute-0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-12.edn\" \"host-overcloud-compute-10.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-13.edn\" \"host-overcloud-compute-12.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-14.edn\" \"host-overcloud-compute-6.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-15.edn\" \"host-overcloud-compute-7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-16.edn\" \"host-overcloud-compute-11.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-17.edn\" \"host-tpacpuccomp22.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-18.edn\" \"host-overcloud-compute-5.localdomain\")])

" "(def vnfs [(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-vnf-eml-1.edn\" \"vnf-72de9c8f-94c3-4a36-874d-baf04aa4eb87\") (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-vnf-eml-2.edn\" \"vnf-ac232a12-19e0-4043-ad71-c5bca73dd1fa\")])" "'(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-vnf-eml-1.edn\" \"vnf-72de9c8f-94c3-4a36-874d-baf04aa4eb87\")
" "'(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-vnf-eml-2.edn\" \"vnf-ac232a12-19e0-4043-ad71-c5bca73dd1fa\")" "(def hosts
        [(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-1.edn\" \"host-overcloud-compute-8.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-4.edn\" \"host-overcloud-compute-9.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-5.edn\" \"host-overcloud-compute-1.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-6.edn\" \"host-tpacpuccomp2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-7.edn\" \"host-tpacpuccomp7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-8.edn\" \"host-overcloud-compute-2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-9.edn\" \"host-overcloud-compute-3.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-10.edn\" \"host-overcloud-compute-4.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-11.edn\" \"host-overcloud-compute-0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-12.edn\" \"host-overcloud-compute-10.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-13.edn\" \"host-overcloud-compute-12.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-14.edn\" \"host-overcloud-compute-6.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-15.edn\" \"host-overcloud-compute-7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-16.edn\" \"host-overcloud-compute-11.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-17.edn\" \"host-tpacpuccomp22.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-18.edn\" \"host-overcloud-compute-5.localdomain\")])

" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(def hosts
        [(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-1.edn\" \"host-overcloud-compute-8.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-4.edn\" \"host-overcloud-compute-9.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-5.edn\" \"host-overcloud-compute-1.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-6.edn\" \"host-tpacpuccomp2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-7.edn\" \"host-tpacpuccomp7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-8.edn\" \"host-overcloud-compute-2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-9.edn\" \"host-overcloud-compute-3.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-10.edn\" \"host-overcloud-compute-4.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-11.edn\" \"host-overcloud-compute-0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-12.edn\" \"host-overcloud-compute-10.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-13.edn\" \"host-overcloud-compute-12.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-14.edn\" \"host-overcloud-compute-6.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-15.edn\" \"host-overcloud-compute-7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-16.edn\" \"host-overcloud-compute-11.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-17.edn\" \"host-tpacpuccomp22.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-18.edn\" \"host-overcloud-compute-5.localdomain\")])

" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(go \"vcp\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn (concat [vnf vnf2] hosts))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def hosts
        [(vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-1.edn\" \"host-overcloud-compute-8.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-4.edn\" \"host-overcloud-compute-9.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-5.edn\" \"host-overcloud-compute-1.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-6.edn\" \"host-tpacpuccomp2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-7.edn\" \"host-tpacpuccomp7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-8.edn\" \"host-overcloud-compute-2.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-9.edn\" \"host-overcloud-compute-3.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-10.edn\" \"host-overcloud-compute-4.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-11.edn\" \"host-overcloud-compute-0.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-12.edn\" \"host-overcloud-compute-10.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-13.edn\" \"host-overcloud-compute-12.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-14.edn\" \"host-overcloud-compute-6.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-15.edn\" \"host-overcloud-compute-7.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-16.edn\" \"host-overcloud-compute-11.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-17.edn\" \"host-tpacpuccomp22.localdomain\")
         (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-18.edn\" \"host-overcloud-compute-5.localdomain\")])

" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-1.edn\" \"host-overcloud-compute-8.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-4.edn\" \"host-overcloud-compute-9.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-5.edn\" \"host-overcloud-compute-1.localdomain\"))
(def host6 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-6.edn\" \"host-tpacpuccomp2.localdomain\"))
(def host7 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-7.edn\" \"host-tpacpuccomp7.localdomain\"))
(def host8 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-8.edn\" \"host-overcloud-compute-2.localdomain\"))
(def host9 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-9.edn\" \"host-overcloud-compute-3.localdomain\"))
(def host10 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-10.edn\" \"host-overcloud-compute-4.localdomain\"))
(def host11 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-11.edn\" \"host-overcloud-compute-0.localdomain\"))
(def host12 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-12.edn\" \"host-overcloud-compute-10.localdomain\"))
(def host13 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-13.edn\" \"host-overcloud-compute-12.localdomain\"))
(def host14 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-14.edn\" \"host-overcloud-compute-6.localdomain\"))
(def host15 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-15.edn\" \"host-overcloud-compute-7.localdomain\"))
(def host16 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-16.edn\" \"host-overcloud-compute-11.localdomain\"))
(def host17 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-17.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host18 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-host-eml-18.edn\" \"host-overcloud-compute-5.localdomain\"))

" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf vnf2])" "(def vnf2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-vnf-eml-2.edn\" \"vnf-ac232a12-19e0-4043-ad71-c5bca73dd1fa\"))" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161013/openstack-vnf-eml-1.edn\" \"vnf-72de9c8f-94c3-4a36-874d-baf04aa4eb87\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf2])" "(def vnf2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161012/openstack-vnf-eml-2.edn\" \"vnf-ac232a12-19e0-4043-ad71-c5bca73dd1fa\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf2])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf2])" "(def vnf2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161012/openstack-vnf-eml-1.edn\" \"vnf-ac232a12-19e0-4043-ad71-c5bca73dd1fa\"))
" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161012/openstack-vnf-eml-1.edn\" \"vnf-72de9c8f-94c3-4a36-874d-baf04aa4eb87\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(:main-collection started-solr-conn)" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-1.edn\" \"host-tpacpuccomp7.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-2.edn\" \"host-tpacpuccomp0.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-3.edn\" \"host-tpacpuccomp17.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-4.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161006/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(r)" "(:main-collection started-solr-conn)" "(defn u [e] (cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}]) (cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit e) :operation \"set\"}]))" "(require '[cenx.nova.serialize :as n])" "(defn u [e] (cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}]) (cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit e) :operation \"set\"}]))" "(require :reload '[cenx.corona.connection :as cn] '[cenx.corona.collection :as cl] '[com.palletops.leaven :as leaven])" "(defn u [e] (cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}]) (cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit e) :operation \"set\"}]))" "(defn r [] (cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\"))" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :local} {:all true})" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(go \"vcp\")" "(= 1 1)" "
" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(require '[cenx.corona.type :as ct])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(go \"vcp\")" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(go)" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(u {:doo 1})" "(u {:doo \"asd\"})" "(u {:doo 1})" "(r)" "(defn u [e] (cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}]) (cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit e) :operation \"set\"}]))" "(u {:entity-id \"vnfc-c7f40975-3cbc-4bc4-9bfb-2cb8a462e498\"})" "(r)" "(u {:entity-id \"vnfc-c7f40975-3cbc-4bc4-9bfb-2cb8a462e498\"})" "(r)" "(u (dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph :display-data :alias :display-name :entity-type ))" "(r)" "(dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph :display-data :alias :display-name :entity-type )" "(dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph :display-data :alias :display-name :entity-type :entity-id)" "(u  (dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph :display-data :alias :display-name :entity-type :entity-id))" "(r)" "(u  (dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph :display-data :alias :display-name :entity-type :entity-id))" "(u  (dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph :display-data :alias))" "(r)" "(u  (dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph :display-data :alias))" "(u  (dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph :display-data))" "(r)" "(u  (dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph :display-data))" "(u  (dissoc (get (:entities vnf) (-> vnf :entities keys first)) :analytics-graph))" "(r)" "(clojure.pprint/pprint (get (:entities vnf) (-> vnf :entities keys first)))" "(first (:entities vnf))" "(u (first (:entities vnf)))" "(r)" "(u (first (:entities vnf)))" "(u {(ffirst (:entities vnf)) (last (first (:entities vnf)))})" "(r)" "(u {(ffirst (:entities vnf)) (last (first (:entities vnf)))})" "{(ffirst (:entities vnf)) (last (first (:entities vnf)))}" "(first (:entities vnf))" "(reduce conj {} (first (:entities vnf)))" "(into {} (first (:entities vnf)))" "(first (:entities vnf))" "(into {} (first (:entities vnf)))" "(apply hashmap (first (:entities vnf)))" "(hashmap (first (:entities vnf)))" "(first (:entities vnf))" "(get (:entities vnf) (-> vnf :entities keys first))" "(clojure.pprint/pprint (get (:entities vnf) (-> vnf :entities keys first)))" "(get (:entities vnf) (-> vnf :entities keys first))" "(u (get (:entities vnf) (-> vnf :entities keys first)))" "(r)" "(u (get (:entities vnf) (-> vnf :entities keys first)))" "(u (:entities vnf))" "(r)" "(u {:foo {\"asdada\" 3} :bar {\"asd\" {1 2}}})" "(r)" "(-> vnf :entities clojure.pprint/pprint)" "(->> vnf :entities vals (map #(vals %)))" "(->> vnf :entities vals (map #(empty? (vals %))))" "(->> vnf :entities (map (fn [[k v]] (map empty? (vals v)))))" "(u {:foo {\"asdada\" 3} :bar {\"asd\" 1}})" "(u {:foo {\"asdada\" } :bar {\"asd\" 1}})" "(r)" "(u {:foo {} :bar {}})" "(r)" "(u {:foo {1 2} :bar {1 2}})" "(r)" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity {\"foo\" {:a 1}}}])" "(r)" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity {}}])" "(r)" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(uu {:foo {} :bar {}})" "(r)" "(defn uu [e] (cl/add! (:main-collection started-solr-conn) [{:id 2 :entity e}]))" "(u {:foo {} :bar {}})" "(u {\"fuck\" 1 \"you\" 1})" "(r)" "(u {\"fuck\" 1 \"you\" 1})" "(r)" "(u {\"fuck\" {} \"you\" {}})" "(r)" "(u entities)" "(r)" "(u entities)" "(def entities (into {} (map (fn [[k v]] [(keyword k) (apply dissoc v (keys v))]) (:entities vnf))))" "entities" "(u entities)" "(r)" "(def entities (into {} (map (fn [[k v]] [k (apply dissoc v (keys v))]) (:entities vnf))))" "(u entities)" "(r)" "(def entities (into {} (map (fn [[k v]] [k (dissoc v :display-data :analytics-graph)]) (:entities vnf))))" "(u entities)" "(r)" "(= (keys entities) (keys  (:entities vnf)))" "(= (keys entities) (:entities vnf))" "(keys entities)" "(type entities)" "(def entities (into {} (map (fn [[k v]] [k (dissoc v :display-data)]) (:entities vnf))))" "(type (:entities vnf))" "(type entities)" "(-> entities first)" "(def entities (map (fn [[k v]] (update-in v [k] #(dissoc % :display-data))) (:entities vnf)))" "(-> entities first last)" "(-> vnf :entities first last)" "(-> vnf :entities first last keys)" "(-> entities first last keys)" "(u entities)" "(r)" "rt" "(defn u [e] (cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}]) (cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit e) :operation \"set\"}]))" "(defn r [] (cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\"))" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit (:entities vnf)) :operation \"set\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(-> entities first last)" "(def entities (apply merge (map (fn [[k v]] {k (update-in v [k] #(dissoc % :display-data))}) (:entities vnf))))" "(-> entities first last)" "(-> entities ffirst)" "(keys (:entities vnf))" "(keys entities)" "(clojure.data/diff entities (:entities vnf))" "(= entities (:entities vnf))" "(= entities (:entities bvnf))" "(clojure.pprint/pprint entities)" "(clojure.pprint entities)" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit entities) :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit (->> vnf :entities (mapv #(dissoc % :display-data)))) :operation \"set\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "entities" "(def entities (apply merge (map (fn [[k v]] {k (update-in v [k] #(dissoc % :display-data))}) (:entities vnf))))" "entities" "(def entities (apply merge (map (fn [[k v]] (update-in v [k] #(dissoc % :display-data))) (:entities vnf))))" "(def entities (apply merge (map (fn [[k v]] (update-in [v] #(dissoc % :display-data))) (:entities vnf))))" "entities" "(def entities (map #(update-in % [(first %)] (fn [e] (dissoc e :display-data))) (:entities vnf)))" "entities" "(def entities (map #(update-in % (fn [e] (dissoc e :display-data))) (:entities vnf)))" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit (->> vnf :entities (mapv #(dissoc % :display-data)))) :operation \"set\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(-> vnf :entities )" "(-> vng :entities count)" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit [[[{:a 1}]]]) :operation \"set\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit {:a 1}) :operation \"set\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit {:a 1}) :operation \"set\"}])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "
" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit (-> vnf :entities)) :operation \"set\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities\" :value (#'n/as-not-indexed-transit (-> vnf :entities)) :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (#'n/as-not-indexed-transit (-> vnf :entities)) :operation \"set\"}])" "(#'n/as-not-indexed-transit (-> vnf :entities ))" "(= (-> vnf :entities ))" "(= (-> vnf :entities #'n/as-not-indexed-transit))" "(= (-> vnf :entities #'n/as-not-indexed-transit) (-> vnf :entities ct/as-not-indexed-json))" "#'n/as-not-indexed-transit" "#`n/as-not-indexed-transit" "n/as-not-indexed-transit" "'#n/as-not-indexed-transit" "(= (-> vnf :entities '#n/as-not-indexed-transit) (-> vnf :entities ct/as-not-indexed-json))" "(= (-> vnf :entities #'n/as-not-indexed-transit) (-> vnf :entities ct/as-not-indexed-json))" "(= (-> vnf :entities n/as-not-indexed-transit) (-> vnf :entities ct/as-not-indexed-json))" "(require '[cenx.corona.type :as ct])" "(require '[cenx.nova.serialize :as n])" "(-> vnf count)" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (ct/->NotIndexedPolySerializable :transit  [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}]) :operation \"set\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entities [\"Host\"]}])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_nist\" :value (ct/->NotIndexedPolySerializable :transit  [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}]) :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities\" :value (ct/->NotIndexedPolySerializable :transit  [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}]) :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_dist\" :value (ct/->NotIndexedPolySerializable :transit  [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}]) :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities_dist\" :value [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}] :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities\" :value [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}] :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities\" :value (ct/->NotIndexedPolySerializable :transit  [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}]) :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities\" :value [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}] :operation \"set\"}])" "(ct/->NotIndexedPolySerializable :transit  [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities\" :value [1 2 3 4] :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities\" :value (ct/->NotIndexedPolySerializable :transit  [{\"E1\" {:foo 1}} {\"E2\" {:foo 2}}]) :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entities\" :value [1 2 3] :operation \"set\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entities [\"Host\"]}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity \"Host\"}])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"entity\" :value toast2 :operation \"set\"}])" "(cl/update! (:main-collection started-solr-conn) [{:id 2 :field \"toast\" :value toast2 :operation \"set\"}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity toast1}])" "(def toast1 (ct/->NotIndexedPolySerializable :transit {:foo [1 2 3]}))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entity toast1}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :host toast1}])" "(:main-collection started-solr-conn)" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :entities toast1}])" "(cl/add! (:main-collection started-solr-conn) [{:id 2 :toast toast1}])" "(def toast1 (ct/->NotIndexedPolySerializable :transit [1 2 3]))
(def toast2 (ct/->NotIndexedPolySerializable :transit [4 5 6]))
" "started-solr-conn" "(require :reload '[cenx.corona.type :as ct])" "(require :reload '[cenx.corona.connection :as cn] '[cenx.corona.collection :as cl] '[com.palletops.leaven :as leaven])" "vcp/root-ids" "vcp" "(require :reload '[cenx.corona.connection :as cn] '[cenx.corona.collection :as cl] '[com.palletops.leaven :as leaven])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(:main-collection started-solr-conn)" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(go \"vcp\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5 vnf])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1])" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(go \"vcp\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(-> host5 :entities count)" "(-> host4 :entities count)" "(-> host3 :entities count)" "(-> host2 :entities count)" "(-> host1 :entities count)" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host1 host2 host3 host4 host5])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(go \"vcp\")" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :local} {:all true})" "(start-build! \"vcp\" {:solr :local} {:all true})" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "p" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "p" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :local} {:all true})" "(go \"vcp\")" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.core/start-build! \"vcp\" {:solr :local} {:all true})" "(start-build! \"vcp\" {:solr :local} {:all true})" "(in-ns 'user)" "(root-ids)" "(go \"vcp\")" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(:main-collection started-solr-conn)" "(:main-collection system-solr-conn)" "(go \"vcp\")" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(go \"vcp\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(-> host1 :entities first)" "(-> host1 :entities type)" "(-> host1 keys)" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(go \"vcp\")" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(-> host1 :entities)" "(clojure.pprint/pprint host1)" "(clojure.pprint/pprint vnf)" "vnf" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "
(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))
" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf host1 host2 host3 host4 host5])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "
" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "
" "(cenx.parker.build.build-target/push-paths! (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)) [vnf host1 host2 host3 host4 host5])" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.parker.build.build-target/push-paths! (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)) [vnf host1 host2 host3 host4 host5])" "(.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local))" "(cenx.parker.build.build-target/push-paths! local-solr-conn [vnf host1 host2 host3 host4 host5])" "(cenx.parker.build.build-target/push-paths! [vnf host1 host2 host3 host4 host5] local-solr-conn)" "(cenx.parker.build.build-target/push-paths! local-solr-conn [vnf host1 host2 host3 host4 host5])" "local-solr-conn" "(cenx.parker.build.build-target/push-paths! local-solr-conn [vnf host1 host2 host3 host4 host5])" "(def local-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "local-solr-conn" "(cenx.parker.build.build-target/push-paths! local-solr-conn [vnf host1 host2 host3 host4 host5])" "(cenx.parker.build.build-target/push-paths! (.start local-solr-conn) [vnf host1 host2 host3 host4 host5])" "(cenx.parker.build.build-target/push-paths! (.start local-solr-conn) )" "(cenx.parker.build.build-target/push-paths! (.start local-solr-conn) [vnf host1 host2 host3 host4 host5])" "(cenx.parker.build.build-target/push-paths! local-solr-conn [vnf host1 host2 host3 host4 host5])" "host5" "host4" "host3" "host2" "host1" "vnf" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "local-solr-conn" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))
(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20161005/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(def local-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(go \"vcp\")" "(go)" "(get-root-entity #{
                {:entity-id \"host-tpacpuccomp2.localdomain\"
                 :contents #{\"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"}
                }
                {:entity-id \"site-tampa\"
                 :contents #{\"host-tpacpuccomp2.localdomain\"}
                }
                {:entity-id \"vm-75cdc5ea-9cc1-499e-becb-2193d0eb3875\"
                 :contents #{\"vnfc-75cdc5ea-9cc1-499e-becb-2193d0eb3875\" \"port-f98c2101-6829-4261-b2c4-0eb32bf556db\" \"port-202095e3-234d-40c6-abcd-e107bfec66d5\"}
                }
                {:entity-id \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"
                 :contents #{\"vm-75cdc5ea-9cc1-499e-becb-2193d0eb3875\"}
                }
                          })" "(get-root-entity #{
                {:entity-id \"host-tpacpuccomp16.localdomain\"
                 :contents #{\"vm-1c4cc4de-54a1-447e-8b32-9c96731bc14f\"}
                }
                {:entity-id \"host-tpacpuccomp18.localdomain\"
                 :contents #{\"vm-c7f40975-3cbc-4bc4-9bfb-2cb8a462e498\"}
                }
                {:entity-id \"host-tpacpuccomp2.localdomain\"
                 :contents #{\"vm-75cdc5ea-9cc1-499e-becb-2193d0eb3875\"}
                }
                {:entity-id \"host-tpacpuccomp20.localdomain\"
                 :contents #{\"vm-111f34e7-2d07-4a2e-9856-7ef171468d71\"}
                }
                {:entity-id \"host-tpacpuccomp22.localdomain\"
                 :contents #{\"vm-518e6e95-71fd-4ec0-b076-9f33c0f40ac9\"}
                }
                {:entity-id \"site-tampa\"
                 :contents #{\"host-tpacpuccomp20.localdomain\" \"host-tpacpuccomp2.localdomain\" \"host-tpacpuccomp18.localdomain\" \"host-tpacpuccomp22.localdomain\" \"host-tpacpuccomp16.localdomain\"}
                }
                {:entity-id \"vm-111f34e7-2d07-4a2e-9856-7ef171468d71\"
                 :contents #{\"vnfc-111f34e7-2d07-4a2e-9856-7ef171468d71\" \"port-d68072be-6f29-406f-a35f-e226165a77a0\" \"port-8576551a-8327-4293-a8ff-4e41faf95b44\"}
                }
                {:entity-id \"vm-1c4cc4de-54a1-447e-8b32-9c96731bc14f\"
                 :contents #{\"vnfc-1c4cc4de-54a1-447e-8b32-9c96731bc14f\" \"port-50aef819-4f3e-4def-8fd3-0b0ce531bc2e\" \"port-4f6312ac-ceb5-421d-8f3e-18b85b6c08ac\"}
                }
                {:entity-id \"vm-518e6e95-71fd-4ec0-b076-9f33c0f40ac9\"
                 :contents #{\"vnfc-518e6e95-71fd-4ec0-b076-9f33c0f40ac9\" \"port-a2612f64-4285-4291-b594-1cb6c4eb7c60\" \"port-389b20cf-8209-4773-a8f7-2eca99fd88cf\"}
                }
                {:entity-id \"vm-75cdc5ea-9cc1-499e-becb-2193d0eb3875\"
                 :contents #{\"vnfc-75cdc5ea-9cc1-499e-becb-2193d0eb3875\" \"port-f98c2101-6829-4261-b2c4-0eb32bf556db\" \"port-202095e3-234d-40c6-abcd-e107bfec66d5\"}
                }
                {:entity-id \"vm-c7f40975-3cbc-4bc4-9bfb-2cb8a462e498\"
                 :contents #{\"vnfc-c7f40975-3cbc-4bc4-9bfb-2cb8a462e498\" \"port-b0cb0434-7486-4787-9913-35fbc4c51c1d\" \"port-ff7c9369-4f7e-47d7-8592-b6ce64595e36\"}
                }
                {:entity-id \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"
                 :contents #{\"site-tampa\"}
                }
        })" "(defn- get-root-entity
  \"Does a set difference between all contents and containers, in order
  to find the entity which isn't contained by anything.\"
  [containers]
  (let [ids (set (map :entity-id containers))
        contents (set (mapcat :contents containers))]
    (clojure.set/difference ids contents)))" "(get-root-entity #{
                {:entity-id \"host-tpacpuccomp16.localdomain\"
                 :contents #{\"vm-1c4cc4de-54a1-447e-8b32-9c96731bc14f\"}
                }
                {:entity-id \"host-tpacpuccomp18.localdomain\"
                 :contents #{\"vm-c7f40975-3cbc-4bc4-9bfb-2cb8a462e498\"}
                }
                {:entity-id \"host-tpacpuccomp2.localdomain\"
                 :contents #{\"vm-75cdc5ea-9cc1-499e-becb-2193d0eb3875\"}
                }
                {:entity-id \"host-tpacpuccomp20.localdomain\"
                 :contents #{\"vm-111f34e7-2d07-4a2e-9856-7ef171468d71\"}
                }
                {:entity-id \"host-tpacpuccomp22.localdomain\"
                 :contents #{\"vm-518e6e95-71fd-4ec0-b076-9f33c0f40ac9\"}
                }
                {:entity-id \"site-tampa\"
                 :contents #{\"host-tpacpuccomp20.localdomain\" \"host-tpacpuccomp2.localdomain\" \"host-tpacpuccomp18.localdomain\" \"host-tpacpuccomp22.localdomain\" \"host-tpacpuccomp16.localdomain\"}
                }
                {:entity-id \"vm-111f34e7-2d07-4a2e-9856-7ef171468d71\"
                 :contents #{\"vnfc-111f34e7-2d07-4a2e-9856-7ef171468d71\" \"port-d68072be-6f29-406f-a35f-e226165a77a0\" \"port-8576551a-8327-4293-a8ff-4e41faf95b44\"}
                }
                {:entity-id \"vm-1c4cc4de-54a1-447e-8b32-9c96731bc14f\"
                 :contents #{\"vnfc-1c4cc4de-54a1-447e-8b32-9c96731bc14f\" \"port-50aef819-4f3e-4def-8fd3-0b0ce531bc2e\" \"port-4f6312ac-ceb5-421d-8f3e-18b85b6c08ac\"}
                }
                {:entity-id \"vm-518e6e95-71fd-4ec0-b076-9f33c0f40ac9\"
                 :contents #{\"vnfc-518e6e95-71fd-4ec0-b076-9f33c0f40ac9\" \"port-a2612f64-4285-4291-b594-1cb6c4eb7c60\" \"port-389b20cf-8209-4773-a8f7-2eca99fd88cf\"}
                }
                {:entity-id \"vm-75cdc5ea-9cc1-499e-becb-2193d0eb3875\"
                 :contents #{\"vnfc-75cdc5ea-9cc1-499e-becb-2193d0eb3875\" \"port-f98c2101-6829-4261-b2c4-0eb32bf556db\" \"port-202095e3-234d-40c6-abcd-e107bfec66d5\"}
                }
                {:entity-id \"vm-c7f40975-3cbc-4bc4-9bfb-2cb8a462e498\"
                 :contents #{\"vnfc-c7f40975-3cbc-4bc4-9bfb-2cb8a462e498\" \"port-b0cb0434-7486-4787-9913-35fbc4c51c1d\" \"port-ff7c9369-4f7e-47d7-8592-b6ce64595e36\"}
                }
                {:entity-id \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"
                 :contents #{\"site-tampa\"}
                }
        })" "(defn- get-root-entity
  \"Does a set difference between all contents and containers, in order
  to find the entity which isn't contained by anything.\"
  [containers]
  (let [ids (set (map :entity-id containers))
        contents (set (mapcat :contents containers))]
    (clojure.set/difference contents ids)))" "(cenx.parker.build.build-target/push-paths!
       system-solr-conn
[vnf host1 host2 host3 host4 host5])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection system-solr-conn)) \"*:*\")" "(:main-collection system-solr-conn)" "(def system-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :test)))" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "(:main-collection local-solr-conn)" "(def local-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(:main-collection local-solr-conn)" "(:main-collection started-solr-conn)" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(int (let [width 225
                 padding 20
                 port-count 4
                 port-width 20]
             (+  (/ (- (- width
                          (* padding 2)
                          (* 20 port-count))
                       (* (- port-count 2)
                          port-width)) (dec port-count)) port-width)))" "(let [width 225
      padding 20
      port-count 4
      port-width 20]
        (+  (/ (- (- width
                      (* padding 2)
                      (* 20 port-count))
                   (* (- port-count 2)
                      port-width)) (dec port-count)) port-width))" "(+ 165 40 40)" "(let [width 225
      padding 20
      port-count 4
      port-width 20]
        (+  (- (- width
                  (* padding 2)
                  (* 20 port-count))
               (* (- port-count 2)
                  port-width)) port-width))" "(let [width 225
      padding 20
      port-count 2
      port-width 20]
        (+  (- (- width
                  (* padding 2)
                  (* 20 port-count))
               (* (- port-count 2)
                  port-width)) port-width))" "(let [width 225
      padding 20
      port-count 2
      port-width 20]
  (- (- width
        (* padding 2)
        (* 20 port-count))
     (* (- port-count 2)
        port-width)))" "(max 1 2)" "(map (fn [r t] (prn r t)) [1 2 3] [4 5 6])" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160928/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[host1 host2 host3 host4 host5])" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
       [vnf])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
       [vnf])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[vnf host1 host2 host3 host4 host5])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection local-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
[host1 host2 host3 host4 host5])" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host1 host2 host3 host4 host5])" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-1.edn\" \"site-tampa\"))
(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-2.edn\" \"site-tampa\"))
(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-3.edn\" \"site-tampa\"))
(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-4.edn\" \"site-tampa\"))
(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-host-eml-5.edn\" \"site-tampa\"))" "(cenx.parker.build.build-target/push-paths!
       local-solr-conn
       [vnf])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160927/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(def local-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :local)))" "(def local-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :test)))" "(go \"vcp\")" "(go)" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))" "(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))" "(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/20160923/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))" "(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))" "(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf host1 host2 host3 host4 host5])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf host1 host2 host3 host4 host5])" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host])" "(def host (vcp/->eml [\"compute02\" :host]))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host])" "(def host (vcp/->eml [\"compute01\" :host]))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))" "(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))" "(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))" "(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(->> vnf :entities vals (map :alias))" "vnf" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf host1 host2 host3 host4 host5])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-vnf-eml.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(def host5 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-5.edn\" \"host-tpacpuccomp2.localdomain\"))" "(def host4 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-4.edn\" \"host-tpacpuccomp16.localdomain\"))" "(def host3 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-3.edn\" \"host-tpacpuccomp22.localdomain\"))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-2.edn\" \"host-tpacpuccomp20.localdomain\"))" "(def host1 (vcp/test-vnf-eml \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/parker/openstack-host-eml-1.edn\" \"host-tpacpuccomp18.localdomain\"))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(:main-collection started-solr-conn)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :test)))" "(go \"vcp\")" "(some #{1 2} [3])" "(some #{1 2} [1 2])" "(go)" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(-> host2 :entities type)" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(-> host2 :entities type)" "(-> host2 :entities vals first :alias)" "(-> host :entities vals first :alias)" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(keys host2)" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(->> host2 :entities first)" "(->> host2 :entities count)" "(->> host2 :entities vals (#(nth % 2)) ppp)" "(->> host2 :entities vals (#(nth % 2)) pp1)" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(ppp host)" "(def ppp clojure.pprint/pprint)" "pp" "(def pp clojure.pprint/pprint)" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host])" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :test)))" "(def host (vcp/->eml [\"compute01\" :host]))" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(go \"vcp\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host])" "(->> host2 :entities vals (#(nth % 2)) pp1)" "(->> host2 :entities vals (nth 2) pp1)" "(->> host :entities vals first pp1)" "(->> host2 :entities vals first pp1)" "(def pp1 clojure.pprint/pprint)" "(def pp1 )" "(->> host2 :entities vals first pp)" "(->> host2 :entities vals first)" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host])" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
host2)" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host32])" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "host" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(->> host2 :entities vals (map :entity-type) distinct)" "(->> host :entities vals (map :entity-type) distinct)" "(->> host :entities vals (map :entity-type))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(->> host2 :entities vals (map :entity-type))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(->> host2 :entities vals (map :entity-type))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(->> host2 :entities vals (map :entity-type))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(->> host2 :entities vals (map :entity-type))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(->> host2 :entities vals (map :entity-type))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(->> host2 :entities vals (map :entity-type))" "(->> host2 :entities count)" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(->> host2 :entities count)" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(->> host2 :entities count)" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(update-in host2 [:entities] #(map (fn [e] e) %))" "(->> host2 :entities count)" "(->> host2 :entities vals )" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(->> host2 :entities )" "(->> host2 :entities vals )" "(->> host2 :entities vals (map :entity-type))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(->> host :entities vals (map :entity-id))" "(->> host2 :entities vals (map :entity-id))" "(->> host :entities vals (map :entity-id))" "(->> host :entities vals (map :entity-type))" "(->> host2 :entities vals (map :entity-type))" "(->> host2 :entities vals (map :entity-tyep))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host])" "(clojure.pprint/pprint host2)" "(clojure.pprint/pprint host)" "(pp host)" "pp" "(def pp clojure.pprint/pprint)" "pp" "(pp host2)" "(def pp clojure.pprint/pprint)" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[host2])" "(-> host2 :graph :root)" "(-> host2 :graph :version)" "(-> host2 :graph keys)" "(keys host2)" "(keys host)" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"host-tpacpuccomp20.localdomain\"))" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"\"host-tpacpuccomp20.localdomain\"\"))" "(-> host2 :entities keys)" "(-> host2 :entities)" "(-> host2 :graph )" "(-> host2 :graph :entities)" "(def host2 (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-host-eml-20160920-01.edn\" \"123\"))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.parker.build.build-target/push-paths! started-solr-conn [host])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [vnf])" "(-> host :entities first)" "(-> vnf :entities first)" "(-> vnf :graph :version)" "(-> host :graph :version)" "(-> vnf :graph keys)" "(-> host :graph keys)" "(-> host keys)" "(def host (vcp/->eml [\"compute01\" :host]))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :test)))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(keys vnf)" "vnf" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :test)))" "(-> vnf :graph :root)" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "vnf" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(type (read-string \"{:a 1}\"))" "(hash-map vnf)" "(type (into vnf {}))" "(into vnf {})" "(assoc-in (into vnf {}) {:a :b} 1)" "(assoc-in vnf {:a :b} 1)" "(type vnf)" "(def vnf (vcp/test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(def vnf (test-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "(def vnf (text-vnf-eml \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\" \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"))" "\"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\"" "\"vnf-27cf534b20ad4c16bda0bc6bedb47e4e\"" "(assoc-in {:a {:b 1}} [:a :c ] 2)" "(-> host :graph :root)" "(->> vnf :entities keys)" "(->> vnf :entities (map :entity-id))" "(-> vnf :graph keys)" "(-> host :graph keys)" "(keys vnf)" "(keys host)" "(def host (vcp/->eml [\"compute01\" :host]))" "(vcp/->eml [\"compute01\" :host])" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(keys vnf)" "(def vnf (read-string (slurp \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\")))" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(:main-collection started-solr-conn)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :test)))" "(go \"vcp\")" "(stop)" "(in-ns 'user)" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(build-path \"vcp\" [\"compute01\" :host])])" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*:*\")" "(cenx.corona.collection/delete-by-query! (.start (:main-collection started-solr-conn)) \"*\")" "(cenx.corona.collection/delete-by-query! started-solr-conn \"*\")" "(cenx.corona.collection/delete-by-query! (:main-collection started-solr-conn) \"*\")" "(:main-collection started-solr-conn)" "(:connection started-solr-conn)" "(:dev-collections started-solr-conn)" "(keys started-solr-conn)" "(:main-collection started-solr-conn)" "started-solr-conn" "(keys started-solr-conn)" "(cenx.corona.collection/delete-by-query! )" "(start-build! \"vcp\" {:solr :test} {:all true})" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(build-path \"vcp\" [\"compute01\" :host])])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(build-path \"vcp\" [\"compute01\" \"host\"])])" "(cenx.parker.build.build-target/push-paths! started-solr-conn (build-path \"vcp\" [\"compute01\" :host]))" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(build-path \"vcp\" [\"compute01\" \"host\"])])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(build-path \"vcp\" [\"compute01\" :host])])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(build-path [\"compute01\" :host] )])" "(cenx.parker.build.build-target/push-paths! started-solr-conn [(build-path [\"compute01\" \"host\"] )])" "(build-path \"vcp\" [\"compute01\" :host] )" "(build-path \"vcp\" \"compute01\")" "(vcp/->eml \"compute01\")" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[(vcp/->eml \"compute01\")])" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[(vcp/->eml [\"compute01\" :host])])" "(vcp/->eml [\"compute01\" :host])" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
(vcp/->eml [\"compute01\" :host]))" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[(vcp/->eml [\"compute01\" :host])])" "started-solr-conn" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[(vcp/->eml [\"compute01\" :host])])" "(vcp/->eml [\"compute01\" :host])" "(require '[cenx.parker.strategies.vcp.core :as vcp])" "(start-build! \"vcp\" {:solr :test} {:all true})" "(cenx.parker.build.build-target/push-paths!
started-solr-conn
[vnf])" "(keys vnf)" "(type vnf)" "(first vnf)" "(def started-solr-conn (.start (cenx.parker.build.solr.core/make-solr \"vcp\" :test)))" "vnf" "(type vnf)" "(def vnf (read-string (slurp \"/Users/peyo.tzolov/Downloads/openstack-vnf-eml-20160920-1.edn\")))" "(start-build! \"vcp\" {:solr :test} {:all true})" "(root-ids)" "(= tt gg)" "(def tt (read-string (slurp \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/datastore.edn\")))" "(def gg (simmer/load-repo data-dir))" "(= tt gg)" "(def gg (simmer/load-repo data-dir))" "(def tt (read-string (slurp \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/datastore.edn\")))" "(= tt gg)" "(def gg (simmer/load-repo data-dir))" "(query tt (constantly true)
                  :path [:openstack :host])" "(def tt (read-string (slurp \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/datastore.edn\")))" "(query tt (constantly true)
                  :path [:openstack :host])" "(query (simmer/load-repo data-dir) (constantly true)
                  :path [:openstack :host])" "(root-ids)" "(->> tt :openstack :host :data last pp)" "(->> tt :openstack :host :data first pp)" "(->> tt :openstack :host :data (map :host_name))" "(-> tt :openstack :host :data (map :host_name))" "(-> tt :openstack :host :data count)" "(-> tt :openstack keys)" "(-> tt :openstack)" "(-> tt keys)" "(def tt (read-string (slurp \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/datastore.edn\")))" "(start-build! \"vcp\" {:solr :test} {:all true})" "(-> tt :openstack :server :data first pp)" "(-> tt :openstack :server :data count)" "(-> tt :openstack :server count)" "(-> tt :openstack keys)" "(-> tt :openstack :host :data pp)" "(-> tt :openstack :host :data type)" "(-> tt :openstack :host keys)" "(-> tt :openstack :host type)" "(-> tt :openstack :host keys)" "(-> tt :openstack keys)" "(-> tt :openstack :volume :data pp)" "(-> tt :openstack :volume keys)" "(-> tt :openstack keys)" "(-> tt :openstack :host :data pp)" "(def pp clojure.pprint/pprint)" "(-> tt :openstack :host :data )" "(-> tt :openstack :host :data type)" "(-> tt :openstack :host type)" "(-> tt :openstack :host keys)" "(-> tt :openstack type)" "(-> tt :openstack keys)" "(-> tt :openstack :host clojure.pprint/pprint)" "(-> tt :openstack :host >pprint)" "(-> tt :openstack :host )" "(-> tt :openstack :host :data)" "(-> tt :openstack :host )" "(-> tt :openstack :host count)" "(-> tt :openstack :host)" "(-> tt :openstack keys)" "(keys tt)" "(type tt)" "(def tt (read-string tt))" "(def tt (slurp \"/Users/peyo.tzolov/sandbox/vcp-poc/sample-data/datastore.edn\"))" "(def tt (read-string (slurp \"~/sandbox/vcp-poc/sample-data/datastore.edn\")))" "(start-build! \"vcp\" {:solr :test} {:all true})" "(root-ids)" "(roo-ids)" "(start-build! \"vcp\" {:solr :test} {:all true})" "(start-build! \"vcp\" {:solr :local} {:all true})" "(go \"vcp\")" "
" "(browser-repl)" "(cljs-repl)" "(+ 1 1)" "(generate-popover-content {:display-data [{:label \"FOO\" :value \"BAR\"}]})" "(vectorize-display-data  [{:label \"FOO\" :value {:label \"BAR\" :value \"HELL\"}}])" "(vectorize-display-data  [{:label \"FOO\" :value \"AD\"}])" "(vectorize-display-data  [{:label \"FOO\" :value {:label \"BAR\" :value \"HELL\"}}])" "(vectorize-display-data {:display-data [{:label \"FOO\" :value {:label \"BAR\" :value \"HELL\"}}]})" "(vectorize-display-data {:display-data [{:label \"FOO\" :value \"BAR\"}]})" "(vectorize-display-data {:type :site :display-data [{:label \"FOO\" :value \"BAR\"}]})" "(vectorize-display-data {:entity-type :site :display-data [{:label \"FOO\" :value \"BAR\"}]})" "(vectorize-display-data {:entity-type :site :display-datae [{:label \"FOO\" :value \"BAR\"}]})" "(vectorize-display-data [{:label \"FOO\" :value \"BAR\"}])" "(generate-popover-content [{:label \"FOO\" :value \"BAR\"}])" "(+ 1 1 )" " " "(+ 1 1)" "js/d3" "d3" "(-> (.getElementById js/document  \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e-right-network\")
            $
            .offset)" "(->  (-> (.getElementById js/document
                                                                 (str \"VNFC:vEXGW-SF3-Port2-line\")
                                                                 $)) .offset) " "(-> (.getElementById js/document
                                                            (str \"VNFC:vEXGW-SF3-Port2-line\")
                                            $)) " "(-> (.getElementById js/document
                                            (str \"VNFC:vEXGW-SF3-Port2-line\" \"-port\")
                                            $)) " "\"VNFC:vEXGW-SF3-Port2-line\"" "(-> (.getElementById js/document
                                            (str right-port-id \"-port\")
                                            $)) " "(-> (.getElementById js/document  \"VNFC:vEXGW-SF3-Port2-line\")
            $
            (.css \"top\" 420))" "(-> (.getElementById js/document  \"VNFC:vEXGW-SF3-Port2-line\")
            $
            (.css \"top\"))" "(-> (.getElementById js/document  \"VNFC:vEXGW-SF3-Port2-line\")
            $
            )" "(-> (.getElementById js/document  \"VNFC:vEXGW-SF3-Port2-port\")
            $
            .offset js->clj (get \"top\"))" "(-> (.getElementById js/document  \"VNFC:vEXGW-SF3-Port2-port\")
            $
            .height)" "(-> (.getElementById js/document  \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e-right-network\")
            $
            .offset js->clj)" "(-> (.getElementById js/document  \"vnf-27cf534b20ad4c16bda0bc6bedb47e4e-right-network\")
            $
            .offset)" "(-> (.getElementById js/document  \"VNF:vEXGW-right-network\")
            $
            .offset)" "(-> \"VNF:vEXGW-right-network\")" "($ \"#VNF\\:vEXGW\\-right\\-network\")" "($ \"#VNF:vEXGW-right-network\")" "(.offset (.first ($ \"#VNF:vEXGW-right-network\")))" "(.first ($ \"#VNF:vEXGW-right-network\"))" "(.offset ($ \"#VNF:vEXGW-right-network\"))" "(.first ($ \".vcp-cloud\"))" "(first ($ \".vcp-cloud\"))" "(.length ($ \".vcp-cloud\"))" "(.lenght ($ \".vcp-cloud\"))" "(count ($ \".vcp-cloud\"))" "($ \".vcp-cloud\")" "(.offset ($ \".vcp-cloud\"))" "(.offset ($ \"#VNF:vEXGW-right-network\"))" "(.offset ($ \"VNF:vEXGW-right-network\"))" "($ \"VNF:vEXGW-right-network\")" "(.offset ($ \"i\"))" "($ \"i\")" "($ \"#VNF:vEXGW-right-network\")" "(.offset ($ \"#VNF:vEXGW-right-network\"))" "(.-x (.offset ($ \"#VNF:vEXGW-right-network\")))" "(.offset ($ \"#VNF:vEXGW-right-network\"))" "(.-offset (first ($ \"#VNF:vEXGW-right-network\")))" "(.-offset ($ \"#VNF:vEXGW-right-network\"))" "($ \"#VNF:vEXGW-right-network\")" "$" "(let [[left-port vnfc right-port] '(1 2 3)] right-port)" "(let [[left-port vnfc right-port] [1 2 3]] right-port)" "(let [[left-port vnfc right-port] [1 2 3]] vnfc)" "(let [[left-port vnfc right-port] [1 2 3]] left-port)" "(let [[left-port vnfc right-port] [1 2 3]])" "(find-in :a 1 [{:a 1} {:b 2}])" "(->> tt first :graph :containers (filter #(= (:entity-id root-entity)
                                                        (:entity-id %))))" "(def root-entity (->> tt first :entities vals (filter #(= current-view (:entity-type %))) first))" "root-entity" "(def root-entity (->> tt first :entities vals (filter #(= current-view (:entity-type %)))))" "(def current-view :vnf)" "(def root-entity (->> tt first :entities vals (filter #(= current-view (:entity-type %)))))" "(->> tt first :graph :containers (filter #(= (:entity-id root-entity)
                                                        (:entity-id %)))
contents (->> graph :containers  first)]
)" "(->> tt first :graph :containers)" "(->> tt first :graph)" "(def tt (:vnfs-v2 (cljs.reader/read-string (cljs.reader/read-string resp))))" "(:vnfs-v2 (cljs.reader/read-string (cljs.reader/read-string resp)))" "(cljs.reader/read-string (cljs.reader/read-string resp))" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                         :body)))" "(:vnfs-v2 (cljs.reader/read-string (cljs.reader/read-string resp)))" "(cljs.reader/read-string (cljs.reader/read-string resp))" "(cljs.reader/read-string resp)" "resp" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                         :body)))" "(find-in :a 1 [{:a 1} {:b 2}])" "(+ 1 1)" "(find-in :a 1 [{:a 1} {:b 2}])" "
 " "(->> tt :vnfs-v2 first :graph :containers (filter #(= (:entity-id root-entity) (:entity-id %))) first)" "(->> tt :vnfs-v2 first :graph :containers (filter #(= (:entity-id root-entity) (:entity-id %))))" "(:id root-entity)" "(->> tt :vnfs-v2 first :graph :containers )" "(->> tt :vnfs-v2 first :graph :containers (filter #(= (:id root-entity) (:entity-id %))))" "(->> tt :vnfs-v2 )" "(->> tt :vnfs-v2 :graph )" "(->> tt :vnfs-v2 :graph :containers )" "(->> tt :vnfs-v2 :graph :containers (filter #(= (:id root-entity) (:entity-id %))))" "(->> tt ::vnfs-v2 :graph :containers )" "(->> tt ::vnfs-v2 :graph :containers (filter #(= (:id root-entity) (:entity-id %))))" "(def root-entity {:entity-id \"VNF:vEXGW\"
                                                         :contents #{\"Host1\"
                                                                     \"Host2\"}})" "(def tt {:vnfs [{:graph {:nodes #{\"VNF:vEXGW\"
                                                                         \"Site1\"
                                                                         \"VNFC:vEXGW-SF3\"
                                                                         \"VNFC:vEXGW-SF4\"
                                                                         \"VNFC:vEXGW-SF2\"
                                                                         \"VNFC:vEXGW-SF6\"
                                                                         \"VNFC:vEXGW-CF2\"
                                                                         \"VNFC:vEXGW-SF1\"
                                                                         \"VNFC:vEXGW-SF5\"
                                                                         \"VNFC:vEXGW-CF1\"
                                                                         \"VM1\"
                                                                         \"VM2\"
                                                                         \"VM3\"
                                                                         \"VM4\"
                                                                         \"VM5\"
                                                                         \"VM6\"
                                                                         \"VM7\"
                                                                         \"VM8\"
                                                                         \"VM9\"
                                                                         \"VM10\"
                                                                         \"VM11\"
                                                                         \"VM12\"
                                                                         \"VM13\"
                                                                         \"APP:vEXGW-Controller1\"
                                                                         \"APP:vEXGW-Controller2\"
                                                                         \"Host1\"
                                                                         \"Host2\"}
                                                                :edges #{#{\"Site1\" \"Host1\"}
                                                                         #{\"Site1\" \"Host2\"}
                                                                         #{\"Site1\" \"VNF:vEXGW\"}
                                                                         #{\"VNFC:vEXGW-SF3\" \"VM1\"}
                                                                         #{\"VNFC:vEXGW-SF4\" \"VM2\"}
                                                                         #{\"VNFC:vEXGW-SF2\" \"VM3\"}
                                                                         #{\"VNFC:vEXGW-SF6\" \"VM4\"}
                                                                         #{\"VNFC:vEXGW-CF2\" \"VM5\"}
                                                                         #{\"VNFC:vEXGW-SF1\" \"VM6\"}
                                                                         #{\"VNFC:vEXGW-SF5\" \"VM7\"}
                                                                         #{\"VNFC:vEXGW-CF1\" \"VM8\"}
                                                                         #{\"Host1\" \"VM1\"}
                                                                         #{\"Host1\" \"VM2\"}
                                                                         #{\"Host1\" \"VM3\"}
                                                                         #{\"Host2\" \"VM4\"}
                                                                         #{\"Host2\" \"VM5\"}
                                                                         #{\"Host2\" \"VM6\"}
                                                                         #{\"Host2\" \"VM7\"}
                                                                         #{\"Host2\" \"VM8\"}
                                                                         #{\"Host2\" \"VM9\"}
                                                                         #{\"Host2\" \"VM10\"}
                                                                         #{\"Host2\" \"VM11\"}
                                                                         #{\"Host2\" \"VM12\"}
                                                                         #{\"Host2\" \"VM13\"}
                                                                         #{\"APP:vEXGW-Controller1\" \"VNFC:vEXGW-CF2\"}
                                                                         #{\"APP:vEXGW-Controller2\" \"VNFC:vEXGW-CF1\"}}
                                                                :containers #{}}
                                                        :entities {\"VNF:vEXGW\" {:id \"VNF:vEXGW\"
                                                                                :entity-type :vnf
                                                                                :display-name \"VNF:vEXGW\"}
                                                                   \"VNFC:vEXGW-SF3\" {:id \"VNFC:vEXGW-SF3\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF3\"}
                                                                   \"VNFC:vEXGW-SF4\" {:id \"VNFC:vEXGW-SF4\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF4\"}
                                                                   \"VNFC:vEXGW-SF2\" {:id \"VNFC:vEXGW-SF2\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF2\"}
                                                                   \"VNFC:vEXGW-SF6\" {:id \"VNFC:vEXGW-SF6\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF6\"}
                                                                   \"VNFC:vEXGW-CF2\" {:id \"VNFC:vEXGW-CF2\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-CF2\"}
                                                                   \"VNFC:vEXGW-SF1\" {:id \"VNFC:vEXGW-SF1\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF1\"}
                                                                   \"VNFC:vEXGW-SF5\" {:id \"VNFC:vEXGW-SF5\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF5\"}
                                                                   \"VNFC:vEXGW-CF1\" {:id \"VNFC:vEXGW-CF1\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-CF1\"}
                                                                   \"VM1\" {:id \"VM1\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM1\"}
                                                                   \"VM2\" {:id \"VM2\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM2\"}
                                                                   \"VM3\"  {:id \"VM3\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM3\"}
                                                                   \"VM4\" {:id \"VM4\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM4\"}
                                                                   \"VM5\" {:id \"VM5\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM5\"}
                                                                   \"VM6\" {:id \"VM6\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM6\"}
                                                                   \"VM7\" {:id \"VM7\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM7\"}
                                                                   \"VM8\" {:id \"VM8\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM8\"}
                                                                   \"VM9\" {:id \"VM9\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM9\"}
                                                                   \"VM10\" {:id \"VM10\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM10\"}
                                                                   \"VM11\" {:id \"VM11\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM11\"}
                                                                   \"VM12\" {:id \"VM12\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM12\"}
                                                                   \"VM13\" {:id \"VM13\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM13\"}
                                                                   \"APP:vEXGW-Controller1\" {:id \"APP:vEXGW-Controller1\"
                                                                                            :entity-type :controller
                                                                                            :display-name \"APP:vEXGW-Controller1\"}
                                                                   \"APP:vEXGW-Controller2\" {:id \"APP:vEXGW-Controller2\"
                                                                                            :entity-type :controller
                                                                                            :display-name \"APP:vEXGW-Controller2\"}
                                                                   \"Site1\" {:id \"Site1\"
                                                                            :entity-type :site
                                                                            :display-name \"Site1\"}
                                                                   \"Host1\" {:id \"Host1\"
                                                                            :entity-type :host
                                                                            :display-name \"Host1\"}
                                                                   \"Host2\" {:id \"Host2\"
                                                                            :entity-type :host
                                                                            :display-name \"Host2\"}}}
                                                       {:graph {:nodes #{\"VNF:vEXGW\"
                                                                         \"Site1\"
                                                                         \"VNFC:vEXGW-SF3\"
                                                                         \"VNFC:vEXGW-SF4\"
                                                                         \"VNFC:vEXGW-SF2\"
                                                                         \"VNFC:vEXGW-SF6\"
                                                                         \"VNFC:vEXGW-CF2\"
                                                                         \"VNFC:vEXGW-SF1\"
                                                                         \"VNFC:vEXGW-SF5\"
                                                                         \"VNFC:vEXGW-CF1\"
                                                                         \"VM1\"
                                                                         \"VM2\"
                                                                         \"VM3\"
                                                                         \"VM4\"
                                                                         \"VM5\"
                                                                         \"VM6\"
                                                                         \"VM7\"
                                                                         \"VM8\"
                                                                         \"VM9\"
                                                                         \"VM10\"
                                                                         \"VM11\"
                                                                         \"VM12\"
                                                                         \"VM13\"
                                                                         \"APP:vEXGW-Controller1\"
                                                                         \"APP:vEXGW-Controller2\"
                                                                         \"Host1\"
                                                                         \"Host2\"}
                                                                :edges #{#{\"Site1\" \"Host1\"}
                                                                         #{\"Site1\" \"Host2\"}
                                                                         #{\"Site1\" \"VNF:vEXGW\"}
                                                                         #{\"VNFC:vEXGW-SF3\" \"VM1\"}
                                                                         #{\"VNFC:vEXGW-SF4\" \"VM2\"}
                                                                         #{\"VNFC:vEXGW-SF2\" \"VM3\"}
                                                                         #{\"VNFC:vEXGW-SF6\" \"VM4\"}
                                                                         #{\"VNFC:vEXGW-CF2\" \"VM5\"}
                                                                         #{\"VNFC:vEXGW-SF1\" \"VM6\"}
                                                                         #{\"VNFC:vEXGW-SF5\" \"VM7\"}
                                                                         #{\"VNFC:vEXGW-CF1\" \"VM8\"}
                                                                         #{\"Host1\" \"VM1\"}
                                                                         #{\"Host1\" \"VM2\"}
                                                                         #{\"Host1\" \"VM3\"}
                                                                         #{\"Host2\" \"VM4\"}
                                                                         #{\"Host2\" \"VM5\"}
                                                                         #{\"Host2\" \"VM6\"}
                                                                         #{\"Host2\" \"VM7\"}
                                                                         #{\"Host2\" \"VM8\"}
                                                                         #{\"Host2\" \"VM9\"}
                                                                         #{\"Host2\" \"VM10\"}
                                                                         #{\"Host2\" \"VM11\"}
                                                                         #{\"Host2\" \"VM12\"}
                                                                         #{\"Host2\" \"VM13\"}
                                                                         #{\"APP:vEXGW-Controller1\" \"VNFC:vEXGW-CF2\"}
                                                                         #{\"APP:vEXGW-Controller2\" \"VNFC:vEXGW-CF1\"}}
                                                                :containers #{}}
                                                        :entities {\"VNF:vEXGW\" {:id \"VNF:vEXGW\"
                                                                                :entity-type :vnf
                                                                                :display-name \"VNF:vEXGW\"}
                                                                   \"VNFC:vEXGW-SF3\" {:id \"VNFC:vEXGW-SF3\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF3\"}
                                                                   \"VNFC:vEXGW-SF4\" {:id \"VNFC:vEXGW-SF4\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF4\"}
                                                                   \"VNFC:vEXGW-SF2\" {:id \"VNFC:vEXGW-SF2\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF2\"}
                                                                   \"VNFC:vEXGW-SF6\" {:id \"VNFC:vEXGW-SF6\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF6\"}
                                                                   \"VNFC:vEXGW-CF2\" {:id \"VNFC:vEXGW-CF2\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-CF2\"}
                                                                   \"VNFC:vEXGW-SF1\" {:id \"VNFC:vEXGW-SF1\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF1\"}
                                                                   \"VNFC:vEXGW-SF5\" {:id \"VNFC:vEXGW-SF5\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-SF5\"}
                                                                   \"VNFC:vEXGW-CF1\" {:id \"VNFC:vEXGW-CF1\"
                                                                                     :entity-type :vnfc
                                                                                     :display-name \"VNFC:vEXGW-CF1\"}
                                                                   \"VM1\" {:id \"VM1\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM1\"}
                                                                   \"VM2\" {:id \"VM2\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM2\"}
                                                                   \"VM3\"  {:id \"VM3\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM3\"}
                                                                   \"VM4\" {:id \"VM4\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM4\"}
                                                                   \"VM5\" {:id \"VM5\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM5\"}
                                                                   \"VM6\" {:id \"VM6\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM6\"}
                                                                   \"VM7\" {:id \"VM7\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM7\"}
                                                                   \"VM8\" {:id \"VM8\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM8\"}
                                                                   \"VM9\" {:id \"VM9\"
                                                                          :entity-type :vm
                                                                          :display-name \"VM9\"}
                                                                   \"VM10\" {:id \"VM10\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM10\"}
                                                                   \"VM11\" {:id \"VM11\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM11\"}
                                                                   \"VM12\" {:id \"VM12\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM12\"}
                                                                   \"VM13\" {:id \"VM13\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM13\"}
                                                                   \"APP:vEXGW-Controller1\" {:id \"APP:vEXGW-Controller1\"
                                                                                            :entity-type :controller
                                                                                            :display-name \"APP:vEXGW-Controller1\"}
                                                                   \"APP:vEXGW-Controller2\" {:id \"APP:vEXGW-Controller2\"
                                                                                            :entity-type :controller
                                                                                            :display-name \"APP:vEXGW-Controller2\"}
                                                                   \"Site1\" {:id \"Site1\"
                                                                            :entity-type :site
                                                                            :display-name \"Site1\"}
                                                                   \"Host1\" {:id \"Host1\"
                                                                            :entity-type :host
                                                                            :display-name \"Host1\"}
                                                                   \"Host2\" {:id \"Host2\"
                                                                            :entity-type :host
                                                                            :display-name \"Host2\"}}}]
                                                :hosts [{:graph {:nodes #{\"VNFC:vEXGW-SF3\"
                                                                          \"VNFC:vEXGW-SF4\"
                                                                          \"VNFC:vEXGW-SF2\"
                                                                          \"VNFC:vEXGW-SF6\"
                                                                          \"VNFC:vEXGW-CF2\"
                                                                          \"VNFC:vEXGW-SF1\"
                                                                          \"VNFC:vEXGW-SF5\"
                                                                          \"VNFC:vEXGW-CF1\"
                                                                          \"VM1\"
                                                                          \"VM2\"
                                                                          \"VM3\"
                                                                          \"VM4\"
                                                                          \"VM5\"
                                                                          \"VM6\"
                                                                          \"VM7\"
                                                                          \"VM8\"
                                                                          \"VM9\"
                                                                          \"VM10\"
                                                                          \"VM11\"
                                                                          \"VM12\"
                                                                          \"VM13\"
                                                                          \"Host2\"}
                                                                 :edges #{#{\"VNFC:vEXGW-SF3\" \"VM1\"}
                                                                          #{\"VNFC:vEXGW-SF4\" \"VM2\"}
                                                                          #{\"VNFC:vEXGW-SF2\" \"VM3\"}
                                                                          #{\"VNFC:vEXGW-SF6\" \"VM4\"}
                                                                          #{\"VNFC:vEXGW-CF2\" \"VM5\"}
                                                                          #{\"VNFC:vEXGW-SF1\" \"VM6\"}
                                                                          #{\"VNFC:vEXGW-SF5\" \"VM7\"}
                                                                          #{\"VNFC:vEXGW-CF1\" \"VM8\"}
                                                                          #{\"Host2\" \"VM4\"}
                                                                          #{\"Host2\" \"VM5\"}
                                                                          #{\"Host2\" \"VM6\"}
                                                                          #{\"Host2\" \"VM7\"}
                                                                          #{\"Host2\" \"VM8\"}
                                                                          #{\"Host2\" \"VM9\"}
                                                                          #{\"Host2\" \"VM10\"}
                                                                          #{\"Host2\" \"VM11\"}
                                                                          #{\"Host2\" \"VM12\"}
                                                                          #{\"Host2\" \"VM13\"}}
                                                                 :containers #{}}
                                                         :entities {\"VNFC:vEXGW-SF3\" {:id \"VNFC:vEXGW-SF3\"
                                                                                      :entity-type :vnfc
                                                                                      :display-name \"VNFC:vEXGW-SF3\"}
                                                                    \"VNFC:vEXGW-SF4\" {:id \"VNFC:vEXGW-SF4\"
                                                                                      :entity-type :vnfc
                                                                                      :display-name \"VNFC:vEXGW-SF4\"}
                                                                    \"VNFC:vEXGW-SF2\" {:id \"VNFC:vEXGW-SF2\"
                                                                                      :entity-type :vnfc
                                                                                      :display-name \"VNFC:vEXGW-SF2\"}
                                                                    \"VNFC:vEXGW-SF6\" {:id \"VNFC:vEXGW-SF6\"
                                                                                      :entity-type :vnfc
                                                                                      :display-name \"VNFC:vEXGW-SF6\"}
                                                                    \"VNFC:vEXGW-CF2\" {:id \"VNFC:vEXGW-CF2\"
                                                                                      :entity-type :vnfc
                                                                                      :display-name \"VNFC:vEXGW-CF2\"}
                                                                    \"VNFC:vEXGW-SF1\" {:id \"VNFC:vEXGW-SF1\"
                                                                                      :entity-type :vnfc
                                                                                      :display-name \"VNFC:vEXGW-SF1\"}
                                                                    \"VNFC:vEXGW-SF5\" {:id \"VNFC:vEXGW-SF5\"
                                                                                      :entity-type :vnfc
                                                                                      :display-name \"VNFC:vEXGW-SF5\"}
                                                                    \"VNFC:vEXGW-CF1\" {:id \"VNFC:vEXGW-CF1\"
                                                                                      :entity-type :vnfc
                                                                                      :display-name \"VNFC:vEXGW-CF1\"}
                                                                    \"VM1\" {:id \"VM1\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM1\"}
                                                                    \"VM2\" {:id \"VM2\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM2\"}
                                                                    \"VM3\"  {:id \"VM3\"
                                                                            :entity-type :vm
                                                                            :display-name \"VM3\"}
                                                                    \"VM4\" {:id \"VM4\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM4\"}
                                                                    \"VM5\" {:id \"VM5\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM5\"}
                                                                    \"VM6\" {:id \"VM6\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM6\"}
                                                                    \"VM7\" {:id \"VM7\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM7\"}
                                                                    \"VM8\" {:id \"VM8\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM8\"}
                                                                    \"VM9\" {:id \"VM9\"
                                                                           :entity-type :vm
                                                                           :display-name \"VM9\"}
                                                                    \"VM10\" {:id \"VM10\"
                                                                            :entity-type :vm
                                                                            :display-name \"VM10\"}
                                                                    \"VM11\" {:id \"VM11\"
                                                                            :entity-type :vm
                                                                            :display-name \"VM11\"}
                                                                    \"VM12\" {:id \"VM12\"
                                                                            :entity-type :vm
                                                                            :display-name \"VM12\"}
                                                                    \"VM13\" {:id \"VM13\"
                                                                            :entity-type :vm
                                                                            :display-name \"VM13\"}
                                                                    \"Host2\" {:id \"Host2\"
                                                                             :entity-type :host
                                                                             :display-name \"Host2\"}}}]
                                                :vnfs-v2 [{:graph {:nodes #{\"VNFC:vEXGW-SF3\" \"VNFC:vEXGW-SF3-Port1\" \"VNFC:vEXGW-SF3-Port2\"
                                                                            \"VNFC:vEXGW-SF4\" \"VNFC:vEXGW-SF4-Port1\" \"VNFC:vEXGW-SF4-Port2\"
                                                                            \"VNFC:vEXGW-SF2\" \"VNFC:vEXGW-SF2-Port1\" \"VNFC:vEXGW-SF2-Port2\"
                                                                            \"VNFC:vEXGW-SF6\" \"VNFC:vEXGW-SF6-Port1\" \"VNFC:vEXGW-SF6-Port2\"
                                                                            \"VNFC:vEXGW-CF2\" \"VNFC:vEXGW-CF2-Port1\" \"VNFC:vEXGW-CF2-Port2\"
                                                                            \"VNFC:vEXGW-SF1\" \"VNFC:vEXGW-SF1-Port1\" \"VNFC:vEXGW-SF1-Port2\"
                                                                            \"VNFC:vEXGW-SF5\" \"VNFC:vEXGW-SF5-Port1\" \"VNFC:vEXGW-SF5-Port2\"
                                                                            \"VNFC:vEXGW-CF1\" \"VNFC:vEXGW-CF1-Port1\" \"VNFC:vEXGW-CF1-Port2\"}
                                                                   :edges #{#{\"VNFC:vEXGW-SF3\" \"VNFC:vEXGW-SF3-Port1\"}
                                                                            #{\"VNFC:vEXGW-SF3\" \"VNFC:vEXGW-SF3-Port2\"}
                                                                            #{\"VNFC:vEXGW-SF4\" \"VNFC:vEXGW-SF4-Port1\"}
                                                                            #{\"VNFC:vEXGW-SF4\" \"VNFC:vEXGW-SF4-Port2\"}
                                                                            #{\"VNFC:vEXGW-SF2\" \"VNFC:vEXGW-SF2-Port1\"}
                                                                            #{\"VNFC:vEXGW-SF2\" \"VNFC:vEXGW-SF2-Port2\"}
                                                                            #{\"VNFC:vEXGW-SF6\" \"VNFC:vEXGW-SF6-Port1\"}
                                                                            #{\"VNFC:vEXGW-SF6\" \"VNFC:vEXGW-SF6-Port2\"}
                                                                            #{\"VNFC:vEXGW-CF2\" \"VNFC:vEXGW-CF2-Port1\"}
                                                                            #{\"VNFC:vEXGW-CF2\" \"VNFC:vEXGW-CF2-Port2\"}
                                                                            #{\"VNFC:vEXGW-SF1\" \"VNFC:vEXGW-SF1-Port1\"}
                                                                            #{\"VNFC:vEXGW-SF1\" \"VNFC:vEXGW-SF1-Port2\"}
                                                                            #{\"VNFC:vEXGW-SF5\" \"VNFC:vEXGW-SF5-Port1\"}
                                                                            #{\"VNFC:vEXGW-SF5\" \"VNFC:vEXGW-SF5-Port2\"}
                                                                            #{\"VNFC:vEXGW-CF1\" \"VNFC:vEXGW-CF1-Port1\"}
                                                                            #{\"VNFC:vEXGW-CF1\" \"VNFC:vEXGW-CF1-Port2\"}}
                                                                   :containers #{{:entity-id \"VNF:vEXGW\"
                                                                                  :contents #{\"Host1\"
                                                                                              \"Host2\"}}
                                                                                 {:entity-id \"Host1\"
                                                                                  :contents #{\"VM1\" \"VM2\" \"VM3\"}}
                                                                                 {:entity-id \"Host2\"
                                                                                  :contents #{\"VM4\" \"VM5\" \"VM6\" \"VM7\" \"VM8\"}}
                                                                                 {:entity-id \"VM1\"
                                                                                  :contents #{\"VNFC:vEXGW-SF3\" \"VNFC:vEXGW-SF3-Port1\" \"VNFC:vEXGW-SF3-Port2\"}}
                                                                                 {:entity-id \"VM2\"
                                                                                  :contents #{\"VNFC:vEXGW-SF4\" \"VNFC:vEXGW-SF4-Port1\" \"VNFC:vEXGW-SF4-Port2\"}}
                                                                                 {:entity-id \"VM3\"
                                                                                  :contents #{\"VNFC:vEXGW-SF2\" \"VNFC:vEXGW-SF2-Port1\" \"VNFC:vEXGW-SF2-Port2\"}}
                                                                                 {:entity-id \"VM4\"
                                                                                  :contents #{\"VNFC:vEXGW-SF6\" \"VNFC:vEXGW-SF6-Port1\" \"VNFC:vEXGW-SF6-Port2\"}}
                                                                                 {:entity-id \"VM5\"
                                                                                  :contents #{\"VNFC:vEXGW-CF2\" \"VNFC:vEXGW-CF2-Port1\" \"VNFC:vEXGW-CF2-Port2\"}}
                                                                                 {:entity-id \"VM6\"
                                                                                  :contents #{\"VNFC:vEXGW-SF1\" \"VNFC:vEXGW-SF1-Port1\" \"VNFC:vEXGW-SF1-Port2\"}}
                                                                                 {:entity-id \"VM7\"
                                                                                  :contents #{\"VNFC:vEXGW-SF5\" \"VNFC:vEXGW-SF5-Port1\" \"VNFC:vEXGW-SF5-Port2\"}}
                                                                                 {:entity-id \"VM8\"
                                                                                  :contents #{\"VNFC:vEXGW-CF1\" \"VNFC:vEXGW-CF1-Port1\" \"VNFC:vEXGW-CF1-Port2\"}}}}
                                                           :entities {\"VNF:vEXGW\" {:id \"VNF:vEXGW\"
                                                                                   :entity-type :vnf
                                                                                   :display-name \"VNF:vEXGW\"}
                                                                      \"VNFC:vEXGW-SF3\" {:id \"VNFC:vEXGW-SF3\"
                                                                                        :entity-type :vnfc
                                                                                        :display-name \"VNFC:vEXGW-SF3\"}
                                                                      \"VNFC:vEXGW-SF3-Port1\" {:id \"VNFC:vEXGW-SF3-Port1\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF3-Port1\"}
                                                                      \"VNFC:vEXGW-SF3-Port2\" {:id \"VNFC:vEXGW-SF3-Port2\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF3-Port2\"}
                                                                      \"VNFC:vEXGW-SF4\" {:id \"VNFC:vEXGW-SF4\"
                                                                                        :entity-type :vnfc
                                                                                        :display-name \"VNFC:vEXGW-SF4\"}
                                                                      \"VNFC:vEXGW-SF4-Port1\" {:id \"VNFC:vEXGW-SF4-Port1\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF4-Port1\"}
                                                                      \"VNFC:vEXGW-SF4-Port2\" {:id \"VNFC:vEXGW-SF4-Port2\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF4-Port2\"}
                                                                      \"VNFC:vEXGW-SF2\" {:id \"VNFC:vEXGW-SF2\"
                                                                                        :entity-type :vnfc
                                                                                        :display-name \"VNFC:vEXGW-SF2\"}
                                                                      \"VNFC:vEXGW-SF2-Port1\" {:id \"VNFC:vEXGW-SF2-Port1\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF2-Port1\"}
                                                                      \"VNFC:vEXGW-SF2-Port2\" {:id \"VNFC:vEXGW-SF2-Port2\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF2-Port2\"}
                                                                      \"VNFC:vEXGW-SF6\" {:id \"VNFC:vEXGW-SF6\"
                                                                                        :entity-type :vnfc
                                                                                        :display-name \"VNFC:vEXGW-SF6\"}
                                                                      \"VNFC:vEXGW-SF6-Port1\" {:id \"VNFC:vEXGW-SF6-Port1\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF6-Port1\"}
                                                                      \"VNFC:vEXGW-SF6-Port2\" {:id \"VNFC:vEXGW-SF6-Port2\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF6-Port2\"}
                                                                      \"VNFC:vEXGW-CF2\" {:id \"VNFC:vEXGW-CF2\"
                                                                                        :entity-type :vnfc
                                                                                        :display-name \"VNFC:vEXGW-CF2\"}
                                                                      \"VNFC:vEXGW-CF2-Port1\" {:id \"VNFC:vEXGW-CF2-Port1\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-CF2-Port1\"}
                                                                      \"VNFC:vEXGW-CF2-Port2\" {:id \"VNFC:vEXGW-CF2-Port2\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-CF2-Port2\"}
                                                                      \"VNFC:vEXGW-SF1\" {:id \"VNFC:vEXGW-SF1\"
                                                                                        :entity-type :vnfc
                                                                                        :display-name \"VNFC:vEXGW-SF1\"}
                                                                      \"VNFC:vEXGW-SF1-Port1\" {:id \"VNFC:vEXGW-SF1-Port1\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF1-Port1\"}
                                                                      \"VNFC:vEXGW-SF1-Port2\" {:id \"VNFC:vEXGW-SF1-Port2\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF1-Port2\"}
                                                                      \"VNFC:vEXGW-SF5\" {:id \"VNFC:vEXGW-SF5\"
                                                                                        :entity-type :vnfc
                                                                                        :display-name \"VNFC:vEXGW-SF5\"}
                                                                      \"VNFC:vEXGW-SF5-Port1\" {:id \"VNFC:vEXGW-SF5-Port1\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF5-Port1\"}
                                                                      \"VNFC:vEXGW-SF5-Port2\" {:id \"VNFC:vEXGW-SF5-Port2\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-SF5-Port2\"}
                                                                      \"VNFC:vEXGW-CF1\" {:id \"VNFC:vEXGW-CF1\"
                                                                                        :entity-type :vnfc
                                                                                        :display-name \"VNFC:vEXGW-CF1\"}
                                                                      \"VNFC:vEXGW-CF1-Port1\" {:id \"VNFC:vEXGW-CF1-Port1\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-CF1-Port1\"}
                                                                      \"VNFC:vEXGW-CF1-Port2\" {:id \"VNFC:vEXGW-CF1-Port2\"
                                                                                              :entity-type :port
                                                                                              :display-name \"VNFC:vEXGW-CF1-Port2\"}
                                                                      \"VM1\" {:id \"VM1\"
                                                                             :entity-type :vm
                                                                             :display-name \"VM1\"}
                                                                      \"VM2\" {:id \"VM2\"
                                                                             :entity-type :vm
                                                                             :display-name \"VM2\"}
                                                                      \"VM3\"  {:id \"VM3\"
                                                                              :entity-type :vm
                                                                              :display-name \"VM3\"}
                                                                      \"VM4\" {:id \"VM4\"
                                                                             :entity-type :vm
                                                                             :display-name \"VM4\"}
                                                                      \"VM5\" {:id \"VM5\"
                                                                             :entity-type :vm
                                                                             :display-name \"VM5\"}
                                                                      \"VM6\" {:id \"VM6\"
                                                                             :entity-type :vm
                                                                             :display-name \"VM6\"}
                                                                      \"VM7\" {:id \"VM7\"
                                                                             :entity-type :vm
                                                                             :display-name \"VM7\"}
                                                                      \"VM8\" {:id \"VM8\"
                                                                             :entity-type :vm
                                                                             :display-name \"VM8\"}
                                                                      \"Host1\" {:id \"Host1\"
                                                                               :entity-type :host
                                                                               :display-name \"Host1\"}
                                                                      \"Host2\" {:id \"Host2\"
                                                                               :entity-type :host
                                                                               :display-name \"Host2\"}}}]})" "(-> resp cljs.reader/read-string type)" "(-> resp cljs.reader/read-string cljs.reader/read-string)" "(-> resp cljs.reader/read-string y)" "(-> resp cljs.reader/read-string )" "(-> resp cljs.reader/read-string cljs.reader/read-string)" "resp" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                         :body)))" "resp" "(cljs.reader/read-string resp)" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                         :body)))" "resp" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                         :body cljs.read/read-string cljs.read/read-string)))" "resp" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                         :body cljs.read/read-string)))" "resp" " " "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                         :body)))" "resp" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                        :body
                                                        cljs.reader/read-string cljs.reader/read-string)))" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                        :body
                                                        cljs.reader/read-string)))" "resp" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                        :body
                                                        cljs.reader/read-string)))" "(let [{:keys [a b c]} {:a {:b 1 :c 2}}] a)" "(let [{:keys [a b c]} {:a {:b 1 :c 2}}] c)" "(let [{:keys [a b c]} {:a {:b 1 :c 2}}] b)" "(let [{:keys [a b c]} {:a {:b 1 :c 2}}] )" "(let [{:keys [a {:keys [b c]}]} {:a {:b 1 :c 2}}] b)" "(let [{:keys [a {:keys [b c]}]} {:a {:b 1 :c 2}}] a)" "(let [{:keys [a {:keys [b c]}]} {:a {:b 1 :c 2}}] a b c )" "(let [{:keys [a {:keys [b c]}]} {:a {:b 1 :c 2}}])" "(split-at (/ (count [1 2 3 4 5]) 2) [1 2 3 4 5])" "(partition 2 [1 2 3 4 5 6 7])" "(partition-all 2 [1 2 3 ])" "(partition 2 [1 2 3 ])" "(partition 2 [1 2 3 4])" "resp" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                        :body
                                                        )))" "resp" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                        :body
                                                        )))" "(cljs.reader/read-string resp)" "(cljs.reader/reat-string resp)" "resp" "(go (def resp (-> (<! (http/get \"/network/emls\"))
                                                        :body
                                                        cljs.reader/read-string)))" "resp" "(def resp 1)" "resp" "(go (let [resp (-> (<! (http/get \"/network/emls\"))
                         :body
                         cljs.reader/read-string)]))" "$" "(cljs.core.async.macros/go (-> (cljs.core.async/<! (http/get \"/network/emls\"))
                                               :body
                                               cljs.reader/read-string))" "(go cljs.core.async/<!)" "(go (-> (cljs.core.async/<! (http/get \"/network/emls\"))
                                               :body
                                               cljs.reader/read-string))" "cljs.core.async/<!" "(-> (cljs.core.async/<! (http/get \"/network/emls\"))
                         :body
                         cljs.reader/read-string)" "(-> (<! (http/get \"/network/emls\"))
                         :body
                         cljs.reader/read-string)" "(js/alert \"ET\")" "(+ 1 1)" "(<! http/get \"/network/emls\")" "resp" "(go (let [resp (-> (<! (http/get \"/network/emls\"))
                         :body
                         cljs.reader/read-string)]))" "(cljs-repl)" "(go)")